/**

Generated by the following Solidity interface...
```solidity
interface V3DutchOrderReactor {
    struct SignedOrder {
        bytes order;
        bytes sig;
    }

    error DeadlineReached();
    error DuplicateFeeOutput(address duplicateToken);
    error FeeTooLarge(address token, uint256 amount, address recipient);
    error IndexOutOfBounds();
    error InputAndOutputFees();
    error InvalidCosignature();
    error InvalidCosignerInput();
    error InvalidCosignerOutput();
    error InvalidDecayCurve();
    error InvalidFeeToken(address feeToken);
    error InvalidReactor();
    error NativeTransferFailed();
    error NoExclusiveOverride();

    event Fill(bytes32 indexed orderHash, address indexed filler, address indexed swapper, uint256 nonce);
    event OwnershipTransferred(address indexed user, address indexed newOwner);
    event ProtocolFeeControllerSet(address oldFeeController, address newFeeController);

    constructor(address _permit2, address _protocolFeeOwner);

    receive() external payable;

    function execute(SignedOrder memory order) external payable;
    function executeBatch(SignedOrder[] memory orders) external payable;
    function executeBatchWithCallback(SignedOrder[] memory orders, bytes memory callbackData) external payable;
    function executeWithCallback(SignedOrder memory order, bytes memory callbackData) external payable;
    function feeController() external view returns (address);
    function owner() external view returns (address);
    function permit2() external view returns (address);
    function setProtocolFeeController(address _newFeeController) external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_permit2",
        "type": "address",
        "internalType": "contract IPermit2"
      },
      {
        "name": "_protocolFeeOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "execute",
    "inputs": [
      {
        "name": "order",
        "type": "tuple",
        "internalType": "struct SignedOrder",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeBatch",
    "inputs": [
      {
        "name": "orders",
        "type": "tuple[]",
        "internalType": "struct SignedOrder[]",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeBatchWithCallback",
    "inputs": [
      {
        "name": "orders",
        "type": "tuple[]",
        "internalType": "struct SignedOrder[]",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      },
      {
        "name": "callbackData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeWithCallback",
    "inputs": [
      {
        "name": "order",
        "type": "tuple",
        "internalType": "struct SignedOrder",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      },
      {
        "name": "callbackData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "feeController",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IProtocolFeeController"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermit2"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setProtocolFeeController",
    "inputs": [
      {
        "name": "_newFeeController",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Fill",
    "inputs": [
      {
        "name": "orderHash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "filler",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "swapper",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProtocolFeeControllerSet",
    "inputs": [
      {
        "name": "oldFeeController",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "newFeeController",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "DeadlineReached",
    "inputs": []
  },
  {
    "type": "error",
    "name": "DuplicateFeeOutput",
    "inputs": [
      {
        "name": "duplicateToken",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "FeeTooLarge",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "IndexOutOfBounds",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InputAndOutputFees",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCosignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCosignerInput",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCosignerOutput",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidDecayCurve",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidFeeToken",
    "inputs": [
      {
        "name": "feeToken",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidReactor",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NativeTransferFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoExclusiveOverride",
    "inputs": []
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod V3DutchOrderReactor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c06040523480156200001157600080fd5b50604051620046c4380380620046c483398101604081905262000034916200016a565b600080546001600160a01b0319166001600160a01b03831690811782556040518492849283928392907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506001600255506001600160a01b031660805261a4b0194601620000bf576001600160401b0362000985620000e060201b171660a052620000d8565b6001600160401b03620009fc6200014d60201b171660a0525b5050620001c3565b600060646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000122573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001489190620001a9565b905090565b4390565b6001600160a01b03811681146200016757600080fd5b50565b600080604083850312156200017e57600080fd5b82516200018b8162000151565b60208401519092506200019e8162000151565b809150509250929050565b600060208284031215620001bc57600080fd5b5051919050565b60805160a0516144d5620001ef6000396000610b2901526000818160e00152611b3201526144d56000f3fe60806040526004361061009a5760003560e01c80632d771389116100695780636999b3771161004e5780636999b377146101715780638da5cb5b1461019e578063f2fde38b146101cb57600080fd5b80632d7713891461013e5780633f62192e1461015e57600080fd5b80630d335884146100a65780630d7a16c3146100bb57806312261ee7146100ce57806313fb72c71461012b57600080fd5b366100a157005b600080fd5b6100b96100b4366004613047565b6101eb565b005b6100b96100c93660046130f5565b610364565b3480156100da57600080fd5b506101027f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b9610139366004613137565b6104c5565b34801561014a57600080fd5b506100b96101593660046131d5565b610683565b6100b961016c3660046131f2565b61078f565b34801561017d57600080fd5b506001546101029073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101aa57600080fd5b506000546101029073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101d757600080fd5b506100b96101e63660046131d5565b610894565b6101f3610a00565b604080516001808252818301909252600091816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161020a5790505090506102b284610a71565b816000815181106102c5576102c5613256565b60200260200101819052506102d981610c22565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061031990849087908790600401613459565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b5050505061035481610c73565b5061035f6001600255565b505050565b61036c610a00565b8060008167ffffffffffffffff81111561038857610388613227565b60405190808252806020026020018201604052801561044357816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816103a65790505b50905060005b828110156104a25761047d85858381811061046657610466613256565b9050602002810190610478919061351f565b610a71565b82828151811061048f5761048f613256565b6020908102919091010152600101610449565b506104ac81610c22565b6104b581610c73565b50506104c16001600255565b5050565b6104cd610a00565b8260008167ffffffffffffffff8111156104e9576104e9613227565b6040519080825280602002602001820160405280156105a457816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816105075790505b50905060005b828110156105ec576105c787878381811061046657610466613256565b8282815181106105d9576105d9613256565b60209081029190910101526001016105aa565b506105f681610c22565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061063690849088908890600401613459565b600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b5050505061067181610c73565b505061067d6001600255565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527fb904ae9529e373e48bc82df4326cceaf1b4c472babf37f5b7dec46fecc6b53e0910160405180910390a15050565b610797610a00565b604080516001808252818301909252600091816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816107ae57905050905061085682610a71565b8160008151811061086957610869613256565b602002602001018190525061087d81610c22565b61088681610c73565b506108916001600255565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610700565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6000606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f7919061355d565b905090565b4390565b6002805403610a6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610700565b60028055565b6040805161016081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905260606101408401819052908352835180820185528281526020808201849052818601849052840152928201839052828201929092526080810182905290610aea8380613576565b810190610af79190613b44565b90506000610b0482610dc6565b9050610b1081836110ac565b610b1982611108565b610b228261126c565b6000610b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16565b90506040518060a0016040528084600001518152602001610b888560a00151600001518487606001516113799092919063ffffffff16565b815260a0850151516080860151602090920191610ba59185611444565b8152602001868060200190610bba9190613576565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810184905260a0850151908101518151604090920151929650610c1a928792908561152b565b505050919050565b805160005b8181101561035f576000838281518110610c4357610c43613256565b60200260200101519050610c568161153f565b610c608133611a2f565b610c6a8133611b30565b50600101610c27565b805160005b81811015610db5576000838281518110610c9457610c94613256565b602002602001015190506000816040015151905060005b81811015610d1557600083604001518281518110610ccb57610ccb613256565b60200260200101519050610d0c81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16611f329092919063ffffffff16565b50600101610cab565b5081600001516020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16868581518110610d5e57610d5e613256565b6020026020010151608001517f78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66856000015160400151604051610da391815260200190565b60405180910390a45050600101610c78565b5047156104c1576104c13347611f79565b6040517f563344757463684f72646572280000000000000000000000000000000000000060208201527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8201527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8201527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8201527f56334475746368496e7075742062617365496e7075742c00000000000000000060658201527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c820152600090609801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208301527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348301527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b83015290606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d8083529091906144136020830139604051602001610fa990613c5c565b604051602081830303815290604052604051602001610fc790613d6e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526110069594939291602001613ea6565b604051602081830303815290604052805190602001206110298360000151612013565b8360200151846040015161104086606001516120ad565b61104d87608001516121fe565b60408051602081019790975286019490945273ffffffffffffffffffffffffffffffffffffffff9092166060850152608084015260a083015260c082015260e0015b604051602081830303815290604052805190602001209050919050565b8051606001514211156110eb576040517fb08ce5b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516104c1906110fe838561229f565b8360c00151612314565b60a08101516060015115611174578060600151602001518160a00151606001511115611160576040517fac9143e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a081015160609081015190820151602001525b8060800151518160a001516080015151146111bb576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808101515160005b8181101561035f576000836080015182815181106111e4576111e4613256565b6020026020010151905060008460a0015160800151838151811061120a5761120a613256565b602002602001015190508060001461126257816020015181101561125a576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602082018190525b50506001016111c4565b600061128582604001514861243c90919063ffffffff16565b90508160600151608001516000146112e05760006112ab83606001516080015183612477565b90506112d58160008560600151606001518660600151602001516124b0909392919063ffffffff16565b606084015160200152505b60808201515160005b8181101561067d5760008460800151828151811061130957611309613256565b602002602001015190508060a0015160001461137057600061132f8260a0015186612477565b60808301516020840151919250611369919083907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124d0565b6020830152505b506001016112e9565b6113b36040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60006040518060e001604052808660400151815260200186602001518152602001858152602001848152602001600081526020018660600151815260200161256281525090506000611404826125ee565b6040805160608082018352895173ffffffffffffffffffffffffffffffffffffffff16825260208201939093529790910151908701525093949350505050565b82516060908067ffffffffffffffff81111561146257611462613227565b6040519080825280602002602001820160405280156114cb57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114805790505b50915060005b81811015611522576114fd8682815181106114ee576114ee613256565b602002602001015186866126fa565b83828151811061150f5761150f613256565b60209081029190910101526001016114d1565b50509392505050565b61153885858585856127e3565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1661155f5750565b6001546040517f8aa6cf0300000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690638aa6cf03906115b6908590600401613f11565b600060405180830381865afa1580156115d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116199190810190613f24565b60408301515181519192509060006116318284614023565b67ffffffffffffffff81111561164957611649613227565b6040519080825280602002602001820160405280156116b257816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116675790505b50905060005b8381101561170357856040015181815181106116d6576116d6613256565b60200260200101518282815181106116f0576116f0613256565b60209081029190910101526001016116b8565b5060008060005b84811015611a1e57600087828151811061172657611726613256565b6020026020010151905060005b828110156117e45788818151811061174d5761174d613256565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16036117dc5781516040517ffff0830300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610700565b600101611733565b506000805b888110156118a55760008b60400151828151811061180957611809613256565b60200260200101519050836000015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff160361189c578515611886576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516118959084614023565b9250600196505b506001016117e9565b50815160208b01515173ffffffffffffffffffffffffffffffffffffffff91821691160361191e578415611905576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808b015101516119179082614023565b9050600193505b806000036119735781516040517feddf07f500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610700565b611981816005612710612885565b826020015111156119f4578151602083015160408085015190517f82e7565600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526024810192909252919091166044820152606401610700565b8186848a0181518110611a0957611a09613256565b6020908102919091010152505060010161170a565b505050604090940193909352505050565b81515173ffffffffffffffffffffffffffffffffffffffff163014611a80576040517f4ddf4a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516080015173ffffffffffffffffffffffffffffffffffffffff16156104c1578151608001516040517f6e84ba2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636e84ba2b90611afc9084908690600401614036565b60006040518083038186803b158015611b1457600080fd5b505afa158015611b28573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663137c29fe611bf0846040805160a0810182526000606082018181526080830182905282526020820181905291810191909152506040805160a081018252602080840180515173ffffffffffffffffffffffffffffffffffffffff1660608085019182529151850151608085015283528451840151918301919091529251909201519082015290565b6040805180820182526000808252602091820152815180830190925273ffffffffffffffffffffffffffffffffffffffff8616825280870151810151908201528560000151602001518660800151604051602001611cbd907f4e6f6e6c696e656172447574636844656361792800000000000000000000000081527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060148201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000602b82015260440190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d80835290919061441360208301396040518060600160405280602e81526020016143e5602e9139604051602001611d2790613c5c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f563344757463684f72646572280000000000000000000000000000000000000060208401527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8401527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8401527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8401527f56334475746368496e7075742062617365496e7075742c00000000000000000060658401527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c840152815160788185030181526098840190925291611e579060b801613d6e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611e97969594939291602001614065565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260608a01517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b168352611f049695949392600401614118565b600060405180830381600087803b158015611f1e57600080fd5b505af1158015611b28573d6000803e3d6000fd5b73ffffffffffffffffffffffffffffffffffffffff8316611f575761035f8282611f79565b61035f73ffffffffffffffffffffffffffffffffffffffff84163384846128c1565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611fd3576040519150601f19603f3d011682016040523d82523d6000602084013e611fd8565b606091505b505090508061035f576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060c00160405280608d8152602001614413608d913980516020918201208351848301516040808701516060880151608089015160a08a0151805190890120935161108f98939492939192910196875273ffffffffffffffffffffffffffffffffffffffff958616602088015293851660408701526060860192909252608085015290911660a083015260c082015260e00190565b60006040516020016120be90613c5c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b840152815160448185030181526064840190925261217e929091906084016141d3565b60405160208183030381529060405280519060200120826000015183602001516121ab85604001516129ac565b60608087015160808089015160408051602081019990995273ffffffffffffffffffffffffffffffffffffffff909716968801969096529186019390935284015260a083015260c082015260e00161108f565b600080825160200267ffffffffffffffff81111561221e5761221e613227565b6040519080825280601f01601f191660200182016040528015612248576020820181803683370190505b50835190915060005b8181101561228f57600061227d86838151811061227057612270613256565b6020026020010151612aaa565b60208381028601015250600101612251565b5050805160209091012092915050565b600081468460a001516040516020016122b89190614202565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526122f5939291602001614287565b6040516020818303038152906040528051906020012090505b92915050565b6000808280602001905181019061232b91906142b4565b9150915060008360408151811061234457612344613256565b0160209081015160408051600080825293810180835289905260f89290921c9082018190526060820186905260808201859052925060019060a0016020604051602081039080840390855afa1580156123a1573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415806123fc575073ffffffffffffffffffffffffffffffffffffffff8116155b15612433576040517fd7815be100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b60008183101561246a5761245861245384846142d8565b612c0e565b6124639060006142eb565b905061230e565b61246361245383856142d8565b600080821261248f576124638383633b9aca00612885565b6124a761249b83614312565b8490633b9aca00612cc4565b61246390614312565b60006124c7856124c086846142eb565b85856124d0565b95945050505050565b6000808412156125335760006124e585614312565b905085612512827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6142d8565b1015612521578291505061255a565b61252b8187614023565b91505061254f565b8385101561254257508161255a565b61254c84866142d8565b90505b6124c7818484612d08565b949350505050565b60008484106125725750806124c7565b600061257e87866142d8565b9050600061258c88886142d8565b90506000858512156125be576125ae83836125a7888a6142eb565b9190612885565b6125b790614312565b90506125d7565b6125d483836125cd89896142eb565b9190612cc4565b90505b6125e1818761434a565b9998505050505050505050565b60006010826000015160200151511115612634576040517f0e99676600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160600151826040015110158061264f575081516020015151155b1561266e57608082015160a0830151602084015161230e929091612d08565b600061268f8360400151846060015161268791906142d8565b61ffff612d19565b90506000806000806126a5876000015186612d31565b935093509350935060006126d08561ffff168561ffff168861ffff1686868d60c0015163ffffffff16565b608089015160a08a015160208b01519293506126ee929184916124d0565b98975050505050505050565b604080516060810182526000808252602082018190529181019190915260006040518060e001604052808660400151815260200186602001518152602001858152602001848152602001866080015181526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001612ef381525090506000612787826125ee565b90506040518060600160405280876000015173ffffffffffffffffffffffffffffffffffffffff168152602001828152602001876060015173ffffffffffffffffffffffffffffffffffffffff16815250925050509392505050565b6127ee848483612f47565b6115385781612829576040517fb9ec1e9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604085015160005b815181101561243357600082828151811061284e5761284e613256565b60200260200101519050612877856127106128699190614023565b602083015190612710612cc4565b602090910152600101612831565b6000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04841183021582026128ba57600080fd5b5091020490565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff841660248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610700565b6040517f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208201527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8201526000906064016040516020818303038152906040528051906020012082600001518360200151604051602001612a579190614372565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012090830194909452810191909152606081019190915260800161108f565b6000604051602001612abb90613d6e565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8401528151604481850301815260648401909252612b7b929091906084016141d3565b6040516020818303038152906040528051906020012082600001518360200151612ba885604001516129ac565b60608087015160808089015160a0808b015160408051602081019b909b5273ffffffffffffffffffffffffffffffffffffffff998a16908b01529489019690965290870193909352939093169184019190915260c083015260e08201526101000161108f565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610700565b5090565b6000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0484118302158202612cf957600080fd5b50910281810615159190040190565b600061255a612d178585612f93565b835b6000818310612d285781612d2a565b825b9392505050565b6000806000806000612d44876000015190565b905061ffff8616612d56826000612fa2565b61ffff1610612d9a576000612d6b8282612fa2565b60008960200151600081518110612d8457612d84613256565b6020026020010151945094509450945050612eea565b60006001886020015151612dae91906143a8565b905060015b8161ffff168161ffff1611612e7e578761ffff16612dde8261ffff1685612fa290919063ffffffff16565b61ffff1610612e6c57612e00612df56001836143a8565b849061ffff16612fa2565b612e0e8461ffff8416612fa2565b60208b0151612e1e6001856143a8565b61ffff1681518110612e3257612e32613256565b60200260200101518b602001518461ffff1681518110612e5457612e54613256565b60200260200101519650965096509650505050612eea565b80612e76816143c3565b915050612db3565b50612e8d8261ffff8316612fa2565b612e9b8361ffff8416612fa2565b89602001518361ffff1681518110612eb557612eb5613256565b60200260200101518a602001518461ffff1681518110612ed757612ed7613256565b6020026020010151955095509550955050505b92959194509250565b6000848410612f035750806124c7565b6000612f0f87866142d8565b90506000612f1d88886142d8565b9050600085851215612f38576125ae83836125cd888a6142eb565b6125d483836125a789896142eb565b600073ffffffffffffffffffffffffffffffffffffffff84161580612f6b57508282115b8061255a575073ffffffffffffffffffffffffffffffffffffffff8416331490509392505050565b6000818311612d285781612d2a565b600060108210612fde576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506010021c90565b600060408284031215612ff857600080fd5b50919050565b60008083601f84011261301057600080fd5b50813567ffffffffffffffff81111561302857600080fd5b60208301915083602082850101111561304057600080fd5b9250929050565b60008060006040848603121561305c57600080fd5b833567ffffffffffffffff8082111561307457600080fd5b61308087838801612fe6565b9450602086013591508082111561309657600080fd5b506130a386828701612ffe565b9497909650939450505050565b60008083601f8401126130c257600080fd5b50813567ffffffffffffffff8111156130da57600080fd5b6020830191508360208260051b850101111561304057600080fd5b6000806020838503121561310857600080fd5b823567ffffffffffffffff81111561311f57600080fd5b61312b858286016130b0565b90969095509350505050565b6000806000806040858703121561314d57600080fd5b843567ffffffffffffffff8082111561316557600080fd5b613171888389016130b0565b9096509450602087013591508082111561318a57600080fd5b5061319787828801612ffe565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089157600080fd5b80356131d0816131a3565b919050565b6000602082840312156131e757600080fd5b8135612d2a816131a3565b60006020828403121561320457600080fd5b813567ffffffffffffffff81111561321b57600080fd5b61255a84828501612fe6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b838110156132a0578181015183820152602001613288565b50506000910152565b600081518084526132c1816020860160208601613285565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008151808452602080850194506020840160005b83811015613353578151805173ffffffffffffffffffffffffffffffffffffffff908116895284820151858a0152604091820151169088015260609096019590820190600101613308565b509495945050505050565b6000815160e0845273ffffffffffffffffffffffffffffffffffffffff8082511660e08601528060208301511661010086015260408201516101208601526060820151610140860152806080830151166101608601525060a0810151905060c06101808501526133d26101a08501826132a9565b905060208301516134106020860182805173ffffffffffffffffffffffffffffffffffffffff16825260208082015190830152604090810151910152565b506040830151848203608086015261342882826132f3565b915050606083015184820360a086015261344282826132a9565b915050608083015160c08501528091505092915050565b6000604082016040835280865180835260608501915060608160051b8601019250602080890160005b838110156134ce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526134bc86835161335e565b95509382019390820190600101613482565b5050858403818701528684528688828601376000848801820152601f9096017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092019094019695505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261355357600080fd5b9190910192915050565b60006020828403121561356f57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126135ab57600080fd5b83018035915067ffffffffffffffff8211156135c657600080fd5b60200191503681900382131561304057600080fd5b60405160c0810167ffffffffffffffff811182821017156135fe576135fe613227565b60405290565b6040805190810167ffffffffffffffff811182821017156135fe576135fe613227565b60405160a0810167ffffffffffffffff811182821017156135fe576135fe613227565b60405160e0810167ffffffffffffffff811182821017156135fe576135fe613227565b6040516060810167ffffffffffffffff811182821017156135fe576135fe613227565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156136d7576136d7613227565b604052919050565b600082601f8301126136f057600080fd5b813567ffffffffffffffff81111561370a5761370a613227565b61373b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613690565b81815284602083860101111561375057600080fd5b816020850160208301376000918101602001919091529392505050565b600060c0828403121561377f57600080fd5b6137876135db565b90508135613794816131a3565b815260208201356137a4816131a3565b80602083015250604082013560408201526060820135606082015260808201356137cd816131a3565b608082015260a082013567ffffffffffffffff8111156137ec57600080fd5b6137f8848285016136df565b60a08301525092915050565b600067ffffffffffffffff82111561381e5761381e613227565b5060051b60200190565b60006040828403121561383a57600080fd5b613842613604565b90508135815260208083013567ffffffffffffffff81111561386357600080fd5b8301601f8101851361387457600080fd5b803561388761388282613804565b613690565b81815260059190911b820183019083810190878311156138a657600080fd5b928401925b828410156138c4578335825292840192908401906138ab565b8085870152505050505092915050565b600060a082840312156138e657600080fd5b6138ee613627565b905081356138fb816131a3565b815260208281013590820152604082013567ffffffffffffffff81111561392157600080fd5b61392d84828501613828565b604083015250606082013560608201526080820135608082015292915050565b600082601f83011261395e57600080fd5b8135602061396e61388283613804565b82815260059290921b8401810191818101908684111561398d57600080fd5b8286015b84811015613a6a57803567ffffffffffffffff808211156139b25760008081fd5b818901915060c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156139eb5760008081fd5b6139f36135db565b87840135613a00816131a3565b81526040848101358983015260608086013585811115613a205760008081fd5b613a2e8f8c838a0101613828565b838501525060809450848601359150613a46826131a3565b82015260a08481013593820193909352920135908201528352918301918301613991565b509695505050505050565b600060a08284031215613a8757600080fd5b613a8f613627565b905081358152602080830135613aa4816131a3565b8082840152506040830135604083015260608301356060830152608083013567ffffffffffffffff811115613ad857600080fd5b8301601f81018513613ae957600080fd5b8035613af761388282613804565b81815260059190911b82018301908381019087831115613b1657600080fd5b928401925b82841015613b3457833582529284019290840190613b1b565b6080860152509295945050505050565b600060208284031215613b5657600080fd5b813567ffffffffffffffff80821115613b6e57600080fd5b9083019060e08286031215613b8257600080fd5b613b8a61364a565b823582811115613b9957600080fd5b613ba58782860161376d565b825250613bb4602084016131c5565b602082015260408301356040820152606083013582811115613bd557600080fd5b613be1878286016138d4565b606083015250608083013582811115613bf957600080fd5b613c058782860161394d565b60808301525060a083013582811115613c1d57600080fd5b613c2987828601613a75565b60a08301525060c083013582811115613c4157600080fd5b613c4d878286016136df565b60c08301525095945050505050565b7f56334475746368496e707574280000000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600d8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601b8201527f4e6f6e6c696e656172447574636844656361792063757276652c000000000000602f8201527f75696e74323536206d6178416d6f756e742c000000000000000000000000000060498201527f75696e743235362061646a7573746d656e745065724777656942617365466565605b8201527f2900000000000000000000000000000000000000000000000000000000000000607b8201526000607c820161230e565b7f563344757463684f75747075742800000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600e8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601c8201527f4e6f6e6c696e656172447574636844656361792063757276652c00000000000060308201527f6164647265737320726563697069656e742c0000000000000000000000000000604a8201527f75696e74323536206d696e416d6f756e742c0000000000000000000000000000605c8201527f75696e743235362061646a7573746d656e745065724777656942617365466565606e8201527f2900000000000000000000000000000000000000000000000000000000000000608e8201526000608f820161230e565b60008651613eb8818460208b01613285565b865190830190613ecc818360208b01613285565b8651910190613edf818360208a01613285565b8551910190613ef2818360208901613285565b8451910190613f05818360208801613285565b01979650505050505050565b602081526000612d2a602083018461335e565b60006020808385031215613f3757600080fd5b825167ffffffffffffffff811115613f4e57600080fd5b8301601f81018513613f5f57600080fd5b8051613f6d61388282613804565b81815260609182028301840191848201919088841115613f8c57600080fd5b938501935b83851015613fe85780858a031215613fa95760008081fd5b613fb161366d565b8551613fbc816131a3565b81528587015187820152604080870151613fd5816131a3565b9082015283529384019391850191613f91565b50979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561230e5761230e613ff4565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061255a604083018461335e565b7f563344757463684f72646572207769746e6573732900000000000000000000008152600060158851602061409f82848701838e01613285565b8951918501916140b481858501848e01613285565b89519201916140c881858501848d01613285565b88519201916140dc81858501848c01613285565b87519201916140f081858501848b01613285565b865192019161410481858501848a01613285565b919091019091019998505050505050505050565b6000610140614148838a51805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b60208901516040840152604089015160608401526141896080840189805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff871660c08401528560e0840152806101008401526141be818401866132a9565b90508281036101208401526125e181856132a9565b600083516141e5818460208801613285565b8351908301906141f9818360208801613285565b01949350505050565b6000602080835260c0830184518285015273ffffffffffffffffffffffffffffffffffffffff828601511660408501526040850151606085015260608501516080850152608085015160a08086015281815180845260e0870191508483019350600092505b80831015613a6a5783518252928401926001929092019190840190614267565b838152826020820152600082516142a5816040850160208701613285565b91909101604001949350505050565b600080604083850312156142c757600080fd5b505080516020909101519092909150565b8181038181111561230e5761230e613ff4565b818103600083128015838313168383128216171561430b5761430b613ff4565b5092915050565b60007f8000000000000000000000000000000000000000000000000000000000000000820361434357614343613ff4565b5060000390565b808201828112600083128015821682158216171561436a5761436a613ff4565b505092915050565b815160009082906020808601845b8381101561439c57815185529382019390820190600101614380565b50929695505050505050565b61ffff82811682821603908082111561430b5761430b613ff4565b600061ffff8083168181036143da576143da613ff4565b600101939250505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f28616464726573732072656163746f722c6164647265737320737761707065722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c61646472657373206164646974696f6e616c56616c69646174696f6e436f6e74726163742c6279746573206164646974696f6e616c56616c69646174696f6e4461746129a2646970667358221220a83088cf8ce7734a1a4fd473e15da5dd40de922f9f237cdcd5a3258bdb21af8564736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0F\xC48\x03\x80b\0F\xC4\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\x01jV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x82U`@Q\x84\x92\x84\x92\x83\x92\x83\x92\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x82\x90\xA3PP`\x01`\x02UP`\x01`\x01`\xA0\x1B\x03\x16`\x80Ra\xA4\xB0\x19F\x01b\0\0\xBFW`\x01`\x01`@\x1B\x03b\0\t\x85b\0\0\xE0` \x1B\x17\x16`\xA0Rb\0\0\xD8V[`\x01`\x01`@\x1B\x03b\0\t\xFCb\0\x01M` \x1B\x17\x16`\xA0R[PPb\0\x01\xC3V[`\0`d`\x01`\x01`\xA0\x1B\x03\x16c\xA3\xB1\xB3\x1D`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x01\"W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x01H\x91\x90b\0\x01\xA9V[\x90P\x90V[C\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x01gW`\0\x80\xFD[PV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x01~W`\0\x80\xFD[\x82Qb\0\x01\x8B\x81b\0\x01QV[` \x84\x01Q\x90\x92Pb\0\x01\x9E\x81b\0\x01QV[\x80\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15b\0\x01\xBCW`\0\x80\xFD[PQ\x91\x90PV[`\x80Q`\xA0QaD\xD5b\0\x01\xEF`\09`\0a\x0B)\x01R`\0\x81\x81`\xE0\x01Ra\x1B2\x01RaD\xD5`\0\xF3\xFE`\x80`@R`\x046\x10a\0\x9AW`\x005`\xE0\x1C\x80c-w\x13\x89\x11a\0iW\x80ci\x99\xB3w\x11a\0NW\x80ci\x99\xB3w\x14a\x01qW\x80c\x8D\xA5\xCB[\x14a\x01\x9EW\x80c\xF2\xFD\xE3\x8B\x14a\x01\xCBW`\0\x80\xFD[\x80c-w\x13\x89\x14a\x01>W\x80c?b\x19.\x14a\x01^W`\0\x80\xFD[\x80c\r3X\x84\x14a\0\xA6W\x80c\rz\x16\xC3\x14a\0\xBBW\x80c\x12&\x1E\xE7\x14a\0\xCEW\x80c\x13\xFBr\xC7\x14a\x01+W`\0\x80\xFD[6a\0\xA1W\0[`\0\x80\xFD[a\0\xB9a\0\xB46`\x04a0GV[a\x01\xEBV[\0[a\0\xB9a\0\xC96`\x04a0\xF5V[a\x03dV[4\x80\x15a\0\xDAW`\0\x80\xFD[Pa\x01\x02\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0\xB9a\x0196`\x04a17V[a\x04\xC5V[4\x80\x15a\x01JW`\0\x80\xFD[Pa\0\xB9a\x01Y6`\x04a1\xD5V[a\x06\x83V[a\0\xB9a\x01l6`\x04a1\xF2V[a\x07\x8FV[4\x80\x15a\x01}W`\0\x80\xFD[P`\x01Ta\x01\x02\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xAAW`\0\x80\xFD[P`\0Ta\x01\x02\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xD7W`\0\x80\xFD[Pa\0\xB9a\x01\xE66`\x04a1\xD5V[a\x08\x94V[a\x01\xF3a\n\0V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R`\0\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x02\nW\x90PP\x90Pa\x02\xB2\x84a\nqV[\x81`\0\x81Q\x81\x10a\x02\xC5Wa\x02\xC5a2VV[` \x02` \x01\x01\x81\x90RPa\x02\xD9\x81a\x0C\"V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x03\x19\x90\x84\x90\x87\x90\x87\x90`\x04\x01a4YV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x033W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x03GW=`\0\x80>=`\0\xFD[PPPPa\x03T\x81a\x0CsV[Pa\x03_`\x01`\x02UV[PPPV[a\x03la\n\0V[\x80`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\x88Wa\x03\x88a2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04CW\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x03\xA6W\x90P[P\x90P`\0[\x82\x81\x10\x15a\x04\xA2Wa\x04}\x85\x85\x83\x81\x81\x10a\x04fWa\x04fa2VV[\x90P` \x02\x81\x01\x90a\x04x\x91\x90a5\x1FV[a\nqV[\x82\x82\x81Q\x81\x10a\x04\x8FWa\x04\x8Fa2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x04IV[Pa\x04\xAC\x81a\x0C\"V[a\x04\xB5\x81a\x0CsV[PPa\x04\xC1`\x01`\x02UV[PPV[a\x04\xCDa\n\0V[\x82`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xE9Wa\x04\xE9a2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\xA4W\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x05\x07W\x90P[P\x90P`\0[\x82\x81\x10\x15a\x05\xECWa\x05\xC7\x87\x87\x83\x81\x81\x10a\x04fWa\x04fa2VV[\x82\x82\x81Q\x81\x10a\x05\xD9Wa\x05\xD9a2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x05\xAAV[Pa\x05\xF6\x81a\x0C\"V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x066\x90\x84\x90\x88\x90\x88\x90`\x04\x01a4YV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06PW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06dW=`\0\x80>=`\0\xFD[PPPPa\x06q\x81a\x0CsV[PPa\x06}`\x01`\x02UV[PPPPV[`\0Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x07\tW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@\x80Q\x91\x90\x92\x16\x80\x82R` \x82\x01\x93\x90\x93R\x7F\xB9\x04\xAE\x95)\xE3s\xE4\x8B\xC8-\xF42l\xCE\xAF\x1BLG+\xAB\xF3\x7F[}\xECF\xFE\xCCkS\xE0\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[a\x07\x97a\n\0V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R`\0\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x07\xAEW\x90PP\x90Pa\x08V\x82a\nqV[\x81`\0\x81Q\x81\x10a\x08iWa\x08ia2VV[` \x02` \x01\x01\x81\x90RPa\x08}\x81a\x0C\"V[a\x08\x86\x81a\x0CsV[Pa\x08\x91`\x01`\x02UV[PV[`\0Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\t\x15W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\0V[`\0\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[`\0`ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA3\xB1\xB3\x1D`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xD3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xF7\x91\x90a5]V[\x90P\x90V[C\x90V[`\x02\x80T\x03a\nkW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FReentrancyGuard: reentrant call\0`D\x82\x01R`d\x01a\x07\0V[`\x02\x80UV[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x84\x01R\x92\x82\x01\x83\x90R\x82\x82\x01\x92\x90\x92R`\x80\x81\x01\x82\x90R\x90a\n\xEA\x83\x80a5vV[\x81\x01\x90a\n\xF7\x91\x90a;DV[\x90P`\0a\x0B\x04\x82a\r\xC6V[\x90Pa\x0B\x10\x81\x83a\x10\xACV[a\x0B\x19\x82a\x11\x08V[a\x0B\"\x82a\x12lV[`\0a\x0BP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x16V[\x90P`@Q\x80`\xA0\x01`@R\x80\x84`\0\x01Q\x81R` \x01a\x0B\x88\x85`\xA0\x01Q`\0\x01Q\x84\x87``\x01Qa\x13y\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x81R`\xA0\x85\x01QQ`\x80\x86\x01Q` \x90\x92\x01\x91a\x0B\xA5\x91\x85a\x14DV[\x81R` \x01\x86\x80` \x01\x90a\x0B\xBA\x91\x90a5vV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RPPP\x90\x82RP` \x90\x81\x01\x84\x90R`\xA0\x85\x01Q\x90\x81\x01Q\x81Q`@\x90\x92\x01Q\x92\x96Pa\x0C\x1A\x92\x87\x92\x90\x85a\x15+V[PPP\x91\x90PV[\x80Q`\0[\x81\x81\x10\x15a\x03_W`\0\x83\x82\x81Q\x81\x10a\x0CCWa\x0CCa2VV[` \x02` \x01\x01Q\x90Pa\x0CV\x81a\x15?V[a\x0C`\x813a\x1A/V[a\x0Cj\x813a\x1B0V[P`\x01\x01a\x0C'V[\x80Q`\0[\x81\x81\x10\x15a\r\xB5W`\0\x83\x82\x81Q\x81\x10a\x0C\x94Wa\x0C\x94a2VV[` \x02` \x01\x01Q\x90P`\0\x81`@\x01QQ\x90P`\0[\x81\x81\x10\x15a\r\x15W`\0\x83`@\x01Q\x82\x81Q\x81\x10a\x0C\xCBWa\x0C\xCBa2VV[` \x02` \x01\x01Q\x90Pa\r\x0C\x81`@\x01Q\x82` \x01Q\x83`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1F2\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[P`\x01\x01a\x0C\xABV[P\x81`\0\x01Q` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x85\x81Q\x81\x10a\r^Wa\r^a2VV[` \x02` \x01\x01Q`\x80\x01Q\x7Fx\xAD~\xC0\xE9\xF8\x9Et\x01*\xFAXs\x8Bkf\x1C\x02L\xB0\xFD\x18^\xE2\xF6\x16\xC0\xA2\x89$\xBDf\x85`\0\x01Q`@\x01Q`@Qa\r\xA3\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4PP`\x01\x01a\x0CxV[PG\x15a\x04\xC1Wa\x04\xC13Ga\x1FyV[`@Q\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x82\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x82\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x82\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x82\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x82\x01R`\0\x90`\x98\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x83\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x83\x01R\x90`d\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aD\x13` \x83\x019`@Q` \x01a\x0F\xA9\x90a<\\V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q` \x01a\x0F\xC7\x90a=nV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x10\x06\x95\x94\x93\x92\x91` \x01a>\xA6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\x10)\x83`\0\x01Qa \x13V[\x83` \x01Q\x84`@\x01Qa\x10@\x86``\x01Qa \xADV[a\x10M\x87`\x80\x01Qa!\xFEV[`@\x80Q` \x81\x01\x97\x90\x97R\x86\x01\x94\x90\x94Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16``\x85\x01R`\x80\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x80Q``\x01QB\x11\x15a\x10\xEBW`@Q\x7F\xB0\x8C\xE5\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x04\xC1\x90a\x10\xFE\x83\x85a\"\x9FV[\x83`\xC0\x01Qa#\x14V[`\xA0\x81\x01Q``\x01Q\x15a\x11tW\x80``\x01Q` \x01Q\x81`\xA0\x01Q``\x01Q\x11\x15a\x11`W`@Q\x7F\xAC\x91C\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\xA0\x81\x01Q``\x90\x81\x01Q\x90\x82\x01Q` \x01R[\x80`\x80\x01QQ\x81`\xA0\x01Q`\x80\x01QQ\x14a\x11\xBBW`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x80\x81\x01QQ`\0[\x81\x81\x10\x15a\x03_W`\0\x83`\x80\x01Q\x82\x81Q\x81\x10a\x11\xE4Wa\x11\xE4a2VV[` \x02` \x01\x01Q\x90P`\0\x84`\xA0\x01Q`\x80\x01Q\x83\x81Q\x81\x10a\x12\nWa\x12\na2VV[` \x02` \x01\x01Q\x90P\x80`\0\x14a\x12bW\x81` \x01Q\x81\x10\x15a\x12ZW`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x82\x01\x81\x90R[PP`\x01\x01a\x11\xC4V[`\0a\x12\x85\x82`@\x01QHa$<\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x81``\x01Q`\x80\x01Q`\0\x14a\x12\xE0W`\0a\x12\xAB\x83``\x01Q`\x80\x01Q\x83a$wV[\x90Pa\x12\xD5\x81`\0\x85``\x01Q``\x01Q\x86``\x01Q` \x01Qa$\xB0\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[``\x84\x01Q` \x01RP[`\x80\x82\x01QQ`\0[\x81\x81\x10\x15a\x06}W`\0\x84`\x80\x01Q\x82\x81Q\x81\x10a\x13\tWa\x13\ta2VV[` \x02` \x01\x01Q\x90P\x80`\xA0\x01Q`\0\x14a\x13pW`\0a\x13/\x82`\xA0\x01Q\x86a$wV[`\x80\x83\x01Q` \x84\x01Q\x91\x92Pa\x13i\x91\x90\x83\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa$\xD0V[` \x83\x01RP[P`\x01\x01a\x12\xE9V[a\x13\xB3`@Q\x80``\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[`\0`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01`\0\x81R` \x01\x86``\x01Q\x81R` \x01a%b\x81RP\x90P`\0a\x14\x04\x82a%\xEEV[`@\x80Q``\x80\x82\x01\x83R\x89Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x82\x01\x93\x90\x93R\x97\x90\x91\x01Q\x90\x87\x01RP\x93\x94\x93PPPPV[\x82Q``\x90\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14bWa\x14ba2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x14\xCBW\x81` \x01[`@\x80Q``\x81\x01\x82R`\0\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x14\x80W\x90P[P\x91P`\0[\x81\x81\x10\x15a\x15\"Wa\x14\xFD\x86\x82\x81Q\x81\x10a\x14\xEEWa\x14\xEEa2VV[` \x02` \x01\x01Q\x86\x86a&\xFAV[\x83\x82\x81Q\x81\x10a\x15\x0FWa\x15\x0Fa2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x14\xD1V[PP\x93\x92PPPV[a\x158\x85\x85\x85\x85\x85a'\xE3V[PPPPPV[`\x01Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15_WPV[`\x01T`@Q\x7F\x8A\xA6\xCF\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\0\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90c\x8A\xA6\xCF\x03\x90a\x15\xB6\x90\x85\x90`\x04\x01a?\x11V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x15\xD3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x82\x01`@Ra\x16\x19\x91\x90\x81\x01\x90a?$V[`@\x83\x01QQ\x81Q\x91\x92P\x90`\0a\x161\x82\x84a@#V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16IWa\x16Ia2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16\xB2W\x81` \x01[`@\x80Q``\x81\x01\x82R`\0\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x16gW\x90P[P\x90P`\0[\x83\x81\x10\x15a\x17\x03W\x85`@\x01Q\x81\x81Q\x81\x10a\x16\xD6Wa\x16\xD6a2VV[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x16\xF0Wa\x16\xF0a2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x16\xB8V[P`\0\x80`\0[\x84\x81\x10\x15a\x1A\x1EW`\0\x87\x82\x81Q\x81\x10a\x17&Wa\x17&a2VV[` \x02` \x01\x01Q\x90P`\0[\x82\x81\x10\x15a\x17\xE4W\x88\x81\x81Q\x81\x10a\x17MWa\x17Ma2VV[` \x02` \x01\x01Q`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x17\xDCW\x81Q`@Q\x7F\xFF\xF0\x83\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x07\0V[`\x01\x01a\x173V[P`\0\x80[\x88\x81\x10\x15a\x18\xA5W`\0\x8B`@\x01Q\x82\x81Q\x81\x10a\x18\tWa\x18\ta2VV[` \x02` \x01\x01Q\x90P\x83`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18\x9CW\x85\x15a\x18\x86W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x18\x95\x90\x84a@#V[\x92P`\x01\x96P[P`\x01\x01a\x17\xE9V[P\x81Q` \x8B\x01QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16\x03a\x19\x1EW\x84\x15a\x19\x05W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x80\x8B\x01Q\x01Qa\x19\x17\x90\x82a@#V[\x90P`\x01\x93P[\x80`\0\x03a\x19sW\x81Q`@Q\x7F\xED\xDF\x07\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x07\0V[a\x19\x81\x81`\x05a'\x10a(\x85V[\x82` \x01Q\x11\x15a\x19\xF4W\x81Q` \x83\x01Q`@\x80\x85\x01Q\x90Q\x7F\x82\xE7VV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16`\x04\x82\x01R`$\x81\x01\x92\x90\x92R\x91\x90\x91\x16`D\x82\x01R`d\x01a\x07\0V[\x81\x86\x84\x8A\x01\x81Q\x81\x10a\x1A\tWa\x1A\ta2VV[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x17\nV[PPP`@\x90\x94\x01\x93\x90\x93RPPPV[\x81QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160\x14a\x1A\x80W`@Q\x7FM\xDFJd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81Q`\x80\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x04\xC1W\x81Q`\x80\x01Q`@Q\x7Fn\x84\xBA+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90cn\x84\xBA+\x90a\x1A\xFC\x90\x84\x90\x86\x90`\x04\x01a@6V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1B\x14W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x1B(W=`\0\x80>=`\0\xFD[PPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x13|)\xFEa\x1B\xF0\x84`@\x80Q`\xA0\x81\x01\x82R`\0``\x82\x01\x81\x81R`\x80\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91RP`@\x80Q`\xA0\x81\x01\x82R` \x80\x84\x01\x80QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16``\x80\x85\x01\x91\x82R\x91Q\x85\x01Q`\x80\x85\x01R\x83R\x84Q\x84\x01Q\x91\x83\x01\x91\x90\x91R\x92Q\x90\x92\x01Q\x90\x82\x01R\x90V[`@\x80Q\x80\x82\x01\x82R`\0\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x82R\x80\x87\x01Q\x81\x01Q\x90\x82\x01R\x85`\0\x01Q` \x01Q\x86`\x80\x01Q`@Q` \x01a\x1C\xBD\x90\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`\x14\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`+\x82\x01R`D\x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aD\x13` \x83\x019`@Q\x80``\x01`@R\x80`.\x81R` \x01aC\xE5`.\x919`@Q` \x01a\x1D'\x90a<\\V[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x84\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x84\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x84\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x84\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x84\x01R\x81Q`x\x81\x85\x03\x01\x81R`\x98\x84\x01\x90\x92R\x91a\x1EW\x90`\xB8\x01a=nV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x1E\x97\x96\x95\x94\x93\x92\x91` \x01a@eV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R``\x8A\x01Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x89\x90\x1B\x16\x83Ra\x1F\x04\x96\x95\x94\x93\x92`\x04\x01aA\x18V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x1F\x1EW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x1B(W=`\0\x80>=`\0\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16a\x1FWWa\x03_\x82\x82a\x1FyV[a\x03_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x84\x84a(\xC1V[`\0\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x1F\xD3W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x1F\xD8V[``\x91P[PP\x90P\x80a\x03_W`@Q\x7F\xF4\xB3\xB1\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0`@Q\x80`\xC0\x01`@R\x80`\x8D\x81R` \x01aD\x13`\x8D\x919\x80Q` \x91\x82\x01 \x83Q\x84\x83\x01Q`@\x80\x87\x01Q``\x88\x01Q`\x80\x89\x01Q`\xA0\x8A\x01Q\x80Q\x90\x89\x01 \x93Qa\x10\x8F\x98\x93\x94\x92\x93\x91\x92\x91\x01\x96\x87Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x86\x16` \x88\x01R\x93\x85\x16`@\x87\x01R``\x86\x01\x92\x90\x92R`\x80\x85\x01R\x90\x91\x16`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01\x90V[`\0`@Q` \x01a \xBE\x90a<\\V[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra!~\x92\x90\x91\x90`\x84\x01aA\xD3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82`\0\x01Q\x83` \x01Qa!\xAB\x85`@\x01Qa)\xACV[``\x80\x87\x01Q`\x80\x80\x89\x01Q`@\x80Q` \x81\x01\x99\x90\x99Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x97\x16\x96\x88\x01\x96\x90\x96R\x91\x86\x01\x93\x90\x93R\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01a\x10\x8FV[`\0\x80\x82Q` \x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\x1EWa\"\x1Ea2'V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\"HW` \x82\x01\x81\x806\x837\x01\x90P[P\x83Q\x90\x91P`\0[\x81\x81\x10\x15a\"\x8FW`\0a\"}\x86\x83\x81Q\x81\x10a\"pWa\"pa2VV[` \x02` \x01\x01Qa*\xAAV[` \x83\x81\x02\x86\x01\x01RP`\x01\x01a\"QV[PP\x80Q` \x90\x91\x01 \x92\x91PPV[`\0\x81F\x84`\xA0\x01Q`@Q` \x01a\"\xB8\x91\x90aB\x02V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\"\xF5\x93\x92\x91` \x01aB\x87V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P[\x92\x91PPV[`\0\x80\x82\x80` \x01\x90Q\x81\x01\x90a#+\x91\x90aB\xB4V[\x91P\x91P`\0\x83`@\x81Q\x81\x10a#DWa#Da2VV[\x01` \x90\x81\x01Q`@\x80Q`\0\x80\x82R\x93\x81\x01\x80\x83R\x89\x90R`\xF8\x92\x90\x92\x1C\x90\x82\x01\x81\x90R``\x82\x01\x86\x90R`\x80\x82\x01\x85\x90R\x92P`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a#\xA1W=`\0\x80>=`\0\xFD[PPP` `@Q\x03Q\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x80a#\xFCWPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15[\x15a$3W`@Q\x7F\xD7\x81[\xE1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPV[`\0\x81\x83\x10\x15a$jWa$Xa$S\x84\x84aB\xD8V[a,\x0EV[a$c\x90`\0aB\xEBV[\x90Pa#\x0EV[a$ca$S\x83\x85aB\xD8V[`\0\x80\x82\x12a$\x8FWa$c\x83\x83c;\x9A\xCA\0a(\x85V[a$\xA7a$\x9B\x83aC\x12V[\x84\x90c;\x9A\xCA\0a,\xC4V[a$c\x90aC\x12V[`\0a$\xC7\x85a$\xC0\x86\x84aB\xEBV[\x85\x85a$\xD0V[\x95\x94PPPPPV[`\0\x80\x84\x12\x15a%3W`\0a$\xE5\x85aC\x12V[\x90P\x85a%\x12\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaB\xD8V[\x10\x15a%!W\x82\x91PPa%ZV[a%+\x81\x87a@#V[\x91PPa%OV[\x83\x85\x10\x15a%BWP\x81a%ZV[a%L\x84\x86aB\xD8V[\x90P[a$\xC7\x81\x84\x84a-\x08V[\x94\x93PPPPV[`\0\x84\x84\x10a%rWP\x80a$\xC7V[`\0a%~\x87\x86aB\xD8V[\x90P`\0a%\x8C\x88\x88aB\xD8V[\x90P`\0\x85\x85\x12\x15a%\xBEWa%\xAE\x83\x83a%\xA7\x88\x8AaB\xEBV[\x91\x90a(\x85V[a%\xB7\x90aC\x12V[\x90Pa%\xD7V[a%\xD4\x83\x83a%\xCD\x89\x89aB\xEBV[\x91\x90a,\xC4V[\x90P[a%\xE1\x81\x87aCJV[\x99\x98PPPPPPPPPV[`\0`\x10\x82`\0\x01Q` \x01QQ\x11\x15a&4W`@Q\x7F\x0E\x99gf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81``\x01Q\x82`@\x01Q\x10\x15\x80a&OWP\x81Q` \x01QQ\x15[\x15a&nW`\x80\x82\x01Q`\xA0\x83\x01Q` \x84\x01Qa#\x0E\x92\x90\x91a-\x08V[`\0a&\x8F\x83`@\x01Q\x84``\x01Qa&\x87\x91\x90aB\xD8V[a\xFF\xFFa-\x19V[\x90P`\0\x80`\0\x80a&\xA5\x87`\0\x01Q\x86a-1V[\x93P\x93P\x93P\x93P`\0a&\xD0\x85a\xFF\xFF\x16\x85a\xFF\xFF\x16\x88a\xFF\xFF\x16\x86\x86\x8D`\xC0\x01Qc\xFF\xFF\xFF\xFF\x16V[`\x80\x89\x01Q`\xA0\x8A\x01Q` \x8B\x01Q\x92\x93Pa&\xEE\x92\x91\x84\x91a$\xD0V[\x98\x97PPPPPPPPV[`@\x80Q``\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R`\0`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01\x86`\x80\x01Q\x81R` \x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81R` \x01a.\xF3\x81RP\x90P`\0a'\x87\x82a%\xEEV[\x90P`@Q\x80``\x01`@R\x80\x87`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x82\x81R` \x01\x87``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x92PPP\x93\x92PPPV[a'\xEE\x84\x84\x83a/GV[a\x158W\x81a()W`@Q\x7F\xB9\xEC\x1E\x96\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x85\x01Q`\0[\x81Q\x81\x10\x15a$3W`\0\x82\x82\x81Q\x81\x10a(NWa(Na2VV[` \x02` \x01\x01Q\x90Pa(w\x85a'\x10a(i\x91\x90a@#V[` \x83\x01Q\x90a'\x10a,\xC4V[` \x90\x91\x01R`\x01\x01a(1V[`\0\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a(\xBAW`\0\x80\xFD[P\x91\x02\x04\x90V[`\0`@Q\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`$\x82\x01R\x82`D\x82\x01R` `\0`d\x83`\0\x8AZ\xF1=\x15`\x1F=\x11`\x01`\0Q\x14\x16\x17\x16\x91PP\x80a\x158W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FTRANSFER_FROM_FAILED\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\0V[`@Q\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x82\x01R`\0\x90`d\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82`\0\x01Q\x83` \x01Q`@Q` \x01a*W\x91\x90aCrV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x90\x83\x01\x94\x90\x94R\x81\x01\x91\x90\x91R``\x81\x01\x91\x90\x91R`\x80\x01a\x10\x8FV[`\0`@Q` \x01a*\xBB\x90a=nV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra+{\x92\x90\x91\x90`\x84\x01aA\xD3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82`\0\x01Q\x83` \x01Qa+\xA8\x85`@\x01Qa)\xACV[``\x80\x87\x01Q`\x80\x80\x89\x01Q`\xA0\x80\x8B\x01Q`@\x80Q` \x81\x01\x9B\x90\x9BRs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x99\x8A\x16\x90\x8B\x01R\x94\x89\x01\x96\x90\x96R\x90\x87\x01\x93\x90\x93R\x93\x90\x93\x16\x91\x84\x01\x91\x90\x91R`\xC0\x83\x01R`\xE0\x82\x01Ra\x01\0\x01a\x10\x8FV[`\0\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a,\xC0W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FSafeCast: value doesn't fit in a`D\x82\x01R\x7Fn int256\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x07\0V[P\x90V[`\0\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a,\xF9W`\0\x80\xFD[P\x91\x02\x81\x81\x06\x15\x15\x91\x90\x04\x01\x90V[`\0a%Za-\x17\x85\x85a/\x93V[\x83[`\0\x81\x83\x10a-(W\x81a-*V[\x82[\x93\x92PPPV[`\0\x80`\0\x80`\0a-D\x87`\0\x01Q\x90V[\x90Pa\xFF\xFF\x86\x16a-V\x82`\0a/\xA2V[a\xFF\xFF\x16\x10a-\x9AW`\0a-k\x82\x82a/\xA2V[`\0\x89` \x01Q`\0\x81Q\x81\x10a-\x84Wa-\x84a2VV[` \x02` \x01\x01Q\x94P\x94P\x94P\x94PPa.\xEAV[`\0`\x01\x88` \x01QQa-\xAE\x91\x90aC\xA8V[\x90P`\x01[\x81a\xFF\xFF\x16\x81a\xFF\xFF\x16\x11a.~W\x87a\xFF\xFF\x16a-\xDE\x82a\xFF\xFF\x16\x85a/\xA2\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\xFF\xFF\x16\x10a.lWa.\0a-\xF5`\x01\x83aC\xA8V[\x84\x90a\xFF\xFF\x16a/\xA2V[a.\x0E\x84a\xFF\xFF\x84\x16a/\xA2V[` \x8B\x01Qa.\x1E`\x01\x85aC\xA8V[a\xFF\xFF\x16\x81Q\x81\x10a.2Wa.2a2VV[` \x02` \x01\x01Q\x8B` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a.TWa.Ta2VV[` \x02` \x01\x01Q\x96P\x96P\x96P\x96PPPPa.\xEAV[\x80a.v\x81aC\xC3V[\x91PPa-\xB3V[Pa.\x8D\x82a\xFF\xFF\x83\x16a/\xA2V[a.\x9B\x83a\xFF\xFF\x84\x16a/\xA2V[\x89` \x01Q\x83a\xFF\xFF\x16\x81Q\x81\x10a.\xB5Wa.\xB5a2VV[` \x02` \x01\x01Q\x8A` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a.\xD7Wa.\xD7a2VV[` \x02` \x01\x01Q\x95P\x95P\x95P\x95PPP[\x92\x95\x91\x94P\x92PV[`\0\x84\x84\x10a/\x03WP\x80a$\xC7V[`\0a/\x0F\x87\x86aB\xD8V[\x90P`\0a/\x1D\x88\x88aB\xD8V[\x90P`\0\x85\x85\x12\x15a/8Wa%\xAE\x83\x83a%\xCD\x88\x8AaB\xEBV[a%\xD4\x83\x83a%\xA7\x89\x89aB\xEBV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a/kWP\x82\x82\x11[\x80a%ZWPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x14\x90P\x93\x92PPPV[`\0\x81\x83\x11a-(W\x81a-*V[`\0`\x10\x82\x10a/\xDEW`@Q\x7FN#\xD05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P`\x10\x02\x1C\x90V[`\0`@\x82\x84\x03\x12\x15a/\xF8W`\0\x80\xFD[P\x91\x90PV[`\0\x80\x83`\x1F\x84\x01\x12a0\x10W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0(W`\0\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a0@W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80`\0`@\x84\x86\x03\x12\x15a0\\W`\0\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a0tW`\0\x80\xFD[a0\x80\x87\x83\x88\x01a/\xE6V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a0\x96W`\0\x80\xFD[Pa0\xA3\x86\x82\x87\x01a/\xFEV[\x94\x97\x90\x96P\x93\x94PPPPV[`\0\x80\x83`\x1F\x84\x01\x12a0\xC2W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0\xDAW`\0\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a0@W`\0\x80\xFD[`\0\x80` \x83\x85\x03\x12\x15a1\x08W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a1\x1FW`\0\x80\xFD[a1+\x85\x82\x86\x01a0\xB0V[\x90\x96\x90\x95P\x93PPPPV[`\0\x80`\0\x80`@\x85\x87\x03\x12\x15a1MW`\0\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a1eW`\0\x80\xFD[a1q\x88\x83\x89\x01a0\xB0V[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a1\x8AW`\0\x80\xFD[Pa1\x97\x87\x82\x88\x01a/\xFEV[\x95\x98\x94\x97P\x95PPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08\x91W`\0\x80\xFD[\x805a1\xD0\x81a1\xA3V[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a1\xE7W`\0\x80\xFD[\x815a-*\x81a1\xA3V[`\0` \x82\x84\x03\x12\x15a2\x04W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a2\x1BW`\0\x80\xFD[a%Z\x84\x82\x85\x01a/\xE6V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15a2\xA0W\x81\x81\x01Q\x83\x82\x01R` \x01a2\x88V[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra2\xC1\x81` \x86\x01` \x86\x01a2\x85V[`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P` \x84\x01`\0[\x83\x81\x10\x15a3SW\x81Q\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x89R\x84\x82\x01Q\x85\x8A\x01R`@\x91\x82\x01Q\x16\x90\x88\x01R``\x90\x96\x01\x95\x90\x82\x01\x90`\x01\x01a3\x08V[P\x94\x95\x94PPPPPV[`\0\x81Q`\xE0\x84Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16`\xE0\x86\x01R\x80` \x83\x01Q\x16a\x01\0\x86\x01R`@\x82\x01Qa\x01 \x86\x01R``\x82\x01Qa\x01@\x86\x01R\x80`\x80\x83\x01Q\x16a\x01`\x86\x01RP`\xA0\x81\x01Q\x90P`\xC0a\x01\x80\x85\x01Ra3\xD2a\x01\xA0\x85\x01\x82a2\xA9V[\x90P` \x83\x01Qa4\x10` \x86\x01\x82\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x80\x82\x01Q\x90\x83\x01R`@\x90\x81\x01Q\x91\x01RV[P`@\x83\x01Q\x84\x82\x03`\x80\x86\x01Ra4(\x82\x82a2\xF3V[\x91PP``\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra4B\x82\x82a2\xA9V[\x91PP`\x80\x83\x01Q`\xC0\x85\x01R\x80\x91PP\x92\x91PPV[`\0`@\x82\x01`@\x83R\x80\x86Q\x80\x83R``\x85\x01\x91P``\x81`\x05\x1B\x86\x01\x01\x92P` \x80\x89\x01`\0[\x83\x81\x10\x15a4\xCEW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x88\x87\x03\x01\x85Ra4\xBC\x86\x83Qa3^V[\x95P\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01a4\x82V[PP\x85\x84\x03\x81\x87\x01R\x86\x84R\x86\x88\x82\x86\x017`\0\x84\x88\x01\x82\x01R`\x1F\x90\x96\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x90\x92\x01\x90\x94\x01\x96\x95PPPPPPV[`\0\x825\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1\x836\x03\x01\x81\x12a5SW`\0\x80\xFD[\x91\x90\x91\x01\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a5oW`\0\x80\xFD[PQ\x91\x90PV[`\0\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a5\xABW`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a5\xC6W`\0\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a0@W`\0\x80\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@R\x90V[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q`\xE0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xD7Wa6\xD7a2'V[`@R\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a6\xF0W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7\nWa7\na2'V[a7;` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x84\x01\x16\x01a6\x90V[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a7PW`\0\x80\xFD[\x81` \x85\x01` \x83\x017`\0\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[`\0`\xC0\x82\x84\x03\x12\x15a7\x7FW`\0\x80\xFD[a7\x87a5\xDBV[\x90P\x815a7\x94\x81a1\xA3V[\x81R` \x82\x015a7\xA4\x81a1\xA3V[\x80` \x83\x01RP`@\x82\x015`@\x82\x01R``\x82\x015``\x82\x01R`\x80\x82\x015a7\xCD\x81a1\xA3V[`\x80\x82\x01R`\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7\xECW`\0\x80\xFD[a7\xF8\x84\x82\x85\x01a6\xDFV[`\xA0\x83\x01RP\x92\x91PPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a8\x1EWa8\x1Ea2'V[P`\x05\x1B` \x01\x90V[`\0`@\x82\x84\x03\x12\x15a8:W`\0\x80\xFD[a8Ba6\x04V[\x90P\x815\x81R` \x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8cW`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a8tW`\0\x80\xFD[\x805a8\x87a8\x82\x82a8\x04V[a6\x90V[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a8\xA6W`\0\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a8\xC4W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a8\xABV[\x80\x85\x87\x01RPPPPP\x92\x91PPV[`\0`\xA0\x82\x84\x03\x12\x15a8\xE6W`\0\x80\xFD[a8\xEEa6'V[\x90P\x815a8\xFB\x81a1\xA3V[\x81R` \x82\x81\x015\x90\x82\x01R`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9!W`\0\x80\xFD[a9-\x84\x82\x85\x01a8(V[`@\x83\x01RP``\x82\x015``\x82\x01R`\x80\x82\x015`\x80\x82\x01R\x92\x91PPV[`\0\x82`\x1F\x83\x01\x12a9^W`\0\x80\xFD[\x815` a9na8\x82\x83a8\x04V[\x82\x81R`\x05\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x86\x84\x11\x15a9\x8DW`\0\x80\xFD[\x82\x86\x01[\x84\x81\x10\x15a:jW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a9\xB2W`\0\x80\x81\xFD[\x81\x89\x01\x91P`\xC0\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x8D\x03\x01\x12\x15a9\xEBW`\0\x80\x81\xFD[a9\xF3a5\xDBV[\x87\x84\x015a:\0\x81a1\xA3V[\x81R`@\x84\x81\x015\x89\x83\x01R``\x80\x86\x015\x85\x81\x11\x15a: W`\0\x80\x81\xFD[a:.\x8F\x8C\x83\x8A\x01\x01a8(V[\x83\x85\x01RP`\x80\x94P\x84\x86\x015\x91Pa:F\x82a1\xA3V[\x82\x01R`\xA0\x84\x81\x015\x93\x82\x01\x93\x90\x93R\x92\x015\x90\x82\x01R\x83R\x91\x83\x01\x91\x83\x01a9\x91V[P\x96\x95PPPPPPV[`\0`\xA0\x82\x84\x03\x12\x15a:\x87W`\0\x80\xFD[a:\x8Fa6'V[\x90P\x815\x81R` \x80\x83\x015a:\xA4\x81a1\xA3V[\x80\x82\x84\x01RP`@\x83\x015`@\x83\x01R``\x83\x015``\x83\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\xD8W`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a:\xE9W`\0\x80\xFD[\x805a:\xF7a8\x82\x82a8\x04V[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a;\x16W`\0\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a;4W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a;\x1BV[`\x80\x86\x01RP\x92\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15a;VW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a;nW`\0\x80\xFD[\x90\x83\x01\x90`\xE0\x82\x86\x03\x12\x15a;\x82W`\0\x80\xFD[a;\x8Aa6JV[\x825\x82\x81\x11\x15a;\x99W`\0\x80\xFD[a;\xA5\x87\x82\x86\x01a7mV[\x82RPa;\xB4` \x84\x01a1\xC5V[` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015\x82\x81\x11\x15a;\xD5W`\0\x80\xFD[a;\xE1\x87\x82\x86\x01a8\xD4V[``\x83\x01RP`\x80\x83\x015\x82\x81\x11\x15a;\xF9W`\0\x80\xFD[a<\x05\x87\x82\x86\x01a9MV[`\x80\x83\x01RP`\xA0\x83\x015\x82\x81\x11\x15a<\x1DW`\0\x80\xFD[a<)\x87\x82\x86\x01a:uV[`\xA0\x83\x01RP`\xC0\x83\x015\x82\x81\x11\x15a<AW`\0\x80\xFD[a<M\x87\x82\x86\x01a6\xDFV[`\xC0\x83\x01RP\x95\x94PPPPPV[\x7FV3DutchInput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\r\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1B\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`/\x82\x01R\x7Fuint256 maxAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`I\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`[\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`{\x82\x01R`\0`|\x82\x01a#\x0EV[\x7FV3DutchOutput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0E\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1C\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`0\x82\x01R\x7Faddress recipient,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`J\x82\x01R\x7Fuint256 minAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\\\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`n\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x8E\x82\x01R`\0`\x8F\x82\x01a#\x0EV[`\0\x86Qa>\xB8\x81\x84` \x8B\x01a2\x85V[\x86Q\x90\x83\x01\x90a>\xCC\x81\x83` \x8B\x01a2\x85V[\x86Q\x91\x01\x90a>\xDF\x81\x83` \x8A\x01a2\x85V[\x85Q\x91\x01\x90a>\xF2\x81\x83` \x89\x01a2\x85V[\x84Q\x91\x01\x90a?\x05\x81\x83` \x88\x01a2\x85V[\x01\x97\x96PPPPPPPV[` \x81R`\0a-*` \x83\x01\x84a3^V[`\0` \x80\x83\x85\x03\x12\x15a?7W`\0\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a?NW`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a?_W`\0\x80\xFD[\x80Qa?ma8\x82\x82a8\x04V[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a?\x8CW`\0\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a?\xE8W\x80\x85\x8A\x03\x12\x15a?\xA9W`\0\x80\x81\xFD[a?\xB1a6mV[\x85Qa?\xBC\x81a1\xA3V[\x81R\x85\x87\x01Q\x87\x82\x01R`@\x80\x87\x01Qa?\xD5\x81a1\xA3V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a?\x91V[P\x97\x96PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x80\x82\x01\x80\x82\x11\x15a#\x0EWa#\x0Ea?\xF4V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R`@` \x82\x01R`\0a%Z`@\x83\x01\x84a3^V[\x7FV3DutchOrder witness)\0\0\0\0\0\0\0\0\0\0\0\x81R`\0`\x15\x88Q` a@\x9F\x82\x84\x87\x01\x83\x8E\x01a2\x85V[\x89Q\x91\x85\x01\x91a@\xB4\x81\x85\x85\x01\x84\x8E\x01a2\x85V[\x89Q\x92\x01\x91a@\xC8\x81\x85\x85\x01\x84\x8D\x01a2\x85V[\x88Q\x92\x01\x91a@\xDC\x81\x85\x85\x01\x84\x8C\x01a2\x85V[\x87Q\x92\x01\x91a@\xF0\x81\x85\x85\x01\x84\x8B\x01a2\x85V[\x86Q\x92\x01\x91aA\x04\x81\x85\x85\x01\x84\x8A\x01a2\x85V[\x91\x90\x91\x01\x90\x91\x01\x99\x98PPPPPPPPPV[`\0a\x01@aAH\x83\x8AQ\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[` \x89\x01Q`@\x84\x01R`@\x89\x01Q``\x84\x01RaA\x89`\x80\x84\x01\x89\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`\xC0\x84\x01R\x85`\xE0\x84\x01R\x80a\x01\0\x84\x01RaA\xBE\x81\x84\x01\x86a2\xA9V[\x90P\x82\x81\x03a\x01 \x84\x01Ra%\xE1\x81\x85a2\xA9V[`\0\x83QaA\xE5\x81\x84` \x88\x01a2\x85V[\x83Q\x90\x83\x01\x90aA\xF9\x81\x83` \x88\x01a2\x85V[\x01\x94\x93PPPPV[`\0` \x80\x83R`\xC0\x83\x01\x84Q\x82\x85\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x86\x01Q\x16`@\x85\x01R`@\x85\x01Q``\x85\x01R``\x85\x01Q`\x80\x85\x01R`\x80\x85\x01Q`\xA0\x80\x86\x01R\x81\x81Q\x80\x84R`\xE0\x87\x01\x91P\x84\x83\x01\x93P`\0\x92P[\x80\x83\x10\x15a:jW\x83Q\x82R\x92\x84\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x84\x01\x90aBgV[\x83\x81R\x82` \x82\x01R`\0\x82QaB\xA5\x81`@\x85\x01` \x87\x01a2\x85V[\x91\x90\x91\x01`@\x01\x94\x93PPPPV[`\0\x80`@\x83\x85\x03\x12\x15aB\xC7W`\0\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x81\x81\x03\x81\x81\x11\x15a#\x0EWa#\x0Ea?\xF4V[\x81\x81\x03`\0\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15aC\x0BWaC\x0Ba?\xF4V[P\x92\x91PPV[`\0\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03aCCWaCCa?\xF4V[P`\0\x03\x90V[\x80\x82\x01\x82\x81\x12`\0\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15aCjWaCja?\xF4V[PP\x92\x91PPV[\x81Q`\0\x90\x82\x90` \x80\x86\x01\x84[\x83\x81\x10\x15aC\x9CW\x81Q\x85R\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01aC\x80V[P\x92\x96\x95PPPPPPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15aC\x0BWaC\x0Ba?\xF4V[`\0a\xFF\xFF\x80\x83\x16\x81\x81\x03aC\xDAWaC\xDAa?\xF4V[`\x01\x01\x93\x92PPPV\xFETokenPermissions(address token,uint256 amount)OrderInfo(address reactor,address swapper,uint256 nonce,uint256 deadline,address additionalValidationContract,bytes additionalValidationData)\xA2dipfsX\"\x12 \xA80\x88\xCF\x8C\xE7sJ\x1AO\xD4s\xE1]\xA5\xDD@\xDE\x92/\x9F#|\xDC\xD5\xA3%\x8B\xDB!\xAF\x85dsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061009a5760003560e01c80632d771389116100695780636999b3771161004e5780636999b377146101715780638da5cb5b1461019e578063f2fde38b146101cb57600080fd5b80632d7713891461013e5780633f62192e1461015e57600080fd5b80630d335884146100a65780630d7a16c3146100bb57806312261ee7146100ce57806313fb72c71461012b57600080fd5b366100a157005b600080fd5b6100b96100b4366004613047565b6101eb565b005b6100b96100c93660046130f5565b610364565b3480156100da57600080fd5b506101027f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b9610139366004613137565b6104c5565b34801561014a57600080fd5b506100b96101593660046131d5565b610683565b6100b961016c3660046131f2565b61078f565b34801561017d57600080fd5b506001546101029073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101aa57600080fd5b506000546101029073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101d757600080fd5b506100b96101e63660046131d5565b610894565b6101f3610a00565b604080516001808252818301909252600091816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161020a5790505090506102b284610a71565b816000815181106102c5576102c5613256565b60200260200101819052506102d981610c22565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061031990849087908790600401613459565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b5050505061035481610c73565b5061035f6001600255565b505050565b61036c610a00565b8060008167ffffffffffffffff81111561038857610388613227565b60405190808252806020026020018201604052801561044357816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816103a65790505b50905060005b828110156104a25761047d85858381811061046657610466613256565b9050602002810190610478919061351f565b610a71565b82828151811061048f5761048f613256565b6020908102919091010152600101610449565b506104ac81610c22565b6104b581610c73565b50506104c16001600255565b5050565b6104cd610a00565b8260008167ffffffffffffffff8111156104e9576104e9613227565b6040519080825280602002602001820160405280156105a457816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816105075790505b50905060005b828110156105ec576105c787878381811061046657610466613256565b8282815181106105d9576105d9613256565b60209081029190910101526001016105aa565b506105f681610c22565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061063690849088908890600401613459565b600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b5050505061067181610c73565b505061067d6001600255565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527fb904ae9529e373e48bc82df4326cceaf1b4c472babf37f5b7dec46fecc6b53e0910160405180910390a15050565b610797610a00565b604080516001808252818301909252600091816020015b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816107ae57905050905061085682610a71565b8160008151811061086957610869613256565b602002602001018190525061087d81610c22565b61088681610c73565b506108916001600255565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610915576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610700565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6000606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f7919061355d565b905090565b4390565b6002805403610a6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610700565b60028055565b6040805161016081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905260606101408401819052908352835180820185528281526020808201849052818601849052840152928201839052828201929092526080810182905290610aea8380613576565b810190610af79190613b44565b90506000610b0482610dc6565b9050610b1081836110ac565b610b1982611108565b610b228261126c565b6000610b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16565b90506040518060a0016040528084600001518152602001610b888560a00151600001518487606001516113799092919063ffffffff16565b815260a0850151516080860151602090920191610ba59185611444565b8152602001868060200190610bba9190613576565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810184905260a0850151908101518151604090920151929650610c1a928792908561152b565b505050919050565b805160005b8181101561035f576000838281518110610c4357610c43613256565b60200260200101519050610c568161153f565b610c608133611a2f565b610c6a8133611b30565b50600101610c27565b805160005b81811015610db5576000838281518110610c9457610c94613256565b602002602001015190506000816040015151905060005b81811015610d1557600083604001518281518110610ccb57610ccb613256565b60200260200101519050610d0c81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16611f329092919063ffffffff16565b50600101610cab565b5081600001516020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16868581518110610d5e57610d5e613256565b6020026020010151608001517f78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66856000015160400151604051610da391815260200190565b60405180910390a45050600101610c78565b5047156104c1576104c13347611f79565b6040517f563344757463684f72646572280000000000000000000000000000000000000060208201527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8201527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8201527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8201527f56334475746368496e7075742062617365496e7075742c00000000000000000060658201527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c820152600090609801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208301527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348301527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b83015290606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d8083529091906144136020830139604051602001610fa990613c5c565b604051602081830303815290604052604051602001610fc790613d6e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526110069594939291602001613ea6565b604051602081830303815290604052805190602001206110298360000151612013565b8360200151846040015161104086606001516120ad565b61104d87608001516121fe565b60408051602081019790975286019490945273ffffffffffffffffffffffffffffffffffffffff9092166060850152608084015260a083015260c082015260e0015b604051602081830303815290604052805190602001209050919050565b8051606001514211156110eb576040517fb08ce5b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516104c1906110fe838561229f565b8360c00151612314565b60a08101516060015115611174578060600151602001518160a00151606001511115611160576040517fac9143e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a081015160609081015190820151602001525b8060800151518160a001516080015151146111bb576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808101515160005b8181101561035f576000836080015182815181106111e4576111e4613256565b6020026020010151905060008460a0015160800151838151811061120a5761120a613256565b602002602001015190508060001461126257816020015181101561125a576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602082018190525b50506001016111c4565b600061128582604001514861243c90919063ffffffff16565b90508160600151608001516000146112e05760006112ab83606001516080015183612477565b90506112d58160008560600151606001518660600151602001516124b0909392919063ffffffff16565b606084015160200152505b60808201515160005b8181101561067d5760008460800151828151811061130957611309613256565b602002602001015190508060a0015160001461137057600061132f8260a0015186612477565b60808301516020840151919250611369919083907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124d0565b6020830152505b506001016112e9565b6113b36040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60006040518060e001604052808660400151815260200186602001518152602001858152602001848152602001600081526020018660600151815260200161256281525090506000611404826125ee565b6040805160608082018352895173ffffffffffffffffffffffffffffffffffffffff16825260208201939093529790910151908701525093949350505050565b82516060908067ffffffffffffffff81111561146257611462613227565b6040519080825280602002602001820160405280156114cb57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114805790505b50915060005b81811015611522576114fd8682815181106114ee576114ee613256565b602002602001015186866126fa565b83828151811061150f5761150f613256565b60209081029190910101526001016114d1565b50509392505050565b61153885858585856127e3565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1661155f5750565b6001546040517f8aa6cf0300000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff1690638aa6cf03906115b6908590600401613f11565b600060405180830381865afa1580156115d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116199190810190613f24565b60408301515181519192509060006116318284614023565b67ffffffffffffffff81111561164957611649613227565b6040519080825280602002602001820160405280156116b257816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116675790505b50905060005b8381101561170357856040015181815181106116d6576116d6613256565b60200260200101518282815181106116f0576116f0613256565b60209081029190910101526001016116b8565b5060008060005b84811015611a1e57600087828151811061172657611726613256565b6020026020010151905060005b828110156117e45788818151811061174d5761174d613256565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16036117dc5781516040517ffff0830300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610700565b600101611733565b506000805b888110156118a55760008b60400151828151811061180957611809613256565b60200260200101519050836000015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff160361189c578515611886576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516118959084614023565b9250600196505b506001016117e9565b50815160208b01515173ffffffffffffffffffffffffffffffffffffffff91821691160361191e578415611905576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808b015101516119179082614023565b9050600193505b806000036119735781516040517feddf07f500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610700565b611981816005612710612885565b826020015111156119f4578151602083015160408085015190517f82e7565600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526024810192909252919091166044820152606401610700565b8186848a0181518110611a0957611a09613256565b6020908102919091010152505060010161170a565b505050604090940193909352505050565b81515173ffffffffffffffffffffffffffffffffffffffff163014611a80576040517f4ddf4a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516080015173ffffffffffffffffffffffffffffffffffffffff16156104c1578151608001516040517f6e84ba2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636e84ba2b90611afc9084908690600401614036565b60006040518083038186803b158015611b1457600080fd5b505afa158015611b28573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663137c29fe611bf0846040805160a0810182526000606082018181526080830182905282526020820181905291810191909152506040805160a081018252602080840180515173ffffffffffffffffffffffffffffffffffffffff1660608085019182529151850151608085015283528451840151918301919091529251909201519082015290565b6040805180820182526000808252602091820152815180830190925273ffffffffffffffffffffffffffffffffffffffff8616825280870151810151908201528560000151602001518660800151604051602001611cbd907f4e6f6e6c696e656172447574636844656361792800000000000000000000000081527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060148201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000602b82015260440190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d80835290919061441360208301396040518060600160405280602e81526020016143e5602e9139604051602001611d2790613c5c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f563344757463684f72646572280000000000000000000000000000000000000060208401527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8401527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8401527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8401527f56334475746368496e7075742062617365496e7075742c00000000000000000060658401527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c840152815160788185030181526098840190925291611e579060b801613d6e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611e97969594939291602001614065565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260608a01517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b168352611f049695949392600401614118565b600060405180830381600087803b158015611f1e57600080fd5b505af1158015611b28573d6000803e3d6000fd5b73ffffffffffffffffffffffffffffffffffffffff8316611f575761035f8282611f79565b61035f73ffffffffffffffffffffffffffffffffffffffff84163384846128c1565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611fd3576040519150601f19603f3d011682016040523d82523d6000602084013e611fd8565b606091505b505090508061035f576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060c00160405280608d8152602001614413608d913980516020918201208351848301516040808701516060880151608089015160a08a0151805190890120935161108f98939492939192910196875273ffffffffffffffffffffffffffffffffffffffff958616602088015293851660408701526060860192909252608085015290911660a083015260c082015260e00190565b60006040516020016120be90613c5c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b840152815160448185030181526064840190925261217e929091906084016141d3565b60405160208183030381529060405280519060200120826000015183602001516121ab85604001516129ac565b60608087015160808089015160408051602081019990995273ffffffffffffffffffffffffffffffffffffffff909716968801969096529186019390935284015260a083015260c082015260e00161108f565b600080825160200267ffffffffffffffff81111561221e5761221e613227565b6040519080825280601f01601f191660200182016040528015612248576020820181803683370190505b50835190915060005b8181101561228f57600061227d86838151811061227057612270613256565b6020026020010151612aaa565b60208381028601015250600101612251565b5050805160209091012092915050565b600081468460a001516040516020016122b89190614202565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526122f5939291602001614287565b6040516020818303038152906040528051906020012090505b92915050565b6000808280602001905181019061232b91906142b4565b9150915060008360408151811061234457612344613256565b0160209081015160408051600080825293810180835289905260f89290921c9082018190526060820186905260808201859052925060019060a0016020604051602081039080840390855afa1580156123a1573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415806123fc575073ffffffffffffffffffffffffffffffffffffffff8116155b15612433576040517fd7815be100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b60008183101561246a5761245861245384846142d8565b612c0e565b6124639060006142eb565b905061230e565b61246361245383856142d8565b600080821261248f576124638383633b9aca00612885565b6124a761249b83614312565b8490633b9aca00612cc4565b61246390614312565b60006124c7856124c086846142eb565b85856124d0565b95945050505050565b6000808412156125335760006124e585614312565b905085612512827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6142d8565b1015612521578291505061255a565b61252b8187614023565b91505061254f565b8385101561254257508161255a565b61254c84866142d8565b90505b6124c7818484612d08565b949350505050565b60008484106125725750806124c7565b600061257e87866142d8565b9050600061258c88886142d8565b90506000858512156125be576125ae83836125a7888a6142eb565b9190612885565b6125b790614312565b90506125d7565b6125d483836125cd89896142eb565b9190612cc4565b90505b6125e1818761434a565b9998505050505050505050565b60006010826000015160200151511115612634576040517f0e99676600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160600151826040015110158061264f575081516020015151155b1561266e57608082015160a0830151602084015161230e929091612d08565b600061268f8360400151846060015161268791906142d8565b61ffff612d19565b90506000806000806126a5876000015186612d31565b935093509350935060006126d08561ffff168561ffff168861ffff1686868d60c0015163ffffffff16565b608089015160a08a015160208b01519293506126ee929184916124d0565b98975050505050505050565b604080516060810182526000808252602082018190529181019190915260006040518060e001604052808660400151815260200186602001518152602001858152602001848152602001866080015181526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001612ef381525090506000612787826125ee565b90506040518060600160405280876000015173ffffffffffffffffffffffffffffffffffffffff168152602001828152602001876060015173ffffffffffffffffffffffffffffffffffffffff16815250925050509392505050565b6127ee848483612f47565b6115385781612829576040517fb9ec1e9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604085015160005b815181101561243357600082828151811061284e5761284e613256565b60200260200101519050612877856127106128699190614023565b602083015190612710612cc4565b602090910152600101612831565b6000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04841183021582026128ba57600080fd5b5091020490565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff841660248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610700565b6040517f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208201527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8201526000906064016040516020818303038152906040528051906020012082600001518360200151604051602001612a579190614372565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012090830194909452810191909152606081019190915260800161108f565b6000604051602001612abb90613d6e565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8401528151604481850301815260648401909252612b7b929091906084016141d3565b6040516020818303038152906040528051906020012082600001518360200151612ba885604001516129ac565b60608087015160808089015160a0808b015160408051602081019b909b5273ffffffffffffffffffffffffffffffffffffffff998a16908b01529489019690965290870193909352939093169184019190915260c083015260e08201526101000161108f565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610700565b5090565b6000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0484118302158202612cf957600080fd5b50910281810615159190040190565b600061255a612d178585612f93565b835b6000818310612d285781612d2a565b825b9392505050565b6000806000806000612d44876000015190565b905061ffff8616612d56826000612fa2565b61ffff1610612d9a576000612d6b8282612fa2565b60008960200151600081518110612d8457612d84613256565b6020026020010151945094509450945050612eea565b60006001886020015151612dae91906143a8565b905060015b8161ffff168161ffff1611612e7e578761ffff16612dde8261ffff1685612fa290919063ffffffff16565b61ffff1610612e6c57612e00612df56001836143a8565b849061ffff16612fa2565b612e0e8461ffff8416612fa2565b60208b0151612e1e6001856143a8565b61ffff1681518110612e3257612e32613256565b60200260200101518b602001518461ffff1681518110612e5457612e54613256565b60200260200101519650965096509650505050612eea565b80612e76816143c3565b915050612db3565b50612e8d8261ffff8316612fa2565b612e9b8361ffff8416612fa2565b89602001518361ffff1681518110612eb557612eb5613256565b60200260200101518a602001518461ffff1681518110612ed757612ed7613256565b6020026020010151955095509550955050505b92959194509250565b6000848410612f035750806124c7565b6000612f0f87866142d8565b90506000612f1d88886142d8565b9050600085851215612f38576125ae83836125cd888a6142eb565b6125d483836125a789896142eb565b600073ffffffffffffffffffffffffffffffffffffffff84161580612f6b57508282115b8061255a575073ffffffffffffffffffffffffffffffffffffffff8416331490509392505050565b6000818311612d285781612d2a565b600060108210612fde576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506010021c90565b600060408284031215612ff857600080fd5b50919050565b60008083601f84011261301057600080fd5b50813567ffffffffffffffff81111561302857600080fd5b60208301915083602082850101111561304057600080fd5b9250929050565b60008060006040848603121561305c57600080fd5b833567ffffffffffffffff8082111561307457600080fd5b61308087838801612fe6565b9450602086013591508082111561309657600080fd5b506130a386828701612ffe565b9497909650939450505050565b60008083601f8401126130c257600080fd5b50813567ffffffffffffffff8111156130da57600080fd5b6020830191508360208260051b850101111561304057600080fd5b6000806020838503121561310857600080fd5b823567ffffffffffffffff81111561311f57600080fd5b61312b858286016130b0565b90969095509350505050565b6000806000806040858703121561314d57600080fd5b843567ffffffffffffffff8082111561316557600080fd5b613171888389016130b0565b9096509450602087013591508082111561318a57600080fd5b5061319787828801612ffe565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089157600080fd5b80356131d0816131a3565b919050565b6000602082840312156131e757600080fd5b8135612d2a816131a3565b60006020828403121561320457600080fd5b813567ffffffffffffffff81111561321b57600080fd5b61255a84828501612fe6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b838110156132a0578181015183820152602001613288565b50506000910152565b600081518084526132c1816020860160208601613285565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008151808452602080850194506020840160005b83811015613353578151805173ffffffffffffffffffffffffffffffffffffffff908116895284820151858a0152604091820151169088015260609096019590820190600101613308565b509495945050505050565b6000815160e0845273ffffffffffffffffffffffffffffffffffffffff8082511660e08601528060208301511661010086015260408201516101208601526060820151610140860152806080830151166101608601525060a0810151905060c06101808501526133d26101a08501826132a9565b905060208301516134106020860182805173ffffffffffffffffffffffffffffffffffffffff16825260208082015190830152604090810151910152565b506040830151848203608086015261342882826132f3565b915050606083015184820360a086015261344282826132a9565b915050608083015160c08501528091505092915050565b6000604082016040835280865180835260608501915060608160051b8601019250602080890160005b838110156134ce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526134bc86835161335e565b95509382019390820190600101613482565b5050858403818701528684528688828601376000848801820152601f9096017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092019094019695505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261355357600080fd5b9190910192915050565b60006020828403121561356f57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126135ab57600080fd5b83018035915067ffffffffffffffff8211156135c657600080fd5b60200191503681900382131561304057600080fd5b60405160c0810167ffffffffffffffff811182821017156135fe576135fe613227565b60405290565b6040805190810167ffffffffffffffff811182821017156135fe576135fe613227565b60405160a0810167ffffffffffffffff811182821017156135fe576135fe613227565b60405160e0810167ffffffffffffffff811182821017156135fe576135fe613227565b6040516060810167ffffffffffffffff811182821017156135fe576135fe613227565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156136d7576136d7613227565b604052919050565b600082601f8301126136f057600080fd5b813567ffffffffffffffff81111561370a5761370a613227565b61373b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613690565b81815284602083860101111561375057600080fd5b816020850160208301376000918101602001919091529392505050565b600060c0828403121561377f57600080fd5b6137876135db565b90508135613794816131a3565b815260208201356137a4816131a3565b80602083015250604082013560408201526060820135606082015260808201356137cd816131a3565b608082015260a082013567ffffffffffffffff8111156137ec57600080fd5b6137f8848285016136df565b60a08301525092915050565b600067ffffffffffffffff82111561381e5761381e613227565b5060051b60200190565b60006040828403121561383a57600080fd5b613842613604565b90508135815260208083013567ffffffffffffffff81111561386357600080fd5b8301601f8101851361387457600080fd5b803561388761388282613804565b613690565b81815260059190911b820183019083810190878311156138a657600080fd5b928401925b828410156138c4578335825292840192908401906138ab565b8085870152505050505092915050565b600060a082840312156138e657600080fd5b6138ee613627565b905081356138fb816131a3565b815260208281013590820152604082013567ffffffffffffffff81111561392157600080fd5b61392d84828501613828565b604083015250606082013560608201526080820135608082015292915050565b600082601f83011261395e57600080fd5b8135602061396e61388283613804565b82815260059290921b8401810191818101908684111561398d57600080fd5b8286015b84811015613a6a57803567ffffffffffffffff808211156139b25760008081fd5b818901915060c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156139eb5760008081fd5b6139f36135db565b87840135613a00816131a3565b81526040848101358983015260608086013585811115613a205760008081fd5b613a2e8f8c838a0101613828565b838501525060809450848601359150613a46826131a3565b82015260a08481013593820193909352920135908201528352918301918301613991565b509695505050505050565b600060a08284031215613a8757600080fd5b613a8f613627565b905081358152602080830135613aa4816131a3565b8082840152506040830135604083015260608301356060830152608083013567ffffffffffffffff811115613ad857600080fd5b8301601f81018513613ae957600080fd5b8035613af761388282613804565b81815260059190911b82018301908381019087831115613b1657600080fd5b928401925b82841015613b3457833582529284019290840190613b1b565b6080860152509295945050505050565b600060208284031215613b5657600080fd5b813567ffffffffffffffff80821115613b6e57600080fd5b9083019060e08286031215613b8257600080fd5b613b8a61364a565b823582811115613b9957600080fd5b613ba58782860161376d565b825250613bb4602084016131c5565b602082015260408301356040820152606083013582811115613bd557600080fd5b613be1878286016138d4565b606083015250608083013582811115613bf957600080fd5b613c058782860161394d565b60808301525060a083013582811115613c1d57600080fd5b613c2987828601613a75565b60a08301525060c083013582811115613c4157600080fd5b613c4d878286016136df565b60c08301525095945050505050565b7f56334475746368496e707574280000000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600d8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601b8201527f4e6f6e6c696e656172447574636844656361792063757276652c000000000000602f8201527f75696e74323536206d6178416d6f756e742c000000000000000000000000000060498201527f75696e743235362061646a7573746d656e745065724777656942617365466565605b8201527f2900000000000000000000000000000000000000000000000000000000000000607b8201526000607c820161230e565b7f563344757463684f75747075742800000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600e8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601c8201527f4e6f6e6c696e656172447574636844656361792063757276652c00000000000060308201527f6164647265737320726563697069656e742c0000000000000000000000000000604a8201527f75696e74323536206d696e416d6f756e742c0000000000000000000000000000605c8201527f75696e743235362061646a7573746d656e745065724777656942617365466565606e8201527f2900000000000000000000000000000000000000000000000000000000000000608e8201526000608f820161230e565b60008651613eb8818460208b01613285565b865190830190613ecc818360208b01613285565b8651910190613edf818360208a01613285565b8551910190613ef2818360208901613285565b8451910190613f05818360208801613285565b01979650505050505050565b602081526000612d2a602083018461335e565b60006020808385031215613f3757600080fd5b825167ffffffffffffffff811115613f4e57600080fd5b8301601f81018513613f5f57600080fd5b8051613f6d61388282613804565b81815260609182028301840191848201919088841115613f8c57600080fd5b938501935b83851015613fe85780858a031215613fa95760008081fd5b613fb161366d565b8551613fbc816131a3565b81528587015187820152604080870151613fd5816131a3565b9082015283529384019391850191613f91565b50979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561230e5761230e613ff4565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061255a604083018461335e565b7f563344757463684f72646572207769746e6573732900000000000000000000008152600060158851602061409f82848701838e01613285565b8951918501916140b481858501848e01613285565b89519201916140c881858501848d01613285565b88519201916140dc81858501848c01613285565b87519201916140f081858501848b01613285565b865192019161410481858501848a01613285565b919091019091019998505050505050505050565b6000610140614148838a51805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b60208901516040840152604089015160608401526141896080840189805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff871660c08401528560e0840152806101008401526141be818401866132a9565b90508281036101208401526125e181856132a9565b600083516141e5818460208801613285565b8351908301906141f9818360208801613285565b01949350505050565b6000602080835260c0830184518285015273ffffffffffffffffffffffffffffffffffffffff828601511660408501526040850151606085015260608501516080850152608085015160a08086015281815180845260e0870191508483019350600092505b80831015613a6a5783518252928401926001929092019190840190614267565b838152826020820152600082516142a5816040850160208701613285565b91909101604001949350505050565b600080604083850312156142c757600080fd5b505080516020909101519092909150565b8181038181111561230e5761230e613ff4565b818103600083128015838313168383128216171561430b5761430b613ff4565b5092915050565b60007f8000000000000000000000000000000000000000000000000000000000000000820361434357614343613ff4565b5060000390565b808201828112600083128015821682158216171561436a5761436a613ff4565b505092915050565b815160009082906020808601845b8381101561439c57815185529382019390820190600101614380565b50929695505050505050565b61ffff82811682821603908082111561430b5761430b613ff4565b600061ffff8083168181036143da576143da613ff4565b600101939250505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f28616464726573732072656163746f722c6164647265737320737761707065722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c61646472657373206164646974696f6e616c56616c69646174696f6e436f6e74726163742c6279746573206164646974696f6e616c56616c69646174696f6e4461746129a2646970667358221220a83088cf8ce7734a1a4fd473e15da5dd40de922f9f237cdcd5a3258bdb21af8564736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\x9AW`\x005`\xE0\x1C\x80c-w\x13\x89\x11a\0iW\x80ci\x99\xB3w\x11a\0NW\x80ci\x99\xB3w\x14a\x01qW\x80c\x8D\xA5\xCB[\x14a\x01\x9EW\x80c\xF2\xFD\xE3\x8B\x14a\x01\xCBW`\0\x80\xFD[\x80c-w\x13\x89\x14a\x01>W\x80c?b\x19.\x14a\x01^W`\0\x80\xFD[\x80c\r3X\x84\x14a\0\xA6W\x80c\rz\x16\xC3\x14a\0\xBBW\x80c\x12&\x1E\xE7\x14a\0\xCEW\x80c\x13\xFBr\xC7\x14a\x01+W`\0\x80\xFD[6a\0\xA1W\0[`\0\x80\xFD[a\0\xB9a\0\xB46`\x04a0GV[a\x01\xEBV[\0[a\0\xB9a\0\xC96`\x04a0\xF5V[a\x03dV[4\x80\x15a\0\xDAW`\0\x80\xFD[Pa\x01\x02\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0\xB9a\x0196`\x04a17V[a\x04\xC5V[4\x80\x15a\x01JW`\0\x80\xFD[Pa\0\xB9a\x01Y6`\x04a1\xD5V[a\x06\x83V[a\0\xB9a\x01l6`\x04a1\xF2V[a\x07\x8FV[4\x80\x15a\x01}W`\0\x80\xFD[P`\x01Ta\x01\x02\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xAAW`\0\x80\xFD[P`\0Ta\x01\x02\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xD7W`\0\x80\xFD[Pa\0\xB9a\x01\xE66`\x04a1\xD5V[a\x08\x94V[a\x01\xF3a\n\0V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R`\0\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x02\nW\x90PP\x90Pa\x02\xB2\x84a\nqV[\x81`\0\x81Q\x81\x10a\x02\xC5Wa\x02\xC5a2VV[` \x02` \x01\x01\x81\x90RPa\x02\xD9\x81a\x0C\"V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x03\x19\x90\x84\x90\x87\x90\x87\x90`\x04\x01a4YV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x033W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x03GW=`\0\x80>=`\0\xFD[PPPPa\x03T\x81a\x0CsV[Pa\x03_`\x01`\x02UV[PPPV[a\x03la\n\0V[\x80`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\x88Wa\x03\x88a2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04CW\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x03\xA6W\x90P[P\x90P`\0[\x82\x81\x10\x15a\x04\xA2Wa\x04}\x85\x85\x83\x81\x81\x10a\x04fWa\x04fa2VV[\x90P` \x02\x81\x01\x90a\x04x\x91\x90a5\x1FV[a\nqV[\x82\x82\x81Q\x81\x10a\x04\x8FWa\x04\x8Fa2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x04IV[Pa\x04\xAC\x81a\x0C\"V[a\x04\xB5\x81a\x0CsV[PPa\x04\xC1`\x01`\x02UV[PPV[a\x04\xCDa\n\0V[\x82`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xE9Wa\x04\xE9a2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\xA4W\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x05\x07W\x90P[P\x90P`\0[\x82\x81\x10\x15a\x05\xECWa\x05\xC7\x87\x87\x83\x81\x81\x10a\x04fWa\x04fa2VV[\x82\x82\x81Q\x81\x10a\x05\xD9Wa\x05\xD9a2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x05\xAAV[Pa\x05\xF6\x81a\x0C\"V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x066\x90\x84\x90\x88\x90\x88\x90`\x04\x01a4YV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06PW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06dW=`\0\x80>=`\0\xFD[PPPPa\x06q\x81a\x0CsV[PPa\x06}`\x01`\x02UV[PPPPV[`\0Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x07\tW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@\x80Q\x91\x90\x92\x16\x80\x82R` \x82\x01\x93\x90\x93R\x7F\xB9\x04\xAE\x95)\xE3s\xE4\x8B\xC8-\xF42l\xCE\xAF\x1BLG+\xAB\xF3\x7F[}\xECF\xFE\xCCkS\xE0\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[a\x07\x97a\n\0V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R`\0\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x07\xAEW\x90PP\x90Pa\x08V\x82a\nqV[\x81`\0\x81Q\x81\x10a\x08iWa\x08ia2VV[` \x02` \x01\x01\x81\x90RPa\x08}\x81a\x0C\"V[a\x08\x86\x81a\x0CsV[Pa\x08\x91`\x01`\x02UV[PV[`\0Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\t\x15W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\0V[`\0\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[`\0`ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA3\xB1\xB3\x1D`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xD3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xF7\x91\x90a5]V[\x90P\x90V[C\x90V[`\x02\x80T\x03a\nkW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FReentrancyGuard: reentrant call\0`D\x82\x01R`d\x01a\x07\0V[`\x02\x80UV[`@\x80Qa\x01`\x81\x01\x82R`\0`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x84\x01R\x92\x82\x01\x83\x90R\x82\x82\x01\x92\x90\x92R`\x80\x81\x01\x82\x90R\x90a\n\xEA\x83\x80a5vV[\x81\x01\x90a\n\xF7\x91\x90a;DV[\x90P`\0a\x0B\x04\x82a\r\xC6V[\x90Pa\x0B\x10\x81\x83a\x10\xACV[a\x0B\x19\x82a\x11\x08V[a\x0B\"\x82a\x12lV[`\0a\x0BP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x16V[\x90P`@Q\x80`\xA0\x01`@R\x80\x84`\0\x01Q\x81R` \x01a\x0B\x88\x85`\xA0\x01Q`\0\x01Q\x84\x87``\x01Qa\x13y\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x81R`\xA0\x85\x01QQ`\x80\x86\x01Q` \x90\x92\x01\x91a\x0B\xA5\x91\x85a\x14DV[\x81R` \x01\x86\x80` \x01\x90a\x0B\xBA\x91\x90a5vV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847`\0\x92\x01\x91\x90\x91RPPP\x90\x82RP` \x90\x81\x01\x84\x90R`\xA0\x85\x01Q\x90\x81\x01Q\x81Q`@\x90\x92\x01Q\x92\x96Pa\x0C\x1A\x92\x87\x92\x90\x85a\x15+V[PPP\x91\x90PV[\x80Q`\0[\x81\x81\x10\x15a\x03_W`\0\x83\x82\x81Q\x81\x10a\x0CCWa\x0CCa2VV[` \x02` \x01\x01Q\x90Pa\x0CV\x81a\x15?V[a\x0C`\x813a\x1A/V[a\x0Cj\x813a\x1B0V[P`\x01\x01a\x0C'V[\x80Q`\0[\x81\x81\x10\x15a\r\xB5W`\0\x83\x82\x81Q\x81\x10a\x0C\x94Wa\x0C\x94a2VV[` \x02` \x01\x01Q\x90P`\0\x81`@\x01QQ\x90P`\0[\x81\x81\x10\x15a\r\x15W`\0\x83`@\x01Q\x82\x81Q\x81\x10a\x0C\xCBWa\x0C\xCBa2VV[` \x02` \x01\x01Q\x90Pa\r\x0C\x81`@\x01Q\x82` \x01Q\x83`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1F2\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[P`\x01\x01a\x0C\xABV[P\x81`\0\x01Q` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x85\x81Q\x81\x10a\r^Wa\r^a2VV[` \x02` \x01\x01Q`\x80\x01Q\x7Fx\xAD~\xC0\xE9\xF8\x9Et\x01*\xFAXs\x8Bkf\x1C\x02L\xB0\xFD\x18^\xE2\xF6\x16\xC0\xA2\x89$\xBDf\x85`\0\x01Q`@\x01Q`@Qa\r\xA3\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4PP`\x01\x01a\x0CxV[PG\x15a\x04\xC1Wa\x04\xC13Ga\x1FyV[`@Q\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x82\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x82\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x82\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x82\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x82\x01R`\0\x90`\x98\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x83\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x83\x01R\x90`d\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aD\x13` \x83\x019`@Q` \x01a\x0F\xA9\x90a<\\V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q` \x01a\x0F\xC7\x90a=nV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x10\x06\x95\x94\x93\x92\x91` \x01a>\xA6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\x10)\x83`\0\x01Qa \x13V[\x83` \x01Q\x84`@\x01Qa\x10@\x86``\x01Qa \xADV[a\x10M\x87`\x80\x01Qa!\xFEV[`@\x80Q` \x81\x01\x97\x90\x97R\x86\x01\x94\x90\x94Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16``\x85\x01R`\x80\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x80Q``\x01QB\x11\x15a\x10\xEBW`@Q\x7F\xB0\x8C\xE5\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x04\xC1\x90a\x10\xFE\x83\x85a\"\x9FV[\x83`\xC0\x01Qa#\x14V[`\xA0\x81\x01Q``\x01Q\x15a\x11tW\x80``\x01Q` \x01Q\x81`\xA0\x01Q``\x01Q\x11\x15a\x11`W`@Q\x7F\xAC\x91C\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\xA0\x81\x01Q``\x90\x81\x01Q\x90\x82\x01Q` \x01R[\x80`\x80\x01QQ\x81`\xA0\x01Q`\x80\x01QQ\x14a\x11\xBBW`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x80\x81\x01QQ`\0[\x81\x81\x10\x15a\x03_W`\0\x83`\x80\x01Q\x82\x81Q\x81\x10a\x11\xE4Wa\x11\xE4a2VV[` \x02` \x01\x01Q\x90P`\0\x84`\xA0\x01Q`\x80\x01Q\x83\x81Q\x81\x10a\x12\nWa\x12\na2VV[` \x02` \x01\x01Q\x90P\x80`\0\x14a\x12bW\x81` \x01Q\x81\x10\x15a\x12ZW`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x82\x01\x81\x90R[PP`\x01\x01a\x11\xC4V[`\0a\x12\x85\x82`@\x01QHa$<\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x81``\x01Q`\x80\x01Q`\0\x14a\x12\xE0W`\0a\x12\xAB\x83``\x01Q`\x80\x01Q\x83a$wV[\x90Pa\x12\xD5\x81`\0\x85``\x01Q``\x01Q\x86``\x01Q` \x01Qa$\xB0\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[``\x84\x01Q` \x01RP[`\x80\x82\x01QQ`\0[\x81\x81\x10\x15a\x06}W`\0\x84`\x80\x01Q\x82\x81Q\x81\x10a\x13\tWa\x13\ta2VV[` \x02` \x01\x01Q\x90P\x80`\xA0\x01Q`\0\x14a\x13pW`\0a\x13/\x82`\xA0\x01Q\x86a$wV[`\x80\x83\x01Q` \x84\x01Q\x91\x92Pa\x13i\x91\x90\x83\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa$\xD0V[` \x83\x01RP[P`\x01\x01a\x12\xE9V[a\x13\xB3`@Q\x80``\x01`@R\x80`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[`\0`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01`\0\x81R` \x01\x86``\x01Q\x81R` \x01a%b\x81RP\x90P`\0a\x14\x04\x82a%\xEEV[`@\x80Q``\x80\x82\x01\x83R\x89Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x82\x01\x93\x90\x93R\x97\x90\x91\x01Q\x90\x87\x01RP\x93\x94\x93PPPPV[\x82Q``\x90\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14bWa\x14ba2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x14\xCBW\x81` \x01[`@\x80Q``\x81\x01\x82R`\0\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x14\x80W\x90P[P\x91P`\0[\x81\x81\x10\x15a\x15\"Wa\x14\xFD\x86\x82\x81Q\x81\x10a\x14\xEEWa\x14\xEEa2VV[` \x02` \x01\x01Q\x86\x86a&\xFAV[\x83\x82\x81Q\x81\x10a\x15\x0FWa\x15\x0Fa2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x14\xD1V[PP\x93\x92PPPV[a\x158\x85\x85\x85\x85\x85a'\xE3V[PPPPPV[`\x01Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15_WPV[`\x01T`@Q\x7F\x8A\xA6\xCF\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\0\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90c\x8A\xA6\xCF\x03\x90a\x15\xB6\x90\x85\x90`\x04\x01a?\x11V[`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x15\xD3W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x82\x01`@Ra\x16\x19\x91\x90\x81\x01\x90a?$V[`@\x83\x01QQ\x81Q\x91\x92P\x90`\0a\x161\x82\x84a@#V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16IWa\x16Ia2'V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16\xB2W\x81` \x01[`@\x80Q``\x81\x01\x82R`\0\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x16gW\x90P[P\x90P`\0[\x83\x81\x10\x15a\x17\x03W\x85`@\x01Q\x81\x81Q\x81\x10a\x16\xD6Wa\x16\xD6a2VV[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x16\xF0Wa\x16\xF0a2VV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x16\xB8V[P`\0\x80`\0[\x84\x81\x10\x15a\x1A\x1EW`\0\x87\x82\x81Q\x81\x10a\x17&Wa\x17&a2VV[` \x02` \x01\x01Q\x90P`\0[\x82\x81\x10\x15a\x17\xE4W\x88\x81\x81Q\x81\x10a\x17MWa\x17Ma2VV[` \x02` \x01\x01Q`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x17\xDCW\x81Q`@Q\x7F\xFF\xF0\x83\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x07\0V[`\x01\x01a\x173V[P`\0\x80[\x88\x81\x10\x15a\x18\xA5W`\0\x8B`@\x01Q\x82\x81Q\x81\x10a\x18\tWa\x18\ta2VV[` \x02` \x01\x01Q\x90P\x83`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18\x9CW\x85\x15a\x18\x86W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x18\x95\x90\x84a@#V[\x92P`\x01\x96P[P`\x01\x01a\x17\xE9V[P\x81Q` \x8B\x01QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16\x03a\x19\x1EW\x84\x15a\x19\x05W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x80\x8B\x01Q\x01Qa\x19\x17\x90\x82a@#V[\x90P`\x01\x93P[\x80`\0\x03a\x19sW\x81Q`@Q\x7F\xED\xDF\x07\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x07\0V[a\x19\x81\x81`\x05a'\x10a(\x85V[\x82` \x01Q\x11\x15a\x19\xF4W\x81Q` \x83\x01Q`@\x80\x85\x01Q\x90Q\x7F\x82\xE7VV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16`\x04\x82\x01R`$\x81\x01\x92\x90\x92R\x91\x90\x91\x16`D\x82\x01R`d\x01a\x07\0V[\x81\x86\x84\x8A\x01\x81Q\x81\x10a\x1A\tWa\x1A\ta2VV[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x17\nV[PPP`@\x90\x94\x01\x93\x90\x93RPPPV[\x81QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160\x14a\x1A\x80W`@Q\x7FM\xDFJd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81Q`\x80\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x04\xC1W\x81Q`\x80\x01Q`@Q\x7Fn\x84\xBA+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90cn\x84\xBA+\x90a\x1A\xFC\x90\x84\x90\x86\x90`\x04\x01a@6V[`\0`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1B\x14W`\0\x80\xFD[PZ\xFA\x15\x80\x15a\x1B(W=`\0\x80>=`\0\xFD[PPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x13|)\xFEa\x1B\xF0\x84`@\x80Q`\xA0\x81\x01\x82R`\0``\x82\x01\x81\x81R`\x80\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91RP`@\x80Q`\xA0\x81\x01\x82R` \x80\x84\x01\x80QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16``\x80\x85\x01\x91\x82R\x91Q\x85\x01Q`\x80\x85\x01R\x83R\x84Q\x84\x01Q\x91\x83\x01\x91\x90\x91R\x92Q\x90\x92\x01Q\x90\x82\x01R\x90V[`@\x80Q\x80\x82\x01\x82R`\0\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x82R\x80\x87\x01Q\x81\x01Q\x90\x82\x01R\x85`\0\x01Q` \x01Q\x86`\x80\x01Q`@Q` \x01a\x1C\xBD\x90\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`\x14\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`+\x82\x01R`D\x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aD\x13` \x83\x019`@Q\x80``\x01`@R\x80`.\x81R` \x01aC\xE5`.\x919`@Q` \x01a\x1D'\x90a<\\V[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x84\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x84\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x84\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x84\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x84\x01R\x81Q`x\x81\x85\x03\x01\x81R`\x98\x84\x01\x90\x92R\x91a\x1EW\x90`\xB8\x01a=nV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x1E\x97\x96\x95\x94\x93\x92\x91` \x01a@eV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R``\x8A\x01Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x89\x90\x1B\x16\x83Ra\x1F\x04\x96\x95\x94\x93\x92`\x04\x01aA\x18V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x1F\x1EW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x1B(W=`\0\x80>=`\0\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16a\x1FWWa\x03_\x82\x82a\x1FyV[a\x03_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x84\x84a(\xC1V[`\0\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x1F\xD3W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x1F\xD8V[``\x91P[PP\x90P\x80a\x03_W`@Q\x7F\xF4\xB3\xB1\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0`@Q\x80`\xC0\x01`@R\x80`\x8D\x81R` \x01aD\x13`\x8D\x919\x80Q` \x91\x82\x01 \x83Q\x84\x83\x01Q`@\x80\x87\x01Q``\x88\x01Q`\x80\x89\x01Q`\xA0\x8A\x01Q\x80Q\x90\x89\x01 \x93Qa\x10\x8F\x98\x93\x94\x92\x93\x91\x92\x91\x01\x96\x87Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x86\x16` \x88\x01R\x93\x85\x16`@\x87\x01R``\x86\x01\x92\x90\x92R`\x80\x85\x01R\x90\x91\x16`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01\x90V[`\0`@Q` \x01a \xBE\x90a<\\V[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra!~\x92\x90\x91\x90`\x84\x01aA\xD3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82`\0\x01Q\x83` \x01Qa!\xAB\x85`@\x01Qa)\xACV[``\x80\x87\x01Q`\x80\x80\x89\x01Q`@\x80Q` \x81\x01\x99\x90\x99Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x97\x16\x96\x88\x01\x96\x90\x96R\x91\x86\x01\x93\x90\x93R\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01a\x10\x8FV[`\0\x80\x82Q` \x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\"\x1EWa\"\x1Ea2'V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\"HW` \x82\x01\x81\x806\x837\x01\x90P[P\x83Q\x90\x91P`\0[\x81\x81\x10\x15a\"\x8FW`\0a\"}\x86\x83\x81Q\x81\x10a\"pWa\"pa2VV[` \x02` \x01\x01Qa*\xAAV[` \x83\x81\x02\x86\x01\x01RP`\x01\x01a\"QV[PP\x80Q` \x90\x91\x01 \x92\x91PPV[`\0\x81F\x84`\xA0\x01Q`@Q` \x01a\"\xB8\x91\x90aB\x02V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\"\xF5\x93\x92\x91` \x01aB\x87V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P[\x92\x91PPV[`\0\x80\x82\x80` \x01\x90Q\x81\x01\x90a#+\x91\x90aB\xB4V[\x91P\x91P`\0\x83`@\x81Q\x81\x10a#DWa#Da2VV[\x01` \x90\x81\x01Q`@\x80Q`\0\x80\x82R\x93\x81\x01\x80\x83R\x89\x90R`\xF8\x92\x90\x92\x1C\x90\x82\x01\x81\x90R``\x82\x01\x86\x90R`\x80\x82\x01\x85\x90R\x92P`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a#\xA1W=`\0\x80>=`\0\xFD[PPP` `@Q\x03Q\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x80a#\xFCWPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15[\x15a$3W`@Q\x7F\xD7\x81[\xE1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPV[`\0\x81\x83\x10\x15a$jWa$Xa$S\x84\x84aB\xD8V[a,\x0EV[a$c\x90`\0aB\xEBV[\x90Pa#\x0EV[a$ca$S\x83\x85aB\xD8V[`\0\x80\x82\x12a$\x8FWa$c\x83\x83c;\x9A\xCA\0a(\x85V[a$\xA7a$\x9B\x83aC\x12V[\x84\x90c;\x9A\xCA\0a,\xC4V[a$c\x90aC\x12V[`\0a$\xC7\x85a$\xC0\x86\x84aB\xEBV[\x85\x85a$\xD0V[\x95\x94PPPPPV[`\0\x80\x84\x12\x15a%3W`\0a$\xE5\x85aC\x12V[\x90P\x85a%\x12\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaB\xD8V[\x10\x15a%!W\x82\x91PPa%ZV[a%+\x81\x87a@#V[\x91PPa%OV[\x83\x85\x10\x15a%BWP\x81a%ZV[a%L\x84\x86aB\xD8V[\x90P[a$\xC7\x81\x84\x84a-\x08V[\x94\x93PPPPV[`\0\x84\x84\x10a%rWP\x80a$\xC7V[`\0a%~\x87\x86aB\xD8V[\x90P`\0a%\x8C\x88\x88aB\xD8V[\x90P`\0\x85\x85\x12\x15a%\xBEWa%\xAE\x83\x83a%\xA7\x88\x8AaB\xEBV[\x91\x90a(\x85V[a%\xB7\x90aC\x12V[\x90Pa%\xD7V[a%\xD4\x83\x83a%\xCD\x89\x89aB\xEBV[\x91\x90a,\xC4V[\x90P[a%\xE1\x81\x87aCJV[\x99\x98PPPPPPPPPV[`\0`\x10\x82`\0\x01Q` \x01QQ\x11\x15a&4W`@Q\x7F\x0E\x99gf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81``\x01Q\x82`@\x01Q\x10\x15\x80a&OWP\x81Q` \x01QQ\x15[\x15a&nW`\x80\x82\x01Q`\xA0\x83\x01Q` \x84\x01Qa#\x0E\x92\x90\x91a-\x08V[`\0a&\x8F\x83`@\x01Q\x84``\x01Qa&\x87\x91\x90aB\xD8V[a\xFF\xFFa-\x19V[\x90P`\0\x80`\0\x80a&\xA5\x87`\0\x01Q\x86a-1V[\x93P\x93P\x93P\x93P`\0a&\xD0\x85a\xFF\xFF\x16\x85a\xFF\xFF\x16\x88a\xFF\xFF\x16\x86\x86\x8D`\xC0\x01Qc\xFF\xFF\xFF\xFF\x16V[`\x80\x89\x01Q`\xA0\x8A\x01Q` \x8B\x01Q\x92\x93Pa&\xEE\x92\x91\x84\x91a$\xD0V[\x98\x97PPPPPPPPV[`@\x80Q``\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R`\0`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01\x86`\x80\x01Q\x81R` \x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81R` \x01a.\xF3\x81RP\x90P`\0a'\x87\x82a%\xEEV[\x90P`@Q\x80``\x01`@R\x80\x87`\0\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x82\x81R` \x01\x87``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x92PPP\x93\x92PPPV[a'\xEE\x84\x84\x83a/GV[a\x158W\x81a()W`@Q\x7F\xB9\xEC\x1E\x96\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x85\x01Q`\0[\x81Q\x81\x10\x15a$3W`\0\x82\x82\x81Q\x81\x10a(NWa(Na2VV[` \x02` \x01\x01Q\x90Pa(w\x85a'\x10a(i\x91\x90a@#V[` \x83\x01Q\x90a'\x10a,\xC4V[` \x90\x91\x01R`\x01\x01a(1V[`\0\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a(\xBAW`\0\x80\xFD[P\x91\x02\x04\x90V[`\0`@Q\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`$\x82\x01R\x82`D\x82\x01R` `\0`d\x83`\0\x8AZ\xF1=\x15`\x1F=\x11`\x01`\0Q\x14\x16\x17\x16\x91PP\x80a\x158W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FTRANSFER_FROM_FAILED\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x07\0V[`@Q\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x82\x01R`\0\x90`d\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82`\0\x01Q\x83` \x01Q`@Q` \x01a*W\x91\x90aCrV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x90\x83\x01\x94\x90\x94R\x81\x01\x91\x90\x91R``\x81\x01\x91\x90\x91R`\x80\x01a\x10\x8FV[`\0`@Q` \x01a*\xBB\x90a=nV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra+{\x92\x90\x91\x90`\x84\x01aA\xD3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82`\0\x01Q\x83` \x01Qa+\xA8\x85`@\x01Qa)\xACV[``\x80\x87\x01Q`\x80\x80\x89\x01Q`\xA0\x80\x8B\x01Q`@\x80Q` \x81\x01\x9B\x90\x9BRs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x99\x8A\x16\x90\x8B\x01R\x94\x89\x01\x96\x90\x96R\x90\x87\x01\x93\x90\x93R\x93\x90\x93\x16\x91\x84\x01\x91\x90\x91R`\xC0\x83\x01R`\xE0\x82\x01Ra\x01\0\x01a\x10\x8FV[`\0\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a,\xC0W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FSafeCast: value doesn't fit in a`D\x82\x01R\x7Fn int256\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x07\0V[P\x90V[`\0\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a,\xF9W`\0\x80\xFD[P\x91\x02\x81\x81\x06\x15\x15\x91\x90\x04\x01\x90V[`\0a%Za-\x17\x85\x85a/\x93V[\x83[`\0\x81\x83\x10a-(W\x81a-*V[\x82[\x93\x92PPPV[`\0\x80`\0\x80`\0a-D\x87`\0\x01Q\x90V[\x90Pa\xFF\xFF\x86\x16a-V\x82`\0a/\xA2V[a\xFF\xFF\x16\x10a-\x9AW`\0a-k\x82\x82a/\xA2V[`\0\x89` \x01Q`\0\x81Q\x81\x10a-\x84Wa-\x84a2VV[` \x02` \x01\x01Q\x94P\x94P\x94P\x94PPa.\xEAV[`\0`\x01\x88` \x01QQa-\xAE\x91\x90aC\xA8V[\x90P`\x01[\x81a\xFF\xFF\x16\x81a\xFF\xFF\x16\x11a.~W\x87a\xFF\xFF\x16a-\xDE\x82a\xFF\xFF\x16\x85a/\xA2\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\xFF\xFF\x16\x10a.lWa.\0a-\xF5`\x01\x83aC\xA8V[\x84\x90a\xFF\xFF\x16a/\xA2V[a.\x0E\x84a\xFF\xFF\x84\x16a/\xA2V[` \x8B\x01Qa.\x1E`\x01\x85aC\xA8V[a\xFF\xFF\x16\x81Q\x81\x10a.2Wa.2a2VV[` \x02` \x01\x01Q\x8B` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a.TWa.Ta2VV[` \x02` \x01\x01Q\x96P\x96P\x96P\x96PPPPa.\xEAV[\x80a.v\x81aC\xC3V[\x91PPa-\xB3V[Pa.\x8D\x82a\xFF\xFF\x83\x16a/\xA2V[a.\x9B\x83a\xFF\xFF\x84\x16a/\xA2V[\x89` \x01Q\x83a\xFF\xFF\x16\x81Q\x81\x10a.\xB5Wa.\xB5a2VV[` \x02` \x01\x01Q\x8A` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a.\xD7Wa.\xD7a2VV[` \x02` \x01\x01Q\x95P\x95P\x95P\x95PPP[\x92\x95\x91\x94P\x92PV[`\0\x84\x84\x10a/\x03WP\x80a$\xC7V[`\0a/\x0F\x87\x86aB\xD8V[\x90P`\0a/\x1D\x88\x88aB\xD8V[\x90P`\0\x85\x85\x12\x15a/8Wa%\xAE\x83\x83a%\xCD\x88\x8AaB\xEBV[a%\xD4\x83\x83a%\xA7\x89\x89aB\xEBV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a/kWP\x82\x82\x11[\x80a%ZWPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x14\x90P\x93\x92PPPV[`\0\x81\x83\x11a-(W\x81a-*V[`\0`\x10\x82\x10a/\xDEW`@Q\x7FN#\xD05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P`\x10\x02\x1C\x90V[`\0`@\x82\x84\x03\x12\x15a/\xF8W`\0\x80\xFD[P\x91\x90PV[`\0\x80\x83`\x1F\x84\x01\x12a0\x10W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0(W`\0\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a0@W`\0\x80\xFD[\x92P\x92\x90PV[`\0\x80`\0`@\x84\x86\x03\x12\x15a0\\W`\0\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a0tW`\0\x80\xFD[a0\x80\x87\x83\x88\x01a/\xE6V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a0\x96W`\0\x80\xFD[Pa0\xA3\x86\x82\x87\x01a/\xFEV[\x94\x97\x90\x96P\x93\x94PPPPV[`\0\x80\x83`\x1F\x84\x01\x12a0\xC2W`\0\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0\xDAW`\0\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a0@W`\0\x80\xFD[`\0\x80` \x83\x85\x03\x12\x15a1\x08W`\0\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a1\x1FW`\0\x80\xFD[a1+\x85\x82\x86\x01a0\xB0V[\x90\x96\x90\x95P\x93PPPPV[`\0\x80`\0\x80`@\x85\x87\x03\x12\x15a1MW`\0\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a1eW`\0\x80\xFD[a1q\x88\x83\x89\x01a0\xB0V[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a1\x8AW`\0\x80\xFD[Pa1\x97\x87\x82\x88\x01a/\xFEV[\x95\x98\x94\x97P\x95PPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08\x91W`\0\x80\xFD[\x805a1\xD0\x81a1\xA3V[\x91\x90PV[`\0` \x82\x84\x03\x12\x15a1\xE7W`\0\x80\xFD[\x815a-*\x81a1\xA3V[`\0` \x82\x84\x03\x12\x15a2\x04W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a2\x1BW`\0\x80\xFD[a%Z\x84\x82\x85\x01a/\xE6V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0[\x83\x81\x10\x15a2\xA0W\x81\x81\x01Q\x83\x82\x01R` \x01a2\x88V[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra2\xC1\x81` \x86\x01` \x86\x01a2\x85V[`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\0\x81Q\x80\x84R` \x80\x85\x01\x94P` \x84\x01`\0[\x83\x81\x10\x15a3SW\x81Q\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x89R\x84\x82\x01Q\x85\x8A\x01R`@\x91\x82\x01Q\x16\x90\x88\x01R``\x90\x96\x01\x95\x90\x82\x01\x90`\x01\x01a3\x08V[P\x94\x95\x94PPPPPV[`\0\x81Q`\xE0\x84Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16`\xE0\x86\x01R\x80` \x83\x01Q\x16a\x01\0\x86\x01R`@\x82\x01Qa\x01 \x86\x01R``\x82\x01Qa\x01@\x86\x01R\x80`\x80\x83\x01Q\x16a\x01`\x86\x01RP`\xA0\x81\x01Q\x90P`\xC0a\x01\x80\x85\x01Ra3\xD2a\x01\xA0\x85\x01\x82a2\xA9V[\x90P` \x83\x01Qa4\x10` \x86\x01\x82\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x80\x82\x01Q\x90\x83\x01R`@\x90\x81\x01Q\x91\x01RV[P`@\x83\x01Q\x84\x82\x03`\x80\x86\x01Ra4(\x82\x82a2\xF3V[\x91PP``\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra4B\x82\x82a2\xA9V[\x91PP`\x80\x83\x01Q`\xC0\x85\x01R\x80\x91PP\x92\x91PPV[`\0`@\x82\x01`@\x83R\x80\x86Q\x80\x83R``\x85\x01\x91P``\x81`\x05\x1B\x86\x01\x01\x92P` \x80\x89\x01`\0[\x83\x81\x10\x15a4\xCEW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x88\x87\x03\x01\x85Ra4\xBC\x86\x83Qa3^V[\x95P\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01a4\x82V[PP\x85\x84\x03\x81\x87\x01R\x86\x84R\x86\x88\x82\x86\x017`\0\x84\x88\x01\x82\x01R`\x1F\x90\x96\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x90\x92\x01\x90\x94\x01\x96\x95PPPPPPV[`\0\x825\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1\x836\x03\x01\x81\x12a5SW`\0\x80\xFD[\x91\x90\x91\x01\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a5oW`\0\x80\xFD[PQ\x91\x90PV[`\0\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a5\xABW`\0\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a5\xC6W`\0\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a0@W`\0\x80\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@R\x90V[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q`\xE0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xFEWa5\xFEa2'V[`@Q`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a6\xD7Wa6\xD7a2'V[`@R\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a6\xF0W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7\nWa7\na2'V[a7;` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x84\x01\x16\x01a6\x90V[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a7PW`\0\x80\xFD[\x81` \x85\x01` \x83\x017`\0\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[`\0`\xC0\x82\x84\x03\x12\x15a7\x7FW`\0\x80\xFD[a7\x87a5\xDBV[\x90P\x815a7\x94\x81a1\xA3V[\x81R` \x82\x015a7\xA4\x81a1\xA3V[\x80` \x83\x01RP`@\x82\x015`@\x82\x01R``\x82\x015``\x82\x01R`\x80\x82\x015a7\xCD\x81a1\xA3V[`\x80\x82\x01R`\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7\xECW`\0\x80\xFD[a7\xF8\x84\x82\x85\x01a6\xDFV[`\xA0\x83\x01RP\x92\x91PPV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a8\x1EWa8\x1Ea2'V[P`\x05\x1B` \x01\x90V[`\0`@\x82\x84\x03\x12\x15a8:W`\0\x80\xFD[a8Ba6\x04V[\x90P\x815\x81R` \x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8cW`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a8tW`\0\x80\xFD[\x805a8\x87a8\x82\x82a8\x04V[a6\x90V[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a8\xA6W`\0\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a8\xC4W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a8\xABV[\x80\x85\x87\x01RPPPPP\x92\x91PPV[`\0`\xA0\x82\x84\x03\x12\x15a8\xE6W`\0\x80\xFD[a8\xEEa6'V[\x90P\x815a8\xFB\x81a1\xA3V[\x81R` \x82\x81\x015\x90\x82\x01R`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9!W`\0\x80\xFD[a9-\x84\x82\x85\x01a8(V[`@\x83\x01RP``\x82\x015``\x82\x01R`\x80\x82\x015`\x80\x82\x01R\x92\x91PPV[`\0\x82`\x1F\x83\x01\x12a9^W`\0\x80\xFD[\x815` a9na8\x82\x83a8\x04V[\x82\x81R`\x05\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x86\x84\x11\x15a9\x8DW`\0\x80\xFD[\x82\x86\x01[\x84\x81\x10\x15a:jW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a9\xB2W`\0\x80\x81\xFD[\x81\x89\x01\x91P`\xC0\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x8D\x03\x01\x12\x15a9\xEBW`\0\x80\x81\xFD[a9\xF3a5\xDBV[\x87\x84\x015a:\0\x81a1\xA3V[\x81R`@\x84\x81\x015\x89\x83\x01R``\x80\x86\x015\x85\x81\x11\x15a: W`\0\x80\x81\xFD[a:.\x8F\x8C\x83\x8A\x01\x01a8(V[\x83\x85\x01RP`\x80\x94P\x84\x86\x015\x91Pa:F\x82a1\xA3V[\x82\x01R`\xA0\x84\x81\x015\x93\x82\x01\x93\x90\x93R\x92\x015\x90\x82\x01R\x83R\x91\x83\x01\x91\x83\x01a9\x91V[P\x96\x95PPPPPPV[`\0`\xA0\x82\x84\x03\x12\x15a:\x87W`\0\x80\xFD[a:\x8Fa6'V[\x90P\x815\x81R` \x80\x83\x015a:\xA4\x81a1\xA3V[\x80\x82\x84\x01RP`@\x83\x015`@\x83\x01R``\x83\x015``\x83\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a:\xD8W`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a:\xE9W`\0\x80\xFD[\x805a:\xF7a8\x82\x82a8\x04V[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a;\x16W`\0\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a;4W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a;\x1BV[`\x80\x86\x01RP\x92\x95\x94PPPPPV[`\0` \x82\x84\x03\x12\x15a;VW`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a;nW`\0\x80\xFD[\x90\x83\x01\x90`\xE0\x82\x86\x03\x12\x15a;\x82W`\0\x80\xFD[a;\x8Aa6JV[\x825\x82\x81\x11\x15a;\x99W`\0\x80\xFD[a;\xA5\x87\x82\x86\x01a7mV[\x82RPa;\xB4` \x84\x01a1\xC5V[` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015\x82\x81\x11\x15a;\xD5W`\0\x80\xFD[a;\xE1\x87\x82\x86\x01a8\xD4V[``\x83\x01RP`\x80\x83\x015\x82\x81\x11\x15a;\xF9W`\0\x80\xFD[a<\x05\x87\x82\x86\x01a9MV[`\x80\x83\x01RP`\xA0\x83\x015\x82\x81\x11\x15a<\x1DW`\0\x80\xFD[a<)\x87\x82\x86\x01a:uV[`\xA0\x83\x01RP`\xC0\x83\x015\x82\x81\x11\x15a<AW`\0\x80\xFD[a<M\x87\x82\x86\x01a6\xDFV[`\xC0\x83\x01RP\x95\x94PPPPPV[\x7FV3DutchInput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\r\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1B\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`/\x82\x01R\x7Fuint256 maxAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`I\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`[\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`{\x82\x01R`\0`|\x82\x01a#\x0EV[\x7FV3DutchOutput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0E\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1C\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`0\x82\x01R\x7Faddress recipient,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`J\x82\x01R\x7Fuint256 minAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\\\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`n\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x8E\x82\x01R`\0`\x8F\x82\x01a#\x0EV[`\0\x86Qa>\xB8\x81\x84` \x8B\x01a2\x85V[\x86Q\x90\x83\x01\x90a>\xCC\x81\x83` \x8B\x01a2\x85V[\x86Q\x91\x01\x90a>\xDF\x81\x83` \x8A\x01a2\x85V[\x85Q\x91\x01\x90a>\xF2\x81\x83` \x89\x01a2\x85V[\x84Q\x91\x01\x90a?\x05\x81\x83` \x88\x01a2\x85V[\x01\x97\x96PPPPPPPV[` \x81R`\0a-*` \x83\x01\x84a3^V[`\0` \x80\x83\x85\x03\x12\x15a?7W`\0\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a?NW`\0\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a?_W`\0\x80\xFD[\x80Qa?ma8\x82\x82a8\x04V[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a?\x8CW`\0\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a?\xE8W\x80\x85\x8A\x03\x12\x15a?\xA9W`\0\x80\x81\xFD[a?\xB1a6mV[\x85Qa?\xBC\x81a1\xA3V[\x81R\x85\x87\x01Q\x87\x82\x01R`@\x80\x87\x01Qa?\xD5\x81a1\xA3V[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a?\x91V[P\x97\x96PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[\x80\x82\x01\x80\x82\x11\x15a#\x0EWa#\x0Ea?\xF4V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R`@` \x82\x01R`\0a%Z`@\x83\x01\x84a3^V[\x7FV3DutchOrder witness)\0\0\0\0\0\0\0\0\0\0\0\x81R`\0`\x15\x88Q` a@\x9F\x82\x84\x87\x01\x83\x8E\x01a2\x85V[\x89Q\x91\x85\x01\x91a@\xB4\x81\x85\x85\x01\x84\x8E\x01a2\x85V[\x89Q\x92\x01\x91a@\xC8\x81\x85\x85\x01\x84\x8D\x01a2\x85V[\x88Q\x92\x01\x91a@\xDC\x81\x85\x85\x01\x84\x8C\x01a2\x85V[\x87Q\x92\x01\x91a@\xF0\x81\x85\x85\x01\x84\x8B\x01a2\x85V[\x86Q\x92\x01\x91aA\x04\x81\x85\x85\x01\x84\x8A\x01a2\x85V[\x91\x90\x91\x01\x90\x91\x01\x99\x98PPPPPPPPPV[`\0a\x01@aAH\x83\x8AQ\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[` \x89\x01Q`@\x84\x01R`@\x89\x01Q``\x84\x01RaA\x89`\x80\x84\x01\x89\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`\xC0\x84\x01R\x85`\xE0\x84\x01R\x80a\x01\0\x84\x01RaA\xBE\x81\x84\x01\x86a2\xA9V[\x90P\x82\x81\x03a\x01 \x84\x01Ra%\xE1\x81\x85a2\xA9V[`\0\x83QaA\xE5\x81\x84` \x88\x01a2\x85V[\x83Q\x90\x83\x01\x90aA\xF9\x81\x83` \x88\x01a2\x85V[\x01\x94\x93PPPPV[`\0` \x80\x83R`\xC0\x83\x01\x84Q\x82\x85\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x86\x01Q\x16`@\x85\x01R`@\x85\x01Q``\x85\x01R``\x85\x01Q`\x80\x85\x01R`\x80\x85\x01Q`\xA0\x80\x86\x01R\x81\x81Q\x80\x84R`\xE0\x87\x01\x91P\x84\x83\x01\x93P`\0\x92P[\x80\x83\x10\x15a:jW\x83Q\x82R\x92\x84\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x84\x01\x90aBgV[\x83\x81R\x82` \x82\x01R`\0\x82QaB\xA5\x81`@\x85\x01` \x87\x01a2\x85V[\x91\x90\x91\x01`@\x01\x94\x93PPPPV[`\0\x80`@\x83\x85\x03\x12\x15aB\xC7W`\0\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x81\x81\x03\x81\x81\x11\x15a#\x0EWa#\x0Ea?\xF4V[\x81\x81\x03`\0\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15aC\x0BWaC\x0Ba?\xF4V[P\x92\x91PPV[`\0\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03aCCWaCCa?\xF4V[P`\0\x03\x90V[\x80\x82\x01\x82\x81\x12`\0\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15aCjWaCja?\xF4V[PP\x92\x91PPV[\x81Q`\0\x90\x82\x90` \x80\x86\x01\x84[\x83\x81\x10\x15aC\x9CW\x81Q\x85R\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01aC\x80V[P\x92\x96\x95PPPPPPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15aC\x0BWaC\x0Ba?\xF4V[`\0a\xFF\xFF\x80\x83\x16\x81\x81\x03aC\xDAWaC\xDAa?\xF4V[`\x01\x01\x93\x92PPPV\xFETokenPermissions(address token,uint256 amount)OrderInfo(address reactor,address swapper,uint256 nonce,uint256 deadline,address additionalValidationContract,bytes additionalValidationData)\xA2dipfsX\"\x12 \xA80\x88\xCF\x8C\xE7sJ\x1AO\xD4s\xE1]\xA5\xDD@\xDE\x92/\x9F#|\xDC\xD5\xA3%\x8B\xDB!\xAF\x85dsolcC\0\x08\x18\x003",
    );
    /**```solidity
struct SignedOrder { bytes order; bytes sig; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct SignedOrder {
        pub order: alloy::sol_types::private::Bytes,
        pub sig: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SignedOrder> for UnderlyingRustTuple<'_> {
            fn from(value: SignedOrder) -> Self {
                (value.order, value.sig)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SignedOrder {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    order: tuple.0,
                    sig: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SignedOrder {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SignedOrder {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.order,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.sig,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SignedOrder {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SignedOrder {
            const NAME: &'static str = "SignedOrder";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SignedOrder(bytes order,bytes sig)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.order,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.sig,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SignedOrder {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.order,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sig,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.order,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sig,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `DeadlineReached()` and selector `0xb08ce5b3`.
```solidity
error DeadlineReached();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DeadlineReached {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DeadlineReached> for UnderlyingRustTuple<'_> {
            fn from(value: DeadlineReached) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DeadlineReached {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DeadlineReached {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DeadlineReached()";
            const SELECTOR: [u8; 4] = [176u8, 140u8, 229u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `DuplicateFeeOutput(address)` and selector `0xfff08303`.
```solidity
error DuplicateFeeOutput(address duplicateToken);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct DuplicateFeeOutput {
        pub duplicateToken: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DuplicateFeeOutput> for UnderlyingRustTuple<'_> {
            fn from(value: DuplicateFeeOutput) -> Self {
                (value.duplicateToken,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DuplicateFeeOutput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { duplicateToken: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DuplicateFeeOutput {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DuplicateFeeOutput(address)";
            const SELECTOR: [u8; 4] = [255u8, 240u8, 131u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.duplicateToken,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `FeeTooLarge(address,uint256,address)` and selector `0x82e75656`.
```solidity
error FeeTooLarge(address token, uint256 amount, address recipient);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FeeTooLarge {
        pub token: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::U256,
        pub recipient: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FeeTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: FeeTooLarge) -> Self {
                (value.token, value.amount, value.recipient)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FeeTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    token: tuple.0,
                    amount: tuple.1,
                    recipient: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FeeTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FeeTooLarge(address,uint256,address)";
            const SELECTOR: [u8; 4] = [130u8, 231u8, 86u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `IndexOutOfBounds()` and selector `0x4e23d035`.
```solidity
error IndexOutOfBounds();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct IndexOutOfBounds {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<IndexOutOfBounds> for UnderlyingRustTuple<'_> {
            fn from(value: IndexOutOfBounds) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for IndexOutOfBounds {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for IndexOutOfBounds {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IndexOutOfBounds()";
            const SELECTOR: [u8; 4] = [78u8, 35u8, 208u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InputAndOutputFees()` and selector `0xedc7e2e4`.
```solidity
error InputAndOutputFees();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InputAndOutputFees {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InputAndOutputFees> for UnderlyingRustTuple<'_> {
            fn from(value: InputAndOutputFees) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InputAndOutputFees {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InputAndOutputFees {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InputAndOutputFees()";
            const SELECTOR: [u8; 4] = [237u8, 199u8, 226u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCosignature()` and selector `0xd7815be1`.
```solidity
error InvalidCosignature();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidCosignature {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCosignature> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCosignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCosignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCosignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCosignature()";
            const SELECTOR: [u8; 4] = [215u8, 129u8, 91u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCosignerInput()` and selector `0xac9143e7`.
```solidity
error InvalidCosignerInput();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidCosignerInput {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCosignerInput> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCosignerInput) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCosignerInput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCosignerInput {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCosignerInput()";
            const SELECTOR: [u8; 4] = [172u8, 145u8, 67u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCosignerOutput()` and selector `0xa305df82`.
```solidity
error InvalidCosignerOutput();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidCosignerOutput {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCosignerOutput> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCosignerOutput) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCosignerOutput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCosignerOutput {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCosignerOutput()";
            const SELECTOR: [u8; 4] = [163u8, 5u8, 223u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidDecayCurve()` and selector `0x0e996766`.
```solidity
error InvalidDecayCurve();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidDecayCurve {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidDecayCurve> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidDecayCurve) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidDecayCurve {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidDecayCurve {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidDecayCurve()";
            const SELECTOR: [u8; 4] = [14u8, 153u8, 103u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidFeeToken(address)` and selector `0xeddf07f5`.
```solidity
error InvalidFeeToken(address feeToken);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidFeeToken {
        pub feeToken: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidFeeToken> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidFeeToken) -> Self {
                (value.feeToken,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidFeeToken {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { feeToken: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidFeeToken {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidFeeToken(address)";
            const SELECTOR: [u8; 4] = [237u8, 223u8, 7u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.feeToken,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidReactor()` and selector `0x4ddf4a64`.
```solidity
error InvalidReactor();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidReactor {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidReactor> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidReactor) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidReactor {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidReactor {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidReactor()";
            const SELECTOR: [u8; 4] = [77u8, 223u8, 74u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NativeTransferFailed()` and selector `0xf4b3b1bc`.
```solidity
error NativeTransferFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NativeTransferFailed {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NativeTransferFailed> for UnderlyingRustTuple<'_> {
            fn from(value: NativeTransferFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NativeTransferFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NativeTransferFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NativeTransferFailed()";
            const SELECTOR: [u8; 4] = [244u8, 179u8, 177u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoExclusiveOverride()` and selector `0xb9ec1e96`.
```solidity
error NoExclusiveOverride();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NoExclusiveOverride {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoExclusiveOverride> for UnderlyingRustTuple<'_> {
            fn from(value: NoExclusiveOverride) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoExclusiveOverride {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoExclusiveOverride {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoExclusiveOverride()";
            const SELECTOR: [u8; 4] = [185u8, 236u8, 30u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `Fill(bytes32,address,address,uint256)` and selector `0x78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66`.
```solidity
event Fill(bytes32 indexed orderHash, address indexed filler, address indexed swapper, uint256 nonce);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct Fill {
        #[allow(missing_docs)]
        pub orderHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub filler: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub swapper: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Fill {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Fill(bytes32,address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8,
                173u8,
                126u8,
                192u8,
                233u8,
                248u8,
                158u8,
                116u8,
                1u8,
                42u8,
                250u8,
                88u8,
                115u8,
                139u8,
                107u8,
                102u8,
                28u8,
                2u8,
                76u8,
                176u8,
                253u8,
                24u8,
                94u8,
                226u8,
                246u8,
                22u8,
                192u8,
                162u8,
                137u8,
                36u8,
                189u8,
                102u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    orderHash: topics.1,
                    filler: topics.2,
                    swapper: topics.3,
                    nonce: data.0,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.orderHash.clone(),
                    self.filler.clone(),
                    self.swapper.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.orderHash);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.filler,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.swapper,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Fill {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Fill> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Fill) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed user, address indexed newOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    user: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone(), self.newOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProtocolFeeControllerSet(address,address)` and selector `0xb904ae9529e373e48bc82df4326cceaf1b4c472babf37f5b7dec46fecc6b53e0`.
```solidity
event ProtocolFeeControllerSet(address oldFeeController, address newFeeController);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    #[derive(Clone)]
    pub struct ProtocolFeeControllerSet {
        #[allow(missing_docs)]
        pub oldFeeController: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newFeeController: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProtocolFeeControllerSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ProtocolFeeControllerSet(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8,
                4u8,
                174u8,
                149u8,
                41u8,
                227u8,
                115u8,
                228u8,
                139u8,
                200u8,
                45u8,
                244u8,
                50u8,
                108u8,
                206u8,
                175u8,
                27u8,
                76u8,
                71u8,
                43u8,
                171u8,
                243u8,
                127u8,
                91u8,
                125u8,
                236u8,
                70u8,
                254u8,
                204u8,
                107u8,
                83u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldFeeController: data.0,
                    newFeeController: data.1,
                }
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.oldFeeController,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newFeeController,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProtocolFeeControllerSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProtocolFeeControllerSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ProtocolFeeControllerSet,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _permit2, address _protocolFeeOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _permit2: alloy::sol_types::private::Address,
        pub _protocolFeeOwner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._permit2, value._protocolFeeOwner)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _permit2: tuple.0,
                        _protocolFeeOwner: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permit2,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._protocolFeeOwner,
                    ),
                )
            }
        }
    };
    /**Function with signature `execute((bytes,bytes))` and selector `0x3f62192e`.
```solidity
function execute(SignedOrder memory order) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeCall {
        pub order: <SignedOrder as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`execute((bytes,bytes))`](executeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SignedOrder,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SignedOrder as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCall) -> Self {
                    (value.order,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { order: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCall {
            type Parameters<'a> = (SignedOrder,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "execute((bytes,bytes))";
            const SELECTOR: [u8; 4] = [63u8, 98u8, 25u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SignedOrder as alloy_sol_types::SolType>::tokenize(&self.order),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBatch((bytes,bytes)[])` and selector `0x0d7a16c3`.
```solidity
function executeBatch(SignedOrder[] memory orders) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeBatchCall {
        pub orders: alloy::sol_types::private::Vec<
            <SignedOrder as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`executeBatch((bytes,bytes)[])`](executeBatchCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeBatchReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<SignedOrder>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <SignedOrder as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchCall) -> Self {
                    (value.orders,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBatchCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { orders: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBatchReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBatchCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<SignedOrder>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBatchReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBatch((bytes,bytes)[])";
            const SELECTOR: [u8; 4] = [13u8, 122u8, 22u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        SignedOrder,
                    > as alloy_sol_types::SolType>::tokenize(&self.orders),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBatchWithCallback((bytes,bytes)[],bytes)` and selector `0x13fb72c7`.
```solidity
function executeBatchWithCallback(SignedOrder[] memory orders, bytes memory callbackData) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeBatchWithCallbackCall {
        pub orders: alloy::sol_types::private::Vec<
            <SignedOrder as alloy::sol_types::SolType>::RustType,
        >,
        pub callbackData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeBatchWithCallback((bytes,bytes)[],bytes)`](executeBatchWithCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeBatchWithCallbackReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<SignedOrder>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <SignedOrder as alloy::sol_types::SolType>::RustType,
                >,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchWithCallbackCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchWithCallbackCall) -> Self {
                    (value.orders, value.callbackData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeBatchWithCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        orders: tuple.0,
                        callbackData: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchWithCallbackReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchWithCallbackReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeBatchWithCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBatchWithCallbackCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<SignedOrder>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBatchWithCallbackReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBatchWithCallback((bytes,bytes)[],bytes)";
            const SELECTOR: [u8; 4] = [19u8, 251u8, 114u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        SignedOrder,
                    > as alloy_sol_types::SolType>::tokenize(&self.orders),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callbackData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeWithCallback((bytes,bytes),bytes)` and selector `0x0d335884`.
```solidity
function executeWithCallback(SignedOrder memory order, bytes memory callbackData) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeWithCallbackCall {
        pub order: <SignedOrder as alloy::sol_types::SolType>::RustType,
        pub callbackData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeWithCallback((bytes,bytes),bytes)`](executeWithCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeWithCallbackReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                SignedOrder,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SignedOrder as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeWithCallbackCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeWithCallbackCall) -> Self {
                    (value.order, value.callbackData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeWithCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        order: tuple.0,
                        callbackData: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeWithCallbackReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeWithCallbackReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeWithCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeWithCallbackCall {
            type Parameters<'a> = (SignedOrder, alloy::sol_types::sol_data::Bytes);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeWithCallbackReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeWithCallback((bytes,bytes),bytes)";
            const SELECTOR: [u8; 4] = [13u8, 51u8, 88u8, 132u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <SignedOrder as alloy_sol_types::SolType>::tokenize(&self.order),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callbackData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `feeController()` and selector `0x6999b377`.
```solidity
function feeController() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct feeControllerCall {}
    ///Container type for the return parameters of the [`feeController()`](feeControllerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct feeControllerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeControllerCall> for UnderlyingRustTuple<'_> {
                fn from(value: feeControllerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeControllerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeControllerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: feeControllerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeControllerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeControllerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeControllerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "feeController()";
            const SELECTOR: [u8; 4] = [105u8, 153u8, 179u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permit2()` and selector `0x12261ee7`.
```solidity
function permit2() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct permit2Call {}
    ///Container type for the return parameters of the [`permit2()`](permit2Call) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct permit2Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permit2Call> for UnderlyingRustTuple<'_> {
                fn from(value: permit2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permit2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permit2Return> for UnderlyingRustTuple<'_> {
                fn from(value: permit2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permit2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permit2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permit2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit2()";
            const SELECTOR: [u8; 4] = [18u8, 38u8, 30u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setProtocolFeeController(address)` and selector `0x2d771389`.
```solidity
function setProtocolFeeController(address _newFeeController) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setProtocolFeeControllerCall {
        pub _newFeeController: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setProtocolFeeController(address)`](setProtocolFeeControllerCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct setProtocolFeeControllerReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeControllerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeControllerCall) -> Self {
                    (value._newFeeController,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setProtocolFeeControllerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newFeeController: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeControllerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeControllerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setProtocolFeeControllerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setProtocolFeeControllerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setProtocolFeeControllerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setProtocolFeeController(address)";
            const SELECTOR: [u8; 4] = [45u8, 119u8, 19u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newFeeController,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`V3DutchOrderReactor`](self) function calls.
    pub enum V3DutchOrderReactorCalls {
        execute(executeCall),
        executeBatch(executeBatchCall),
        executeBatchWithCallback(executeBatchWithCallbackCall),
        executeWithCallback(executeWithCallbackCall),
        feeController(feeControllerCall),
        owner(ownerCall),
        permit2(permit2Call),
        setProtocolFeeController(setProtocolFeeControllerCall),
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl V3DutchOrderReactorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 51u8, 88u8, 132u8],
            [13u8, 122u8, 22u8, 195u8],
            [18u8, 38u8, 30u8, 231u8],
            [19u8, 251u8, 114u8, 199u8],
            [45u8, 119u8, 19u8, 137u8],
            [63u8, 98u8, 25u8, 46u8],
            [105u8, 153u8, 179u8, 119u8],
            [141u8, 165u8, 203u8, 91u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for V3DutchOrderReactorCalls {
        const NAME: &'static str = "V3DutchOrderReactorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::execute(_) => <executeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::executeBatch(_) => {
                    <executeBatchCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeBatchWithCallback(_) => {
                    <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeWithCallback(_) => {
                    <executeWithCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::feeController(_) => {
                    <feeControllerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permit2(_) => <permit2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setProtocolFeeController(_) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls>] = &[
                {
                    fn executeWithCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeWithCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::executeWithCallback)
                    }
                    executeWithCallback
                },
                {
                    fn executeBatch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeBatchCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::executeBatch)
                    }
                    executeBatch
                },
                {
                    fn permit2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <permit2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::permit2)
                    }
                    permit2
                },
                {
                    fn executeBatchWithCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::executeBatchWithCallback)
                    }
                    executeBatchWithCallback
                },
                {
                    fn setProtocolFeeController(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::setProtocolFeeController)
                    }
                    setProtocolFeeController
                },
                {
                    fn execute(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::execute)
                    }
                    execute
                },
                {
                    fn feeController(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <feeControllerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::feeController)
                    }
                    feeController
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeBatch(inner) => {
                    <executeBatchCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeBatchWithCallback(inner) => {
                    <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeWithCallback(inner) => {
                    <executeWithCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::feeController(inner) => {
                    <feeControllerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permit2(inner) => {
                    <permit2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setProtocolFeeController(inner) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::executeBatch(inner) => {
                    <executeBatchCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeBatchWithCallback(inner) => {
                    <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeWithCallback(inner) => {
                    <executeWithCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::feeController(inner) => {
                    <feeControllerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permit2(inner) => {
                    <permit2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setProtocolFeeController(inner) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`V3DutchOrderReactor`](self) custom errors.
    pub enum V3DutchOrderReactorErrors {
        DeadlineReached(DeadlineReached),
        DuplicateFeeOutput(DuplicateFeeOutput),
        FeeTooLarge(FeeTooLarge),
        IndexOutOfBounds(IndexOutOfBounds),
        InputAndOutputFees(InputAndOutputFees),
        InvalidCosignature(InvalidCosignature),
        InvalidCosignerInput(InvalidCosignerInput),
        InvalidCosignerOutput(InvalidCosignerOutput),
        InvalidDecayCurve(InvalidDecayCurve),
        InvalidFeeToken(InvalidFeeToken),
        InvalidReactor(InvalidReactor),
        NativeTransferFailed(NativeTransferFailed),
        NoExclusiveOverride(NoExclusiveOverride),
    }
    #[automatically_derived]
    impl V3DutchOrderReactorErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [14u8, 153u8, 103u8, 102u8],
            [77u8, 223u8, 74u8, 100u8],
            [78u8, 35u8, 208u8, 53u8],
            [130u8, 231u8, 86u8, 86u8],
            [163u8, 5u8, 223u8, 130u8],
            [172u8, 145u8, 67u8, 231u8],
            [176u8, 140u8, 229u8, 179u8],
            [185u8, 236u8, 30u8, 150u8],
            [215u8, 129u8, 91u8, 225u8],
            [237u8, 199u8, 226u8, 228u8],
            [237u8, 223u8, 7u8, 245u8],
            [244u8, 179u8, 177u8, 188u8],
            [255u8, 240u8, 131u8, 3u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for V3DutchOrderReactorErrors {
        const NAME: &'static str = "V3DutchOrderReactorErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DeadlineReached(_) => {
                    <DeadlineReached as alloy_sol_types::SolError>::SELECTOR
                }
                Self::DuplicateFeeOutput(_) => {
                    <DuplicateFeeOutput as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FeeTooLarge(_) => {
                    <FeeTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::IndexOutOfBounds(_) => {
                    <IndexOutOfBounds as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InputAndOutputFees(_) => {
                    <InputAndOutputFees as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCosignature(_) => {
                    <InvalidCosignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCosignerInput(_) => {
                    <InvalidCosignerInput as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCosignerOutput(_) => {
                    <InvalidCosignerOutput as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidDecayCurve(_) => {
                    <InvalidDecayCurve as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidFeeToken(_) => {
                    <InvalidFeeToken as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidReactor(_) => {
                    <InvalidReactor as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NativeTransferFailed(_) => {
                    <NativeTransferFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoExclusiveOverride(_) => {
                    <NoExclusiveOverride as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors>] = &[
                {
                    fn InvalidDecayCurve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidDecayCurve as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidDecayCurve)
                    }
                    InvalidDecayCurve
                },
                {
                    fn InvalidReactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidReactor as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidReactor)
                    }
                    InvalidReactor
                },
                {
                    fn IndexOutOfBounds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <IndexOutOfBounds as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::IndexOutOfBounds)
                    }
                    IndexOutOfBounds
                },
                {
                    fn FeeTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <FeeTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::FeeTooLarge)
                    }
                    FeeTooLarge
                },
                {
                    fn InvalidCosignerOutput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidCosignerOutput as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidCosignerOutput)
                    }
                    InvalidCosignerOutput
                },
                {
                    fn InvalidCosignerInput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidCosignerInput as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidCosignerInput)
                    }
                    InvalidCosignerInput
                },
                {
                    fn DeadlineReached(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <DeadlineReached as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::DeadlineReached)
                    }
                    DeadlineReached
                },
                {
                    fn NoExclusiveOverride(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <NoExclusiveOverride as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::NoExclusiveOverride)
                    }
                    NoExclusiveOverride
                },
                {
                    fn InvalidCosignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidCosignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidCosignature)
                    }
                    InvalidCosignature
                },
                {
                    fn InputAndOutputFees(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InputAndOutputFees as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InputAndOutputFees)
                    }
                    InputAndOutputFees
                },
                {
                    fn InvalidFeeToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidFeeToken as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidFeeToken)
                    }
                    InvalidFeeToken
                },
                {
                    fn NativeTransferFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <NativeTransferFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::NativeTransferFailed)
                    }
                    NativeTransferFailed
                },
                {
                    fn DuplicateFeeOutput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <DuplicateFeeOutput as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::DuplicateFeeOutput)
                    }
                    DuplicateFeeOutput
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DeadlineReached(inner) => {
                    <DeadlineReached as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DuplicateFeeOutput(inner) => {
                    <DuplicateFeeOutput as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FeeTooLarge(inner) => {
                    <FeeTooLarge as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::IndexOutOfBounds(inner) => {
                    <IndexOutOfBounds as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InputAndOutputFees(inner) => {
                    <InputAndOutputFees as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCosignature(inner) => {
                    <InvalidCosignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCosignerInput(inner) => {
                    <InvalidCosignerInput as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCosignerOutput(inner) => {
                    <InvalidCosignerOutput as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidDecayCurve(inner) => {
                    <InvalidDecayCurve as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidFeeToken(inner) => {
                    <InvalidFeeToken as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidReactor(inner) => {
                    <InvalidReactor as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NativeTransferFailed(inner) => {
                    <NativeTransferFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoExclusiveOverride(inner) => {
                    <NoExclusiveOverride as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DeadlineReached(inner) => {
                    <DeadlineReached as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DuplicateFeeOutput(inner) => {
                    <DuplicateFeeOutput as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FeeTooLarge(inner) => {
                    <FeeTooLarge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::IndexOutOfBounds(inner) => {
                    <IndexOutOfBounds as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InputAndOutputFees(inner) => {
                    <InputAndOutputFees as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCosignature(inner) => {
                    <InvalidCosignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCosignerInput(inner) => {
                    <InvalidCosignerInput as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCosignerOutput(inner) => {
                    <InvalidCosignerOutput as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidDecayCurve(inner) => {
                    <InvalidDecayCurve as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidFeeToken(inner) => {
                    <InvalidFeeToken as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidReactor(inner) => {
                    <InvalidReactor as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NativeTransferFailed(inner) => {
                    <NativeTransferFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoExclusiveOverride(inner) => {
                    <NoExclusiveOverride as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`V3DutchOrderReactor`](self) events.
    pub enum V3DutchOrderReactorEvents {
        Fill(Fill),
        OwnershipTransferred(OwnershipTransferred),
        ProtocolFeeControllerSet(ProtocolFeeControllerSet),
    }
    #[automatically_derived]
    impl V3DutchOrderReactorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                120u8,
                173u8,
                126u8,
                192u8,
                233u8,
                248u8,
                158u8,
                116u8,
                1u8,
                42u8,
                250u8,
                88u8,
                115u8,
                139u8,
                107u8,
                102u8,
                28u8,
                2u8,
                76u8,
                176u8,
                253u8,
                24u8,
                94u8,
                226u8,
                246u8,
                22u8,
                192u8,
                162u8,
                137u8,
                36u8,
                189u8,
                102u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                185u8,
                4u8,
                174u8,
                149u8,
                41u8,
                227u8,
                115u8,
                228u8,
                139u8,
                200u8,
                45u8,
                244u8,
                50u8,
                108u8,
                206u8,
                175u8,
                27u8,
                76u8,
                71u8,
                43u8,
                171u8,
                243u8,
                127u8,
                91u8,
                125u8,
                236u8,
                70u8,
                254u8,
                204u8,
                107u8,
                83u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for V3DutchOrderReactorEvents {
        const NAME: &'static str = "V3DutchOrderReactorEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Fill as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Fill as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Fill)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <ProtocolFeeControllerSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProtocolFeeControllerSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProtocolFeeControllerSet)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for V3DutchOrderReactorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Fill(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProtocolFeeControllerSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Fill(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProtocolFeeControllerSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`V3DutchOrderReactor`](self) contract instance.

See the [wrapper's documentation](`V3DutchOrderReactorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> V3DutchOrderReactorInstance<T, P, N> {
        V3DutchOrderReactorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _permit2: alloy::sol_types::private::Address,
        _protocolFeeOwner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<V3DutchOrderReactorInstance<T, P, N>>,
    > {
        V3DutchOrderReactorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _permit2, _protocolFeeOwner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _permit2: alloy::sol_types::private::Address,
        _protocolFeeOwner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        V3DutchOrderReactorInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _permit2, _protocolFeeOwner)
    }
    /**A [`V3DutchOrderReactor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`V3DutchOrderReactor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct V3DutchOrderReactorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for V3DutchOrderReactorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("V3DutchOrderReactorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > V3DutchOrderReactorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`V3DutchOrderReactor`](self) contract instance.

See the [wrapper's documentation](`V3DutchOrderReactorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _permit2: alloy::sol_types::private::Address,
            _protocolFeeOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<V3DutchOrderReactorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _permit2,
                _protocolFeeOwner,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _permit2: alloy::sol_types::private::Address,
            _protocolFeeOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _permit2,
                            _protocolFeeOwner,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> V3DutchOrderReactorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> V3DutchOrderReactorInstance<T, P, N> {
            V3DutchOrderReactorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > V3DutchOrderReactorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`execute`] function.
        pub fn execute(
            &self,
            order: <SignedOrder as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeCall, N> {
            self.call_builder(&executeCall { order })
        }
        ///Creates a new call builder for the [`executeBatch`] function.
        pub fn executeBatch(
            &self,
            orders: alloy::sol_types::private::Vec<
                <SignedOrder as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBatchCall, N> {
            self.call_builder(&executeBatchCall { orders })
        }
        ///Creates a new call builder for the [`executeBatchWithCallback`] function.
        pub fn executeBatchWithCallback(
            &self,
            orders: alloy::sol_types::private::Vec<
                <SignedOrder as alloy::sol_types::SolType>::RustType,
            >,
            callbackData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBatchWithCallbackCall, N> {
            self.call_builder(
                &executeBatchWithCallbackCall {
                    orders,
                    callbackData,
                },
            )
        }
        ///Creates a new call builder for the [`executeWithCallback`] function.
        pub fn executeWithCallback(
            &self,
            order: <SignedOrder as alloy::sol_types::SolType>::RustType,
            callbackData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeWithCallbackCall, N> {
            self.call_builder(
                &executeWithCallbackCall {
                    order,
                    callbackData,
                },
            )
        }
        ///Creates a new call builder for the [`feeController`] function.
        pub fn feeController(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, feeControllerCall, N> {
            self.call_builder(&feeControllerCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permit2`] function.
        pub fn permit2(&self) -> alloy_contract::SolCallBuilder<T, &P, permit2Call, N> {
            self.call_builder(&permit2Call {})
        }
        ///Creates a new call builder for the [`setProtocolFeeController`] function.
        pub fn setProtocolFeeController(
            &self,
            _newFeeController: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setProtocolFeeControllerCall, N> {
            self.call_builder(
                &setProtocolFeeControllerCall {
                    _newFeeController,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > V3DutchOrderReactorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Fill`] event.
        pub fn Fill_filter(&self) -> alloy_contract::Event<T, &P, Fill, N> {
            self.event_filter::<Fill>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`ProtocolFeeControllerSet`] event.
        pub fn ProtocolFeeControllerSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProtocolFeeControllerSet, N> {
            self.event_filter::<ProtocolFeeControllerSet>()
        }
    }
}
