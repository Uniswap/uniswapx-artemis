/**

Generated by the following Solidity interface...
```solidity
interface V3DutchOrderReactor {
    struct SignedOrder {
        bytes order;
        bytes sig;
    }

    error DeadlineReached();
    error DuplicateFeeOutput(address duplicateToken);
    error FeeTooLarge(address token, uint256 amount, address recipient);
    error IndexOutOfBounds();
    error InputAndOutputFees();
    error InvalidCosignature();
    error InvalidCosignerInput();
    error InvalidCosignerOutput();
    error InvalidDecayCurve();
    error InvalidFeeToken(address feeToken);
    error InvalidReactor();
    error NativeTransferFailed();
    error NoExclusiveOverride();

    event Fill(bytes32 indexed orderHash, address indexed filler, address indexed swapper, uint256 nonce);
    event OwnershipTransferred(address indexed user, address indexed newOwner);
    event ProtocolFeeControllerSet(address oldFeeController, address newFeeController);

    constructor(address _permit2, address _protocolFeeOwner);

    receive() external payable;

    function execute(SignedOrder memory order) external payable;
    function executeBatch(SignedOrder[] memory orders) external payable;
    function executeBatchWithCallback(SignedOrder[] memory orders, bytes memory callbackData) external payable;
    function executeWithCallback(SignedOrder memory order, bytes memory callbackData) external payable;
    function feeController() external view returns (address);
    function owner() external view returns (address);
    function permit2() external view returns (address);
    function setProtocolFeeController(address _newFeeController) external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_permit2",
        "type": "address",
        "internalType": "contract IPermit2"
      },
      {
        "name": "_protocolFeeOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "execute",
    "inputs": [
      {
        "name": "order",
        "type": "tuple",
        "internalType": "struct SignedOrder",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeBatch",
    "inputs": [
      {
        "name": "orders",
        "type": "tuple[]",
        "internalType": "struct SignedOrder[]",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeBatchWithCallback",
    "inputs": [
      {
        "name": "orders",
        "type": "tuple[]",
        "internalType": "struct SignedOrder[]",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      },
      {
        "name": "callbackData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "executeWithCallback",
    "inputs": [
      {
        "name": "order",
        "type": "tuple",
        "internalType": "struct SignedOrder",
        "components": [
          {
            "name": "order",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "sig",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      },
      {
        "name": "callbackData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "feeController",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IProtocolFeeController"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermit2"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setProtocolFeeController",
    "inputs": [
      {
        "name": "_newFeeController",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Fill",
    "inputs": [
      {
        "name": "orderHash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "filler",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "swapper",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProtocolFeeControllerSet",
    "inputs": [
      {
        "name": "oldFeeController",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "newFeeController",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "DeadlineReached",
    "inputs": []
  },
  {
    "type": "error",
    "name": "DuplicateFeeOutput",
    "inputs": [
      {
        "name": "duplicateToken",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "FeeTooLarge",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "recipient",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "IndexOutOfBounds",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InputAndOutputFees",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCosignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCosignerInput",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidCosignerOutput",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidDecayCurve",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidFeeToken",
    "inputs": [
      {
        "name": "feeToken",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidReactor",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NativeTransferFailed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoExclusiveOverride",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod V3DutchOrderReactor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234801562000010575f80fd5b506040516200458f3803806200458f833981016040819052620000339162000164565b5f80546001600160a01b0319166001600160a01b03831690811782556040518492849283928392907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506001600255506001600160a01b031660805261a4b0194601620000bd576001600160401b0362000961620000de60201b171660a052620000d6565b6001600160401b03620009d56200014860201b171660a0525b5050620001b9565b5f60646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200011d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620001439190620001a1565b905090565b4390565b6001600160a01b038116811462000161575f80fd5b50565b5f806040838503121562000176575f80fd5b825162000183816200014c565b602084015190925062000196816200014c565b809150509250929050565b5f60208284031215620001b2575f80fd5b5051919050565b60805160a0516143ae620001e15f395f610aff01525f818160da0152611ace01526143ae5ff3fe608060405260043610610096575f3560e01c80632d771389116100665780636999b3771161004c5780636999b3771461016a5780638da5cb5b14610196578063f2fde38b146101c1575f80fd5b80632d771389146101385780633f62192e14610157575f80fd5b80630d335884146100a15780630d7a16c3146100b657806312261ee7146100c957806313fb72c714610125575f80fd5b3661009d57005b5f80fd5b6100b46100af366004612f8f565b6101e0565b005b6100b46100c4366004613034565b610351565b3480156100d4575f80fd5b506100fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b4610133366004613073565b6104af565b348015610143575f80fd5b506100b461015236600461310b565b610665565b6100b4610165366004613126565b610770565b348015610175575f80fd5b506001546100fc9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101a1575f80fd5b505f546100fc9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101cc575f80fd5b506100b46101db36600461310b565b610872565b6101e86109d9565b6040805160018082528183019092525f91816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816101fe5790505090506102a584610a4a565b815f815181106102b7576102b7613185565b60200260200101819052506102cb81610bf5565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061030b90849087908790600401613380565b5f604051808303815f87803b158015610322575f80fd5b505af1158015610334573d5f803e3d5ffd5b5050505061034181610c44565b5061034c6001600255565b505050565b6103596109d9565b805f8167ffffffffffffffff81111561037457610374613158565b60405190808252806020026020018201604052801561042e57816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816103925790505b5090505f5b8281101561048c5761046785858381811061045057610450613185565b90506020028101906104629190613443565b610a4a565b82828151811061047957610479613185565b6020908102919091010152600101610433565b5061049681610bf5565b61049f81610c44565b50506104ab6001600255565b5050565b6104b76109d9565b825f8167ffffffffffffffff8111156104d2576104d2613158565b60405190808252806020026020018201604052801561058c57816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816104f05790505b5090505f5b828110156105d3576105ae87878381811061045057610450613185565b8282815181106105c0576105c0613185565b6020908102919091010152600101610591565b506105dd81610bf5565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061061d90849088908890600401613380565b5f604051808303815f87803b158015610634575f80fd5b505af1158015610646573d5f803e3d5ffd5b5050505061065381610c44565b505061065f6001600255565b50505050565b5f5473ffffffffffffffffffffffffffffffffffffffff1633146106ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527fb904ae9529e373e48bc82df4326cceaf1b4c472babf37f5b7dec46fecc6b53e0910160405180910390a15050565b6107786109d9565b6040805160018082528183019092525f91816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161078e57905050905061083582610a4a565b815f8151811061084757610847613185565b602002602001018190525061085b81610bf5565b61086481610c44565b5061086f6001600255565b50565b5f5473ffffffffffffffffffffffffffffffffffffffff1633146108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016106e1565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b5f606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d0919061347f565b905090565b4390565b6002805403610a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e1565b60028055565b60408051610160810182525f60a0820181815260c0830182905260e083018290526101008301829052610120830182905260606101408401819052908352835180820185528281526020808201849052818601849052840152928201839052828201929092526080810182905290610ac28380613496565b810190610acf9190613a42565b90505f610adb82610d8f565b9050610ae78183611073565b610af0826110cf565b610af98261122f565b5f610b267f000000000000000000000000000000000000000000000000000000000000000063ffffffff16565b90506040518060a00160405280845f01518152602001610b5c8560a001515f01518487606001516113349092919063ffffffff16565b815260a0850151516080860151602090920191610b7991856113f9565b8152602001868060200190610b8e9190613496565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250505090825250602090810184905260a0850151908101518151604090920151929650610bed92879290856114de565b505050919050565b80515f5b8181101561034c575f838281518110610c1457610c14613185565b60200260200101519050610c27816114f2565b610c3181336119cf565b610c3b8133611acc565b50600101610bf9565b80515f5b81811015610d7e575f838281518110610c6357610c63613185565b602002602001015190505f81604001515190505f5b81811015610ce0575f83604001518281518110610c9757610c97613185565b60200260200101519050610cd781604001518260200151835f015173ffffffffffffffffffffffffffffffffffffffff16611ec69092919063ffffffff16565b50600101610c78565b50815f01516020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16868581518110610d2857610d28613185565b6020026020010151608001517f78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66855f015160400151604051610d6c91815260200190565b60405180910390a45050600101610c48565b5047156104ab576104ab3347611f0d565b6040517f563344757463684f72646572280000000000000000000000000000000000000060208201527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8201527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8201527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8201527f56334475746368496e7075742062617365496e7075742c00000000000000000060658201527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c8201525f90609801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208301527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348301527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b83015290606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d8083529091906142ec6020830139604051602001610f7190613b51565b604051602081830303815290604052604051602001610f8f90613c62565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610fce9594939291602001613d99565b60405160208183030381529060405280519060200120610ff0835f0151611fa3565b83602001518460400151611007866060015161203c565b611014876080015161218b565b60408051602081019790975286019490945273ffffffffffffffffffffffffffffffffffffffff9092166060850152608084015260a083015260c082015260e0015b604051602081830303815290604052805190602001209050919050565b8051606001514211156110b2576040517fb08ce5b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516104ab906110c58385612229565b8360c0015161229d565b60a0810151606001511561113b578060600151602001518160a00151606001511115611127576040517fac9143e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a081015160609081015190820151602001525b8060800151518160a00151608001515114611182576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6080810151515f5b8181101561034c575f836080015182815181106111a9576111a9613185565b602002602001015190505f8460a001516080015183815181106111ce576111ce613185565b60200260200101519050805f1461122557816020015181101561121d576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602082018190525b505060010161118a565b5f6112478260400151486123c090919063ffffffff16565b90508160600151608001515f1461129f575f61126b836060015160800151836123f9565b9050611294815f856060015160600151866060015160200151612431909392919063ffffffff16565b606084015160200152505b6080820151515f5b8181101561065f575f846080015182815181106112c6576112c6613185565b602002602001015190508060a001515f1461132b575f6112ea8260a00151866123f9565b60808301516020840151919250611324919083907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612450565b6020830152505b506001016112a7565b61136b60405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81525090565b5f6040518060e0016040528086604001518152602001866020015181526020018581526020018481526020015f8152602001866060015181526020016124e081525090505f6113b982612568565b6040805160608082018352895173ffffffffffffffffffffffffffffffffffffffff16825260208201939093529790910151908701525093949350505050565b82516060908067ffffffffffffffff81111561141757611417613158565b60405190808252806020026020018201604052801561147f57816020015b604080516060810182525f80825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114355790505b5091505f5b818110156114d5576114b08682815181106114a1576114a1613185565b6020026020010151868661266d565b8382815181106114c2576114c2613185565b6020908102919091010152600101611484565b50509392505050565b6114eb8585858585612752565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff166115125750565b6001546040517f8aa6cf030000000000000000000000000000000000000000000000000000000081525f9173ffffffffffffffffffffffffffffffffffffffff1690638aa6cf0390611568908590600401613e03565b5f60405180830381865afa158015611582573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115c79190810190613e15565b6040830151518151919250905f6115de8284613f0b565b67ffffffffffffffff8111156115f6576115f6613158565b60405190808252806020026020018201604052801561165e57816020015b604080516060810182525f80825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116145790505b5090505f5b838110156116ae578560400151818151811061168157611681613185565b602002602001015182828151811061169b5761169b613185565b6020908102919091010152600101611663565b505f805f5b848110156119be575f8782815181106116ce576116ce613185565b602002602001015190505f5b82811015611789578881815181106116f4576116f4613185565b60200260200101515f015173ffffffffffffffffffffffffffffffffffffffff16825f015173ffffffffffffffffffffffffffffffffffffffff16036117815781516040517ffff0830300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106e1565b6001016116da565b505f805b88811015611846575f8b6040015182815181106117ac576117ac613185565b60200260200101519050835f015173ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff160361183d578515611827576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516118369084613f0b565b9250600196505b5060010161178d565b50815160208b01515173ffffffffffffffffffffffffffffffffffffffff9182169116036118bf5784156118a6576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808b015101516118b89082613f0b565b9050600193505b805f036119135781516040517feddf07f500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106e1565b6119218160056127106127f2565b82602001511115611994578151602083015160408085015190517f82e7565600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260248101929092529190911660448201526064016106e1565b8186848a01815181106119a9576119a9613185565b602090810291909101015250506001016116b3565b505050604090940193909352505050565b81515173ffffffffffffffffffffffffffffffffffffffff163014611a20576040517f4ddf4a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516080015173ffffffffffffffffffffffffffffffffffffffff16156104ab578151608001516040517f6e84ba2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636e84ba2b90611a9c9084908690600401613f1e565b5f6040518083038186803b158015611ab2575f80fd5b505afa158015611ac4573d5f803e3d5ffd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663137c29fe611b8b846040805160a0810182525f606082018181526080830182905282526020820181905291810191909152506040805160a081018252602080840180515173ffffffffffffffffffffffffffffffffffffffff1660608085019182529151850151608085015283528451840151918301919091529251909201519082015290565b6040805180820182525f808252602091820152815180830190925273ffffffffffffffffffffffffffffffffffffffff861682528087015181015190820152855f0151602001518660800151604051602001611c56907f4e6f6e6c696e656172447574636844656361792800000000000000000000000081527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060148201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000602b82015260440190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d8083529091906142ec60208301396040518060600160405280602e81526020016142be602e9139604051602001611cc090613b51565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f563344757463684f72646572280000000000000000000000000000000000000060208401527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8401527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8401527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8401527f56334475746368496e7075742062617365496e7075742c00000000000000000060658401527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c840152815160788185030181526098840190925291611df09060b801613c62565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611e30969594939291602001613f4c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260608a01517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b168352611e9d9695949392600401613ffe565b5f604051808303815f87803b158015611eb4575f80fd5b505af1158015611ac4573d5f803e3d5ffd5b73ffffffffffffffffffffffffffffffffffffffff8316611eeb5761034c8282611f0d565b61034c73ffffffffffffffffffffffffffffffffffffffff841633848461282c565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114611f63576040519150601f19603f3d011682016040523d82523d5f602084013e611f68565b606091505b505090508061034c576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6040518060c00160405280608d81526020016142ec608d913980516020918201208351848301516040808701516060880151608089015160a08a0151805190890120935161105698939492939192910196875273ffffffffffffffffffffffffffffffffffffffff958616602088015293851660408701526060860192909252608085015290911660a083015260c082015260e00190565b5f60405160200161204c90613b51565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b840152815160448185030181526064840190925261210c929091906084016140b8565b60405160208183030381529060405280519060200120825f015183602001516121388560400151612913565b60608087015160808089015160408051602081019990995273ffffffffffffffffffffffffffffffffffffffff909716968801969096529186019390935284015260a083015260c082015260e001611056565b5f80825160200267ffffffffffffffff8111156121aa576121aa613158565b6040519080825280601f01601f1916602001820160405280156121d4576020820181803683370190505b5083519091505f5b81811015612219575f6122078683815181106121fa576121fa613185565b6020026020010151612a0f565b602083810286010152506001016121dc565b5050805160209091012092915050565b5f81468460a0015160405160200161224191906140e6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261227e939291602001614169565b6040516020818303038152906040528051906020012090505b92915050565b5f80828060200190518101906122b39190614195565b915091505f836040815181106122cb576122cb613185565b01602090810151604080515f80825293810180835289905260f89290921c9082018190526060820186905260808201859052925060019060a0016020604051602081039080840390855afa158015612325573d5f803e3d5ffd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141580612380575073ffffffffffffffffffffffffffffffffffffffff8116155b156123b7576040517fd7815be100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b5f818310156123ec576123db6123d684846141b7565b612b71565b6123e5905f6141ca565b9050612297565b6123e56123d683856141b7565b5f808212612410576123e58383633b9aca006127f2565b61242861241c836141f0565b8490633b9aca00612c26565b6123e5906141f0565b5f6124478561244086846141ca565b8585612450565b95945050505050565b5f808412156124b1575f612463856141f0565b905085612490827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6141b7565b101561249f57829150506124d8565b6124a98187613f0b565b9150506124cd565b838510156124c05750816124d8565b6124ca84866141b7565b90505b612447818484612c68565b949350505050565b5f8484106124ef575080612447565b5f6124fa87866141b7565b90505f61250788886141b7565b90505f85851215612538576125288383612521888a6141ca565b91906127f2565b612531906141f0565b9050612551565b61254e838361254789896141ca565b9190612c26565b90505b61255b8187614226565b9998505050505050505050565b5f6010825f0151602001515111156125ac576040517f0e99676600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816060015182604001511015806125c7575081516020015151155b156125e657608082015160a08301516020840151612297929091612c68565b5f612606836040015184606001516125fe91906141b7565b61ffff612c78565b90505f805f80612619875f015186612c8f565b93509350935093505f6126438561ffff168561ffff168861ffff1686868d60c0015163ffffffff16565b608089015160a08a015160208b015192935061266192918491612450565b98975050505050505050565b604080516060810182525f80825260208201819052918101919091525f6040518060e001604052808660400151815260200186602001518152602001858152602001848152602001866080015181526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001612e4881525090505f6126f782612568565b90506040518060600160405280875f015173ffffffffffffffffffffffffffffffffffffffff168152602001828152602001876060015173ffffffffffffffffffffffffffffffffffffffff16815250925050509392505050565b61275d848483612e98565b6114eb5781612798576040517fb9ec1e9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408501515f5b81518110156123b7575f8282815181106127bb576127bb613185565b602002602001015190506127e4856127106127d69190613f0b565b602083015190612710612c26565b60209091015260010161279f565b5f827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0484118302158202612825575f80fd5b5091020490565b5f6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260205f6064835f8a5af13d15601f3d1160015f5114161716915050806114eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016106e1565b6040517f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208201527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8201525f9060640160405160208183030381529060405280519060200120825f015183602001516040516020016129bc919061424d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301949094528101919091526060810191909152608001611056565b5f604051602001612a1f90613c62565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8401528151604481850301815260648401909252612adf929091906084016140b8565b60405160208183030381529060405280519060200120825f01518360200151612b0b8560400151612913565b60608087015160808089015160a0808b015160408051602081019b909b5273ffffffffffffffffffffffffffffffffffffffff998a16908b01529489019690965290870193909352939093169184019190915260c083015260e082015261010001611056565b5f7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016106e1565b5090565b5f827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0484118302158202612c59575f80fd5b50910281810615159190040190565b5f6124d8612c768585612ee3565b835b5f818310612c865781612c88565b825b9392505050565b5f805f805f612c9e875f015190565b905061ffff8616612caf825f612ef1565b61ffff1610612cf0575f612cc38282612ef1565b5f89602001515f81518110612cda57612cda613185565b6020026020010151945094509450945050612e3f565b5f6001886020015151612d039190614282565b905060015b8161ffff168161ffff1611612dd3578761ffff16612d338261ffff1685612ef190919063ffffffff16565b61ffff1610612dc157612d55612d4a600183614282565b849061ffff16612ef1565b612d638461ffff8416612ef1565b60208b0151612d73600185614282565b61ffff1681518110612d8757612d87613185565b60200260200101518b602001518461ffff1681518110612da957612da9613185565b60200260200101519650965096509650505050612e3f565b80612dcb8161429d565b915050612d08565b50612de28261ffff8316612ef1565b612df08361ffff8416612ef1565b89602001518361ffff1681518110612e0a57612e0a613185565b60200260200101518a602001518461ffff1681518110612e2c57612e2c613185565b6020026020010151955095509550955050505b92959194509250565b5f848410612e57575080612447565b5f612e6287866141b7565b90505f612e6f88886141b7565b90505f85851215612e89576125288383612547888a6141ca565b61254e838361252189896141ca565b5f73ffffffffffffffffffffffffffffffffffffffff84161580612ebb57508282115b806124d8575073ffffffffffffffffffffffffffffffffffffffff8416331490509392505050565b5f818311612c865781612c88565b5f60108210612f2c576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506010021c90565b5f60408284031215612f44575f80fd5b50919050565b5f8083601f840112612f5a575f80fd5b50813567ffffffffffffffff811115612f71575f80fd5b602083019150836020828501011115612f88575f80fd5b9250929050565b5f805f60408486031215612fa1575f80fd5b833567ffffffffffffffff80821115612fb8575f80fd5b612fc487838801612f34565b94506020860135915080821115612fd9575f80fd5b50612fe686828701612f4a565b9497909650939450505050565b5f8083601f840112613003575f80fd5b50813567ffffffffffffffff81111561301a575f80fd5b6020830191508360208260051b8501011115612f88575f80fd5b5f8060208385031215613045575f80fd5b823567ffffffffffffffff81111561305b575f80fd5b61306785828601612ff3565b90969095509350505050565b5f805f8060408587031215613086575f80fd5b843567ffffffffffffffff8082111561309d575f80fd5b6130a988838901612ff3565b909650945060208701359150808211156130c1575f80fd5b506130ce87828801612f4a565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461086f575f80fd5b8035613106816130da565b919050565b5f6020828403121561311b575f80fd5b8135612c88816130da565b5f60208284031215613136575f80fd5b813567ffffffffffffffff81111561314c575f80fd5b6124d884828501612f34565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5b838110156131cc5781810151838201526020016131b4565b50505f910152565b5f81518084526131eb8160208601602086016131b2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b5f815180845260208085019450602084015f5b8381101561327b578151805173ffffffffffffffffffffffffffffffffffffffff908116895284820151858a0152604091820151169088015260609096019590820190600101613230565b509495945050505050565b5f815160e0845273ffffffffffffffffffffffffffffffffffffffff8082511660e08601528060208301511661010086015260408201516101208601526060820151610140860152806080830151166101608601525060a0810151905060c06101808501526132f96101a08501826131d4565b905060208301516133376020860182805173ffffffffffffffffffffffffffffffffffffffff16825260208082015190830152604090810151910152565b506040830151848203608086015261334f828261321d565b915050606083015184820360a086015261336982826131d4565b915050608083015160c08501528091505092915050565b5f604082016040835280865180835260608501915060608160051b860101925060208089015f5b838110156133f3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526133e1868351613286565b955093820193908201906001016133a7565b5050858403818701528684528688828601375f848801820152601f9096017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092019094019695505050505050565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613475575f80fd5b9190910192915050565b5f6020828403121561348f575f80fd5b5051919050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126134c9575f80fd5b83018035915067ffffffffffffffff8211156134e3575f80fd5b602001915036819003821315612f88575f80fd5b60405160c0810167ffffffffffffffff8111828210171561351a5761351a613158565b60405290565b6040805190810167ffffffffffffffff8111828210171561351a5761351a613158565b60405160a0810167ffffffffffffffff8111828210171561351a5761351a613158565b60405160e0810167ffffffffffffffff8111828210171561351a5761351a613158565b6040516060810167ffffffffffffffff8111828210171561351a5761351a613158565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135f3576135f3613158565b604052919050565b5f82601f83011261360a575f80fd5b813567ffffffffffffffff81111561362457613624613158565b61365560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016135ac565b818152846020838601011115613669575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60c08284031215613695575f80fd5b61369d6134f7565b905081356136aa816130da565b815260208201356136ba816130da565b80602083015250604082013560408201526060820135606082015260808201356136e3816130da565b608082015260a082013567ffffffffffffffff811115613701575f80fd5b61370d848285016135fb565b60a08301525092915050565b5f67ffffffffffffffff82111561373257613732613158565b5060051b60200190565b5f6040828403121561374c575f80fd5b613754613520565b90508135815260208083013567ffffffffffffffff811115613774575f80fd5b8301601f81018513613784575f80fd5b803561379761379282613719565b6135ac565b81815260059190911b820183019083810190878311156137b5575f80fd5b928401925b828410156137d3578335825292840192908401906137ba565b8085870152505050505092915050565b5f60a082840312156137f3575f80fd5b6137fb613543565b90508135613808816130da565b815260208281013590820152604082013567ffffffffffffffff81111561382d575f80fd5b6138398482850161373c565b604083015250606082013560608201526080820135608082015292915050565b5f82601f830112613868575f80fd5b8135602061387861379283613719565b82815260059290921b84018101918181019086841115613896575f80fd5b8286015b8481101561396d57803567ffffffffffffffff808211156138b9575f80fd5b818901915060c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156138f0575f80fd5b6138f86134f7565b87840135613905816130da565b81526040848101358983015260608086013585811115613923575f80fd5b6139318f8c838a010161373c565b838501525060809450848601359150613949826130da565b82015260a0848101359382019390935292013590820152835291830191830161389a565b509695505050505050565b5f60a08284031215613988575f80fd5b613990613543565b9050813581526020808301356139a5816130da565b8082840152506040830135604083015260608301356060830152608083013567ffffffffffffffff8111156139d8575f80fd5b8301601f810185136139e8575f80fd5b80356139f661379282613719565b81815260059190911b82018301908381019087831115613a14575f80fd5b928401925b82841015613a3257833582529284019290840190613a19565b6080860152509295945050505050565b5f60208284031215613a52575f80fd5b813567ffffffffffffffff80821115613a69575f80fd5b9083019060e08286031215613a7c575f80fd5b613a84613566565b823582811115613a92575f80fd5b613a9e87828601613685565b825250613aad602084016130fb565b602082015260408301356040820152606083013582811115613acd575f80fd5b613ad9878286016137e3565b606083015250608083013582811115613af0575f80fd5b613afc87828601613859565b60808301525060a083013582811115613b13575f80fd5b613b1f87828601613978565b60a08301525060c083013582811115613b36575f80fd5b613b42878286016135fb565b60c08301525095945050505050565b7f56334475746368496e707574280000000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600d8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601b8201527f4e6f6e6c696e656172447574636844656361792063757276652c000000000000602f8201527f75696e74323536206d6178416d6f756e742c000000000000000000000000000060498201527f75696e743235362061646a7573746d656e745065724777656942617365466565605b8201527f2900000000000000000000000000000000000000000000000000000000000000607b8201525f607c8201612297565b7f563344757463684f75747075742800000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600e8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601c8201527f4e6f6e6c696e656172447574636844656361792063757276652c00000000000060308201527f6164647265737320726563697069656e742c0000000000000000000000000000604a8201527f75696e74323536206d696e416d6f756e742c0000000000000000000000000000605c8201527f75696e743235362061646a7573746d656e745065724777656942617365466565606e8201527f2900000000000000000000000000000000000000000000000000000000000000608e8201525f608f8201612297565b5f8651613daa818460208b016131b2565b865190830190613dbe818360208b016131b2565b8651910190613dd1818360208a016131b2565b8551910190613de48183602089016131b2565b8451910190613df78183602088016131b2565b01979650505050505050565b602081525f612c886020830184613286565b5f6020808385031215613e26575f80fd5b825167ffffffffffffffff811115613e3c575f80fd5b8301601f81018513613e4c575f80fd5b8051613e5a61379282613719565b81815260609182028301840191848201919088841115613e78575f80fd5b938501935b83851015613ed25780858a031215613e93575f80fd5b613e9b613589565b8551613ea6816130da565b81528587015187820152604080870151613ebf816130da565b9082015283529384019391850191613e7d565b50979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561229757612297613ede565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201525f6124d86040830184613286565b7f563344757463684f72646572207769746e65737329000000000000000000000081525f601588516020613f8582848701838e016131b2565b895191850191613f9a81858501848e016131b2565b8951920191613fae81858501848d016131b2565b8851920191613fc281858501848c016131b2565b8751920191613fd681858501848b016131b2565b8651920191613fea81858501848a016131b2565b919091019091019998505050505050505050565b5f61014061402d838a51805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b602089015160408401526040890151606084015261406e6080840189805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff871660c08401528560e0840152806101008401526140a3818401866131d4565b905082810361012084015261255b81856131d4565b5f83516140c98184602088016131b2565b8351908301906140dd8183602088016131b2565b01949350505050565b5f602080835260c0830184518285015273ffffffffffffffffffffffffffffffffffffffff828601511660408501526040850151606085015260608501516080850152608085015160a08086015281815180845260e08701915084830193505f92505b8083101561396d5783518252928401926001929092019190840190614149565b8381528260208201525f82516141868160408501602087016131b2565b91909101604001949350505050565b5f80604083850312156141a6575f80fd5b505080516020909101519092909150565b8181038181111561229757612297613ede565b8181035f8312801583831316838312821617156141e9576141e9613ede565b5092915050565b5f7f8000000000000000000000000000000000000000000000000000000000000000820361422057614220613ede565b505f0390565b8082018281125f83128015821682158216171561424557614245613ede565b505092915050565b81515f9082906020808601845b838110156142765781518552938201939082019060010161425a565b50929695505050505050565b61ffff8281168282160390808211156141e9576141e9613ede565b5f61ffff8083168181036142b3576142b3613ede565b600101939250505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f28616464726573732072656163746f722c6164647265737320737761707065722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c61646472657373206164646974696f6e616c56616c69646174696f6e436f6e74726163742c6279746573206164646974696f6e616c56616c69646174696f6e4461746129a264697066735822122076eb64bf241a3d263ec5a72de29639edadafd9dc347b19b4925bf5d973d562ef64736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4\x80\x15b\0\0\x10W_\x80\xFD[P`@Qb\0E\x8F8\x03\x80b\0E\x8F\x839\x81\x01`@\x81\x90Rb\0\x003\x91b\0\x01dV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x82U`@Q\x84\x92\x84\x92\x83\x92\x83\x92\x90\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x90\x82\x90\xA3PP`\x01`\x02UP`\x01`\x01`\xA0\x1B\x03\x16`\x80Ra\xA4\xB0\x19F\x01b\0\0\xBDW`\x01`\x01`@\x1B\x03b\0\tab\0\0\xDE` \x1B\x17\x16`\xA0Rb\0\0\xD6V[`\x01`\x01`@\x1B\x03b\0\t\xD5b\0\x01H` \x1B\x17\x16`\xA0R[PPb\0\x01\xB9V[_`d`\x01`\x01`\xA0\x1B\x03\x16c\xA3\xB1\xB3\x1D`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15b\0\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90b\0\x01C\x91\x90b\0\x01\xA1V[\x90P\x90V[C\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x01aW_\x80\xFD[PV[_\x80`@\x83\x85\x03\x12\x15b\0\x01vW_\x80\xFD[\x82Qb\0\x01\x83\x81b\0\x01LV[` \x84\x01Q\x90\x92Pb\0\x01\x96\x81b\0\x01LV[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15b\0\x01\xB2W_\x80\xFD[PQ\x91\x90PV[`\x80Q`\xA0QaC\xAEb\0\x01\xE1_9_a\n\xFF\x01R_\x81\x81`\xDA\x01Ra\x1A\xCE\x01RaC\xAE_\xF3\xFE`\x80`@R`\x046\x10a\0\x96W_5`\xE0\x1C\x80c-w\x13\x89\x11a\0fW\x80ci\x99\xB3w\x11a\0LW\x80ci\x99\xB3w\x14a\x01jW\x80c\x8D\xA5\xCB[\x14a\x01\x96W\x80c\xF2\xFD\xE3\x8B\x14a\x01\xC1W_\x80\xFD[\x80c-w\x13\x89\x14a\x018W\x80c?b\x19.\x14a\x01WW_\x80\xFD[\x80c\r3X\x84\x14a\0\xA1W\x80c\rz\x16\xC3\x14a\0\xB6W\x80c\x12&\x1E\xE7\x14a\0\xC9W\x80c\x13\xFBr\xC7\x14a\x01%W_\x80\xFD[6a\0\x9DW\0[_\x80\xFD[a\0\xB4a\0\xAF6`\x04a/\x8FV[a\x01\xE0V[\0[a\0\xB4a\0\xC46`\x04a04V[a\x03QV[4\x80\x15a\0\xD4W_\x80\xFD[Pa\0\xFC\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0\xB4a\x0136`\x04a0sV[a\x04\xAFV[4\x80\x15a\x01CW_\x80\xFD[Pa\0\xB4a\x01R6`\x04a1\x0BV[a\x06eV[a\0\xB4a\x01e6`\x04a1&V[a\x07pV[4\x80\x15a\x01uW_\x80\xFD[P`\x01Ta\0\xFC\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xA1W_\x80\xFD[P_Ta\0\xFC\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xCCW_\x80\xFD[Pa\0\xB4a\x01\xDB6`\x04a1\x0BV[a\x08rV[a\x01\xE8a\t\xD9V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R_\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x01\xFEW\x90PP\x90Pa\x02\xA5\x84a\nJV[\x81_\x81Q\x81\x10a\x02\xB7Wa\x02\xB7a1\x85V[` \x02` \x01\x01\x81\x90RPa\x02\xCB\x81a\x0B\xF5V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x03\x0B\x90\x84\x90\x87\x90\x87\x90`\x04\x01a3\x80V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\"W_\x80\xFD[PZ\xF1\x15\x80\x15a\x034W=_\x80>=_\xFD[PPPPa\x03A\x81a\x0CDV[Pa\x03L`\x01`\x02UV[PPPV[a\x03Ya\t\xD9V[\x80_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03tWa\x03ta1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04.W\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x03\x92W\x90P[P\x90P_[\x82\x81\x10\x15a\x04\x8CWa\x04g\x85\x85\x83\x81\x81\x10a\x04PWa\x04Pa1\x85V[\x90P` \x02\x81\x01\x90a\x04b\x91\x90a4CV[a\nJV[\x82\x82\x81Q\x81\x10a\x04yWa\x04ya1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x043V[Pa\x04\x96\x81a\x0B\xF5V[a\x04\x9F\x81a\x0CDV[PPa\x04\xAB`\x01`\x02UV[PPV[a\x04\xB7a\t\xD9V[\x82_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xD2Wa\x04\xD2a1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\x8CW\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x04\xF0W\x90P[P\x90P_[\x82\x81\x10\x15a\x05\xD3Wa\x05\xAE\x87\x87\x83\x81\x81\x10a\x04PWa\x04Pa1\x85V[\x82\x82\x81Q\x81\x10a\x05\xC0Wa\x05\xC0a1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x05\x91V[Pa\x05\xDD\x81a\x0B\xF5V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x06\x1D\x90\x84\x90\x88\x90\x88\x90`\x04\x01a3\x80V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x064W_\x80\xFD[PZ\xF1\x15\x80\x15a\x06FW=_\x80>=_\xFD[PPPPa\x06S\x81a\x0CDV[PPa\x06_`\x01`\x02UV[PPPPV[_Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x06\xEAW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@\x80Q\x91\x90\x92\x16\x80\x82R` \x82\x01\x93\x90\x93R\x7F\xB9\x04\xAE\x95)\xE3s\xE4\x8B\xC8-\xF42l\xCE\xAF\x1BLG+\xAB\xF3\x7F[}\xECF\xFE\xCCkS\xE0\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[a\x07xa\t\xD9V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R_\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x07\x8EW\x90PP\x90Pa\x085\x82a\nJV[\x81_\x81Q\x81\x10a\x08GWa\x08Ga1\x85V[` \x02` \x01\x01\x81\x90RPa\x08[\x81a\x0B\xF5V[a\x08d\x81a\x0CDV[Pa\x08o`\x01`\x02UV[PV[_Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x08\xF2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06\xE1V[_\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[_`ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA3\xB1\xB3\x1D`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xACW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD0\x91\x90a4\x7FV[\x90P\x90V[C\x90V[`\x02\x80T\x03a\nDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FReentrancyGuard: reentrant call\0`D\x82\x01R`d\x01a\x06\xE1V[`\x02\x80UV[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x84\x01R\x92\x82\x01\x83\x90R\x82\x82\x01\x92\x90\x92R`\x80\x81\x01\x82\x90R\x90a\n\xC2\x83\x80a4\x96V[\x81\x01\x90a\n\xCF\x91\x90a:BV[\x90P_a\n\xDB\x82a\r\x8FV[\x90Pa\n\xE7\x81\x83a\x10sV[a\n\xF0\x82a\x10\xCFV[a\n\xF9\x82a\x12/V[_a\x0B&\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x16V[\x90P`@Q\x80`\xA0\x01`@R\x80\x84_\x01Q\x81R` \x01a\x0B\\\x85`\xA0\x01Q_\x01Q\x84\x87``\x01Qa\x134\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x81R`\xA0\x85\x01QQ`\x80\x86\x01Q` \x90\x92\x01\x91a\x0By\x91\x85a\x13\xF9V[\x81R` \x01\x86\x80` \x01\x90a\x0B\x8E\x91\x90a4\x96V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPPP\x90\x82RP` \x90\x81\x01\x84\x90R`\xA0\x85\x01Q\x90\x81\x01Q\x81Q`@\x90\x92\x01Q\x92\x96Pa\x0B\xED\x92\x87\x92\x90\x85a\x14\xDEV[PPP\x91\x90PV[\x80Q_[\x81\x81\x10\x15a\x03LW_\x83\x82\x81Q\x81\x10a\x0C\x14Wa\x0C\x14a1\x85V[` \x02` \x01\x01Q\x90Pa\x0C'\x81a\x14\xF2V[a\x0C1\x813a\x19\xCFV[a\x0C;\x813a\x1A\xCCV[P`\x01\x01a\x0B\xF9V[\x80Q_[\x81\x81\x10\x15a\r~W_\x83\x82\x81Q\x81\x10a\x0CcWa\x0Cca1\x85V[` \x02` \x01\x01Q\x90P_\x81`@\x01QQ\x90P_[\x81\x81\x10\x15a\x0C\xE0W_\x83`@\x01Q\x82\x81Q\x81\x10a\x0C\x97Wa\x0C\x97a1\x85V[` \x02` \x01\x01Q\x90Pa\x0C\xD7\x81`@\x01Q\x82` \x01Q\x83_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1E\xC6\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[P`\x01\x01a\x0CxV[P\x81_\x01Q` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x85\x81Q\x81\x10a\r(Wa\r(a1\x85V[` \x02` \x01\x01Q`\x80\x01Q\x7Fx\xAD~\xC0\xE9\xF8\x9Et\x01*\xFAXs\x8Bkf\x1C\x02L\xB0\xFD\x18^\xE2\xF6\x16\xC0\xA2\x89$\xBDf\x85_\x01Q`@\x01Q`@Qa\rl\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4PP`\x01\x01a\x0CHV[PG\x15a\x04\xABWa\x04\xAB3Ga\x1F\rV[`@Q\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x82\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x82\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x82\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x82\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x82\x01R_\x90`\x98\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x83\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x83\x01R\x90`d\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aB\xEC` \x83\x019`@Q` \x01a\x0Fq\x90a;QV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q` \x01a\x0F\x8F\x90a<bV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x0F\xCE\x95\x94\x93\x92\x91` \x01a=\x99V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\x0F\xF0\x83_\x01Qa\x1F\xA3V[\x83` \x01Q\x84`@\x01Qa\x10\x07\x86``\x01Qa <V[a\x10\x14\x87`\x80\x01Qa!\x8BV[`@\x80Q` \x81\x01\x97\x90\x97R\x86\x01\x94\x90\x94Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16``\x85\x01R`\x80\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x80Q``\x01QB\x11\x15a\x10\xB2W`@Q\x7F\xB0\x8C\xE5\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x04\xAB\x90a\x10\xC5\x83\x85a\")V[\x83`\xC0\x01Qa\"\x9DV[`\xA0\x81\x01Q``\x01Q\x15a\x11;W\x80``\x01Q` \x01Q\x81`\xA0\x01Q``\x01Q\x11\x15a\x11'W`@Q\x7F\xAC\x91C\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\xA0\x81\x01Q``\x90\x81\x01Q\x90\x82\x01Q` \x01R[\x80`\x80\x01QQ\x81`\xA0\x01Q`\x80\x01QQ\x14a\x11\x82W`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x80\x81\x01QQ_[\x81\x81\x10\x15a\x03LW_\x83`\x80\x01Q\x82\x81Q\x81\x10a\x11\xA9Wa\x11\xA9a1\x85V[` \x02` \x01\x01Q\x90P_\x84`\xA0\x01Q`\x80\x01Q\x83\x81Q\x81\x10a\x11\xCEWa\x11\xCEa1\x85V[` \x02` \x01\x01Q\x90P\x80_\x14a\x12%W\x81` \x01Q\x81\x10\x15a\x12\x1DW`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x82\x01\x81\x90R[PP`\x01\x01a\x11\x8AV[_a\x12G\x82`@\x01QHa#\xC0\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x81``\x01Q`\x80\x01Q_\x14a\x12\x9FW_a\x12k\x83``\x01Q`\x80\x01Q\x83a#\xF9V[\x90Pa\x12\x94\x81_\x85``\x01Q``\x01Q\x86``\x01Q` \x01Qa$1\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[``\x84\x01Q` \x01RP[`\x80\x82\x01QQ_[\x81\x81\x10\x15a\x06_W_\x84`\x80\x01Q\x82\x81Q\x81\x10a\x12\xC6Wa\x12\xC6a1\x85V[` \x02` \x01\x01Q\x90P\x80`\xA0\x01Q_\x14a\x13+W_a\x12\xEA\x82`\xA0\x01Q\x86a#\xF9V[`\x80\x83\x01Q` \x84\x01Q\x91\x92Pa\x13$\x91\x90\x83\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa$PV[` \x83\x01RP[P`\x01\x01a\x12\xA7V[a\x13k`@Q\x80``\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81RP\x90V[_`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01_\x81R` \x01\x86``\x01Q\x81R` \x01a$\xE0\x81RP\x90P_a\x13\xB9\x82a%hV[`@\x80Q``\x80\x82\x01\x83R\x89Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x82\x01\x93\x90\x93R\x97\x90\x91\x01Q\x90\x87\x01RP\x93\x94\x93PPPPV[\x82Q``\x90\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x17Wa\x14\x17a1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x14\x7FW\x81` \x01[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x145W\x90P[P\x91P_[\x81\x81\x10\x15a\x14\xD5Wa\x14\xB0\x86\x82\x81Q\x81\x10a\x14\xA1Wa\x14\xA1a1\x85V[` \x02` \x01\x01Q\x86\x86a&mV[\x83\x82\x81Q\x81\x10a\x14\xC2Wa\x14\xC2a1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x14\x84V[PP\x93\x92PPPV[a\x14\xEB\x85\x85\x85\x85\x85a'RV[PPPPPV[`\x01Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15\x12WPV[`\x01T`@Q\x7F\x8A\xA6\xCF\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90c\x8A\xA6\xCF\x03\x90a\x15h\x90\x85\x90`\x04\x01a>\x03V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x15\x82W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x82\x01`@Ra\x15\xC7\x91\x90\x81\x01\x90a>\x15V[`@\x83\x01QQ\x81Q\x91\x92P\x90_a\x15\xDE\x82\x84a?\x0BV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xF6Wa\x15\xF6a1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16^W\x81` \x01[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x16\x14W\x90P[P\x90P_[\x83\x81\x10\x15a\x16\xAEW\x85`@\x01Q\x81\x81Q\x81\x10a\x16\x81Wa\x16\x81a1\x85V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x16\x9BWa\x16\x9Ba1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x16cV[P_\x80_[\x84\x81\x10\x15a\x19\xBEW_\x87\x82\x81Q\x81\x10a\x16\xCEWa\x16\xCEa1\x85V[` \x02` \x01\x01Q\x90P_[\x82\x81\x10\x15a\x17\x89W\x88\x81\x81Q\x81\x10a\x16\xF4Wa\x16\xF4a1\x85V[` \x02` \x01\x01Q_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x17\x81W\x81Q`@Q\x7F\xFF\xF0\x83\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x06\xE1V[`\x01\x01a\x16\xDAV[P_\x80[\x88\x81\x10\x15a\x18FW_\x8B`@\x01Q\x82\x81Q\x81\x10a\x17\xACWa\x17\xACa1\x85V[` \x02` \x01\x01Q\x90P\x83_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18=W\x85\x15a\x18'W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x186\x90\x84a?\x0BV[\x92P`\x01\x96P[P`\x01\x01a\x17\x8DV[P\x81Q` \x8B\x01QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16\x03a\x18\xBFW\x84\x15a\x18\xA6W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x80\x8B\x01Q\x01Qa\x18\xB8\x90\x82a?\x0BV[\x90P`\x01\x93P[\x80_\x03a\x19\x13W\x81Q`@Q\x7F\xED\xDF\x07\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x06\xE1V[a\x19!\x81`\x05a'\x10a'\xF2V[\x82` \x01Q\x11\x15a\x19\x94W\x81Q` \x83\x01Q`@\x80\x85\x01Q\x90Q\x7F\x82\xE7VV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16`\x04\x82\x01R`$\x81\x01\x92\x90\x92R\x91\x90\x91\x16`D\x82\x01R`d\x01a\x06\xE1V[\x81\x86\x84\x8A\x01\x81Q\x81\x10a\x19\xA9Wa\x19\xA9a1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x16\xB3V[PPP`@\x90\x94\x01\x93\x90\x93RPPPV[\x81QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160\x14a\x1A W`@Q\x7FM\xDFJd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81Q`\x80\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x04\xABW\x81Q`\x80\x01Q`@Q\x7Fn\x84\xBA+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90cn\x84\xBA+\x90a\x1A\x9C\x90\x84\x90\x86\x90`\x04\x01a?\x1EV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1A\xB2W_\x80\xFD[PZ\xFA\x15\x80\x15a\x1A\xC4W=_\x80>=_\xFD[PPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x13|)\xFEa\x1B\x8B\x84`@\x80Q`\xA0\x81\x01\x82R_``\x82\x01\x81\x81R`\x80\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91RP`@\x80Q`\xA0\x81\x01\x82R` \x80\x84\x01\x80QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16``\x80\x85\x01\x91\x82R\x91Q\x85\x01Q`\x80\x85\x01R\x83R\x84Q\x84\x01Q\x91\x83\x01\x91\x90\x91R\x92Q\x90\x92\x01Q\x90\x82\x01R\x90V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x82R\x80\x87\x01Q\x81\x01Q\x90\x82\x01R\x85_\x01Q` \x01Q\x86`\x80\x01Q`@Q` \x01a\x1CV\x90\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`\x14\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`+\x82\x01R`D\x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aB\xEC` \x83\x019`@Q\x80``\x01`@R\x80`.\x81R` \x01aB\xBE`.\x919`@Q` \x01a\x1C\xC0\x90a;QV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x84\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x84\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x84\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x84\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x84\x01R\x81Q`x\x81\x85\x03\x01\x81R`\x98\x84\x01\x90\x92R\x91a\x1D\xF0\x90`\xB8\x01a<bV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x1E0\x96\x95\x94\x93\x92\x91` \x01a?LV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R``\x8A\x01Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x89\x90\x1B\x16\x83Ra\x1E\x9D\x96\x95\x94\x93\x92`\x04\x01a?\xFEV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x1E\xB4W_\x80\xFD[PZ\xF1\x15\x80\x15a\x1A\xC4W=_\x80>=_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16a\x1E\xEBWa\x03L\x82\x82a\x1F\rV[a\x03Ls\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x84\x84a(,V[_\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x1FcW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x1FhV[``\x91P[PP\x90P\x80a\x03LW`@Q\x7F\xF4\xB3\xB1\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80`\xC0\x01`@R\x80`\x8D\x81R` \x01aB\xEC`\x8D\x919\x80Q` \x91\x82\x01 \x83Q\x84\x83\x01Q`@\x80\x87\x01Q``\x88\x01Q`\x80\x89\x01Q`\xA0\x8A\x01Q\x80Q\x90\x89\x01 \x93Qa\x10V\x98\x93\x94\x92\x93\x91\x92\x91\x01\x96\x87Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x86\x16` \x88\x01R\x93\x85\x16`@\x87\x01R``\x86\x01\x92\x90\x92R`\x80\x85\x01R\x90\x91\x16`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01\x90V[_`@Q` \x01a L\x90a;QV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra!\x0C\x92\x90\x91\x90`\x84\x01a@\xB8V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82_\x01Q\x83` \x01Qa!8\x85`@\x01Qa)\x13V[``\x80\x87\x01Q`\x80\x80\x89\x01Q`@\x80Q` \x81\x01\x99\x90\x99Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x97\x16\x96\x88\x01\x96\x90\x96R\x91\x86\x01\x93\x90\x93R\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01a\x10VV[_\x80\x82Q` \x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\xAAWa!\xAAa1XV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a!\xD4W` \x82\x01\x81\x806\x837\x01\x90P[P\x83Q\x90\x91P_[\x81\x81\x10\x15a\"\x19W_a\"\x07\x86\x83\x81Q\x81\x10a!\xFAWa!\xFAa1\x85V[` \x02` \x01\x01Qa*\x0FV[` \x83\x81\x02\x86\x01\x01RP`\x01\x01a!\xDCV[PP\x80Q` \x90\x91\x01 \x92\x91PPV[_\x81F\x84`\xA0\x01Q`@Q` \x01a\"A\x91\x90a@\xE6V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\"~\x93\x92\x91` \x01aAiV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P[\x92\x91PPV[_\x80\x82\x80` \x01\x90Q\x81\x01\x90a\"\xB3\x91\x90aA\x95V[\x91P\x91P_\x83`@\x81Q\x81\x10a\"\xCBWa\"\xCBa1\x85V[\x01` \x90\x81\x01Q`@\x80Q_\x80\x82R\x93\x81\x01\x80\x83R\x89\x90R`\xF8\x92\x90\x92\x1C\x90\x82\x01\x81\x90R``\x82\x01\x86\x90R`\x80\x82\x01\x85\x90R\x92P`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a#%W=_\x80>=_\xFD[PPP` `@Q\x03Q\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x80a#\x80WPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15[\x15a#\xB7W`@Q\x7F\xD7\x81[\xE1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPV[_\x81\x83\x10\x15a#\xECWa#\xDBa#\xD6\x84\x84aA\xB7V[a+qV[a#\xE5\x90_aA\xCAV[\x90Pa\"\x97V[a#\xE5a#\xD6\x83\x85aA\xB7V[_\x80\x82\x12a$\x10Wa#\xE5\x83\x83c;\x9A\xCA\0a'\xF2V[a$(a$\x1C\x83aA\xF0V[\x84\x90c;\x9A\xCA\0a,&V[a#\xE5\x90aA\xF0V[_a$G\x85a$@\x86\x84aA\xCAV[\x85\x85a$PV[\x95\x94PPPPPV[_\x80\x84\x12\x15a$\xB1W_a$c\x85aA\xF0V[\x90P\x85a$\x90\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaA\xB7V[\x10\x15a$\x9FW\x82\x91PPa$\xD8V[a$\xA9\x81\x87a?\x0BV[\x91PPa$\xCDV[\x83\x85\x10\x15a$\xC0WP\x81a$\xD8V[a$\xCA\x84\x86aA\xB7V[\x90P[a$G\x81\x84\x84a,hV[\x94\x93PPPPV[_\x84\x84\x10a$\xEFWP\x80a$GV[_a$\xFA\x87\x86aA\xB7V[\x90P_a%\x07\x88\x88aA\xB7V[\x90P_\x85\x85\x12\x15a%8Wa%(\x83\x83a%!\x88\x8AaA\xCAV[\x91\x90a'\xF2V[a%1\x90aA\xF0V[\x90Pa%QV[a%N\x83\x83a%G\x89\x89aA\xCAV[\x91\x90a,&V[\x90P[a%[\x81\x87aB&V[\x99\x98PPPPPPPPPV[_`\x10\x82_\x01Q` \x01QQ\x11\x15a%\xACW`@Q\x7F\x0E\x99gf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81``\x01Q\x82`@\x01Q\x10\x15\x80a%\xC7WP\x81Q` \x01QQ\x15[\x15a%\xE6W`\x80\x82\x01Q`\xA0\x83\x01Q` \x84\x01Qa\"\x97\x92\x90\x91a,hV[_a&\x06\x83`@\x01Q\x84``\x01Qa%\xFE\x91\x90aA\xB7V[a\xFF\xFFa,xV[\x90P_\x80_\x80a&\x19\x87_\x01Q\x86a,\x8FV[\x93P\x93P\x93P\x93P_a&C\x85a\xFF\xFF\x16\x85a\xFF\xFF\x16\x88a\xFF\xFF\x16\x86\x86\x8D`\xC0\x01Qc\xFF\xFF\xFF\xFF\x16V[`\x80\x89\x01Q`\xA0\x8A\x01Q` \x8B\x01Q\x92\x93Pa&a\x92\x91\x84\x91a$PV[\x98\x97PPPPPPPPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R_`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01\x86`\x80\x01Q\x81R` \x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81R` \x01a.H\x81RP\x90P_a&\xF7\x82a%hV[\x90P`@Q\x80``\x01`@R\x80\x87_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x82\x81R` \x01\x87``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x92PPP\x93\x92PPPV[a']\x84\x84\x83a.\x98V[a\x14\xEBW\x81a'\x98W`@Q\x7F\xB9\xEC\x1E\x96\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x85\x01Q_[\x81Q\x81\x10\x15a#\xB7W_\x82\x82\x81Q\x81\x10a'\xBBWa'\xBBa1\x85V[` \x02` \x01\x01Q\x90Pa'\xE4\x85a'\x10a'\xD6\x91\x90a?\x0BV[` \x83\x01Q\x90a'\x10a,&V[` \x90\x91\x01R`\x01\x01a'\x9FV[_\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a(%W_\x80\xFD[P\x91\x02\x04\x90V[_`@Q\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`$\x82\x01R\x82`D\x82\x01R` _`d\x83_\x8AZ\xF1=\x15`\x1F=\x11`\x01_Q\x14\x16\x17\x16\x91PP\x80a\x14\xEBW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FTRANSFER_FROM_FAILED\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06\xE1V[`@Q\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x82\x01R_\x90`d\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82_\x01Q\x83` \x01Q`@Q` \x01a)\xBC\x91\x90aBMV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x90\x83\x01\x94\x90\x94R\x81\x01\x91\x90\x91R``\x81\x01\x91\x90\x91R`\x80\x01a\x10VV[_`@Q` \x01a*\x1F\x90a<bV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra*\xDF\x92\x90\x91\x90`\x84\x01a@\xB8V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82_\x01Q\x83` \x01Qa+\x0B\x85`@\x01Qa)\x13V[``\x80\x87\x01Q`\x80\x80\x89\x01Q`\xA0\x80\x8B\x01Q`@\x80Q` \x81\x01\x9B\x90\x9BRs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x99\x8A\x16\x90\x8B\x01R\x94\x89\x01\x96\x90\x96R\x90\x87\x01\x93\x90\x93R\x93\x90\x93\x16\x91\x84\x01\x91\x90\x91R`\xC0\x83\x01R`\xE0\x82\x01Ra\x01\0\x01a\x10VV[_\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a,\"W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FSafeCast: value doesn't fit in a`D\x82\x01R\x7Fn int256\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06\xE1V[P\x90V[_\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a,YW_\x80\xFD[P\x91\x02\x81\x81\x06\x15\x15\x91\x90\x04\x01\x90V[_a$\xD8a,v\x85\x85a.\xE3V[\x83[_\x81\x83\x10a,\x86W\x81a,\x88V[\x82[\x93\x92PPPV[_\x80_\x80_a,\x9E\x87_\x01Q\x90V[\x90Pa\xFF\xFF\x86\x16a,\xAF\x82_a.\xF1V[a\xFF\xFF\x16\x10a,\xF0W_a,\xC3\x82\x82a.\xF1V[_\x89` \x01Q_\x81Q\x81\x10a,\xDAWa,\xDAa1\x85V[` \x02` \x01\x01Q\x94P\x94P\x94P\x94PPa.?V[_`\x01\x88` \x01QQa-\x03\x91\x90aB\x82V[\x90P`\x01[\x81a\xFF\xFF\x16\x81a\xFF\xFF\x16\x11a-\xD3W\x87a\xFF\xFF\x16a-3\x82a\xFF\xFF\x16\x85a.\xF1\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\xFF\xFF\x16\x10a-\xC1Wa-Ua-J`\x01\x83aB\x82V[\x84\x90a\xFF\xFF\x16a.\xF1V[a-c\x84a\xFF\xFF\x84\x16a.\xF1V[` \x8B\x01Qa-s`\x01\x85aB\x82V[a\xFF\xFF\x16\x81Q\x81\x10a-\x87Wa-\x87a1\x85V[` \x02` \x01\x01Q\x8B` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a-\xA9Wa-\xA9a1\x85V[` \x02` \x01\x01Q\x96P\x96P\x96P\x96PPPPa.?V[\x80a-\xCB\x81aB\x9DV[\x91PPa-\x08V[Pa-\xE2\x82a\xFF\xFF\x83\x16a.\xF1V[a-\xF0\x83a\xFF\xFF\x84\x16a.\xF1V[\x89` \x01Q\x83a\xFF\xFF\x16\x81Q\x81\x10a.\nWa.\na1\x85V[` \x02` \x01\x01Q\x8A` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a.,Wa.,a1\x85V[` \x02` \x01\x01Q\x95P\x95P\x95P\x95PPP[\x92\x95\x91\x94P\x92PV[_\x84\x84\x10a.WWP\x80a$GV[_a.b\x87\x86aA\xB7V[\x90P_a.o\x88\x88aA\xB7V[\x90P_\x85\x85\x12\x15a.\x89Wa%(\x83\x83a%G\x88\x8AaA\xCAV[a%N\x83\x83a%!\x89\x89aA\xCAV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a.\xBBWP\x82\x82\x11[\x80a$\xD8WPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x14\x90P\x93\x92PPPV[_\x81\x83\x11a,\x86W\x81a,\x88V[_`\x10\x82\x10a/,W`@Q\x7FN#\xD05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P`\x10\x02\x1C\x90V[_`@\x82\x84\x03\x12\x15a/DW_\x80\xFD[P\x91\x90PV[_\x80\x83`\x1F\x84\x01\x12a/ZW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/qW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a/\x88W_\x80\xFD[\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15a/\xA1W_\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a/\xB8W_\x80\xFD[a/\xC4\x87\x83\x88\x01a/4V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a/\xD9W_\x80\xFD[Pa/\xE6\x86\x82\x87\x01a/JV[\x94\x97\x90\x96P\x93\x94PPPPV[_\x80\x83`\x1F\x84\x01\x12a0\x03W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0\x1AW_\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a/\x88W_\x80\xFD[_\x80` \x83\x85\x03\x12\x15a0EW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0[W_\x80\xFD[a0g\x85\x82\x86\x01a/\xF3V[\x90\x96\x90\x95P\x93PPPPV[_\x80_\x80`@\x85\x87\x03\x12\x15a0\x86W_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a0\x9DW_\x80\xFD[a0\xA9\x88\x83\x89\x01a/\xF3V[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a0\xC1W_\x80\xFD[Pa0\xCE\x87\x82\x88\x01a/JV[\x95\x98\x94\x97P\x95PPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08oW_\x80\xFD[\x805a1\x06\x81a0\xDAV[\x91\x90PV[_` \x82\x84\x03\x12\x15a1\x1BW_\x80\xFD[\x815a,\x88\x81a0\xDAV[_` \x82\x84\x03\x12\x15a16W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a1LW_\x80\xFD[a$\xD8\x84\x82\x85\x01a/4V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_[\x83\x81\x10\x15a1\xCCW\x81\x81\x01Q\x83\x82\x01R` \x01a1\xB4V[PP_\x91\x01RV[_\x81Q\x80\x84Ra1\xEB\x81` \x86\x01` \x86\x01a1\xB2V[`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x92\x90\x92\x01` \x01\x92\x91PPV[_\x81Q\x80\x84R` \x80\x85\x01\x94P` \x84\x01_[\x83\x81\x10\x15a2{W\x81Q\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x89R\x84\x82\x01Q\x85\x8A\x01R`@\x91\x82\x01Q\x16\x90\x88\x01R``\x90\x96\x01\x95\x90\x82\x01\x90`\x01\x01a20V[P\x94\x95\x94PPPPPV[_\x81Q`\xE0\x84Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16`\xE0\x86\x01R\x80` \x83\x01Q\x16a\x01\0\x86\x01R`@\x82\x01Qa\x01 \x86\x01R``\x82\x01Qa\x01@\x86\x01R\x80`\x80\x83\x01Q\x16a\x01`\x86\x01RP`\xA0\x81\x01Q\x90P`\xC0a\x01\x80\x85\x01Ra2\xF9a\x01\xA0\x85\x01\x82a1\xD4V[\x90P` \x83\x01Qa37` \x86\x01\x82\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x80\x82\x01Q\x90\x83\x01R`@\x90\x81\x01Q\x91\x01RV[P`@\x83\x01Q\x84\x82\x03`\x80\x86\x01Ra3O\x82\x82a2\x1DV[\x91PP``\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra3i\x82\x82a1\xD4V[\x91PP`\x80\x83\x01Q`\xC0\x85\x01R\x80\x91PP\x92\x91PPV[_`@\x82\x01`@\x83R\x80\x86Q\x80\x83R``\x85\x01\x91P``\x81`\x05\x1B\x86\x01\x01\x92P` \x80\x89\x01_[\x83\x81\x10\x15a3\xF3W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x88\x87\x03\x01\x85Ra3\xE1\x86\x83Qa2\x86V[\x95P\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01a3\xA7V[PP\x85\x84\x03\x81\x87\x01R\x86\x84R\x86\x88\x82\x86\x017_\x84\x88\x01\x82\x01R`\x1F\x90\x96\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x90\x92\x01\x90\x94\x01\x96\x95PPPPPPV[_\x825\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1\x836\x03\x01\x81\x12a4uW_\x80\xFD[\x91\x90\x91\x01\x92\x91PPV[_` \x82\x84\x03\x12\x15a4\x8FW_\x80\xFD[PQ\x91\x90PV[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a4\xC9W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a4\xE3W_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a/\x88W_\x80\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@R\x90V[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q`\xE0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xF3Wa5\xF3a1XV[`@R\x91\x90PV[_\x82`\x1F\x83\x01\x12a6\nW_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a6$Wa6$a1XV[a6U` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x84\x01\x16\x01a5\xACV[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a6iW_\x80\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[_`\xC0\x82\x84\x03\x12\x15a6\x95W_\x80\xFD[a6\x9Da4\xF7V[\x90P\x815a6\xAA\x81a0\xDAV[\x81R` \x82\x015a6\xBA\x81a0\xDAV[\x80` \x83\x01RP`@\x82\x015`@\x82\x01R``\x82\x015``\x82\x01R`\x80\x82\x015a6\xE3\x81a0\xDAV[`\x80\x82\x01R`\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7\x01W_\x80\xFD[a7\r\x84\x82\x85\x01a5\xFBV[`\xA0\x83\x01RP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a72Wa72a1XV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a7LW_\x80\xFD[a7Ta5 V[\x90P\x815\x81R` \x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7tW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a7\x84W_\x80\xFD[\x805a7\x97a7\x92\x82a7\x19V[a5\xACV[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a7\xB5W_\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a7\xD3W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a7\xBAV[\x80\x85\x87\x01RPPPPP\x92\x91PPV[_`\xA0\x82\x84\x03\x12\x15a7\xF3W_\x80\xFD[a7\xFBa5CV[\x90P\x815a8\x08\x81a0\xDAV[\x81R` \x82\x81\x015\x90\x82\x01R`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8-W_\x80\xFD[a89\x84\x82\x85\x01a7<V[`@\x83\x01RP``\x82\x015``\x82\x01R`\x80\x82\x015`\x80\x82\x01R\x92\x91PPV[_\x82`\x1F\x83\x01\x12a8hW_\x80\xFD[\x815` a8xa7\x92\x83a7\x19V[\x82\x81R`\x05\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x86\x84\x11\x15a8\x96W_\x80\xFD[\x82\x86\x01[\x84\x81\x10\x15a9mW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a8\xB9W_\x80\xFD[\x81\x89\x01\x91P`\xC0\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x8D\x03\x01\x12\x15a8\xF0W_\x80\xFD[a8\xF8a4\xF7V[\x87\x84\x015a9\x05\x81a0\xDAV[\x81R`@\x84\x81\x015\x89\x83\x01R``\x80\x86\x015\x85\x81\x11\x15a9#W_\x80\xFD[a91\x8F\x8C\x83\x8A\x01\x01a7<V[\x83\x85\x01RP`\x80\x94P\x84\x86\x015\x91Pa9I\x82a0\xDAV[\x82\x01R`\xA0\x84\x81\x015\x93\x82\x01\x93\x90\x93R\x92\x015\x90\x82\x01R\x83R\x91\x83\x01\x91\x83\x01a8\x9AV[P\x96\x95PPPPPPV[_`\xA0\x82\x84\x03\x12\x15a9\x88W_\x80\xFD[a9\x90a5CV[\x90P\x815\x81R` \x80\x83\x015a9\xA5\x81a0\xDAV[\x80\x82\x84\x01RP`@\x83\x015`@\x83\x01R``\x83\x015``\x83\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9\xD8W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a9\xE8W_\x80\xFD[\x805a9\xF6a7\x92\x82a7\x19V[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a:\x14W_\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a:2W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a:\x19V[`\x80\x86\x01RP\x92\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a:RW_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a:iW_\x80\xFD[\x90\x83\x01\x90`\xE0\x82\x86\x03\x12\x15a:|W_\x80\xFD[a:\x84a5fV[\x825\x82\x81\x11\x15a:\x92W_\x80\xFD[a:\x9E\x87\x82\x86\x01a6\x85V[\x82RPa:\xAD` \x84\x01a0\xFBV[` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015\x82\x81\x11\x15a:\xCDW_\x80\xFD[a:\xD9\x87\x82\x86\x01a7\xE3V[``\x83\x01RP`\x80\x83\x015\x82\x81\x11\x15a:\xF0W_\x80\xFD[a:\xFC\x87\x82\x86\x01a8YV[`\x80\x83\x01RP`\xA0\x83\x015\x82\x81\x11\x15a;\x13W_\x80\xFD[a;\x1F\x87\x82\x86\x01a9xV[`\xA0\x83\x01RP`\xC0\x83\x015\x82\x81\x11\x15a;6W_\x80\xFD[a;B\x87\x82\x86\x01a5\xFBV[`\xC0\x83\x01RP\x95\x94PPPPPV[\x7FV3DutchInput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\r\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1B\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`/\x82\x01R\x7Fuint256 maxAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`I\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`[\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`{\x82\x01R_`|\x82\x01a\"\x97V[\x7FV3DutchOutput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0E\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1C\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`0\x82\x01R\x7Faddress recipient,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`J\x82\x01R\x7Fuint256 minAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\\\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`n\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x8E\x82\x01R_`\x8F\x82\x01a\"\x97V[_\x86Qa=\xAA\x81\x84` \x8B\x01a1\xB2V[\x86Q\x90\x83\x01\x90a=\xBE\x81\x83` \x8B\x01a1\xB2V[\x86Q\x91\x01\x90a=\xD1\x81\x83` \x8A\x01a1\xB2V[\x85Q\x91\x01\x90a=\xE4\x81\x83` \x89\x01a1\xB2V[\x84Q\x91\x01\x90a=\xF7\x81\x83` \x88\x01a1\xB2V[\x01\x97\x96PPPPPPPV[` \x81R_a,\x88` \x83\x01\x84a2\x86V[_` \x80\x83\x85\x03\x12\x15a>&W_\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a><W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a>LW_\x80\xFD[\x80Qa>Za7\x92\x82a7\x19V[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a>xW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a>\xD2W\x80\x85\x8A\x03\x12\x15a>\x93W_\x80\xFD[a>\x9Ba5\x89V[\x85Qa>\xA6\x81a0\xDAV[\x81R\x85\x87\x01Q\x87\x82\x01R`@\x80\x87\x01Qa>\xBF\x81a0\xDAV[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a>}V[P\x97\x96PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\"\x97Wa\"\x97a>\xDEV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R`@` \x82\x01R_a$\xD8`@\x83\x01\x84a2\x86V[\x7FV3DutchOrder witness)\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x15\x88Q` a?\x85\x82\x84\x87\x01\x83\x8E\x01a1\xB2V[\x89Q\x91\x85\x01\x91a?\x9A\x81\x85\x85\x01\x84\x8E\x01a1\xB2V[\x89Q\x92\x01\x91a?\xAE\x81\x85\x85\x01\x84\x8D\x01a1\xB2V[\x88Q\x92\x01\x91a?\xC2\x81\x85\x85\x01\x84\x8C\x01a1\xB2V[\x87Q\x92\x01\x91a?\xD6\x81\x85\x85\x01\x84\x8B\x01a1\xB2V[\x86Q\x92\x01\x91a?\xEA\x81\x85\x85\x01\x84\x8A\x01a1\xB2V[\x91\x90\x91\x01\x90\x91\x01\x99\x98PPPPPPPPPV[_a\x01@a@-\x83\x8AQ\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[` \x89\x01Q`@\x84\x01R`@\x89\x01Q``\x84\x01Ra@n`\x80\x84\x01\x89\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`\xC0\x84\x01R\x85`\xE0\x84\x01R\x80a\x01\0\x84\x01Ra@\xA3\x81\x84\x01\x86a1\xD4V[\x90P\x82\x81\x03a\x01 \x84\x01Ra%[\x81\x85a1\xD4V[_\x83Qa@\xC9\x81\x84` \x88\x01a1\xB2V[\x83Q\x90\x83\x01\x90a@\xDD\x81\x83` \x88\x01a1\xB2V[\x01\x94\x93PPPPV[_` \x80\x83R`\xC0\x83\x01\x84Q\x82\x85\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x86\x01Q\x16`@\x85\x01R`@\x85\x01Q``\x85\x01R``\x85\x01Q`\x80\x85\x01R`\x80\x85\x01Q`\xA0\x80\x86\x01R\x81\x81Q\x80\x84R`\xE0\x87\x01\x91P\x84\x83\x01\x93P_\x92P[\x80\x83\x10\x15a9mW\x83Q\x82R\x92\x84\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x84\x01\x90aAIV[\x83\x81R\x82` \x82\x01R_\x82QaA\x86\x81`@\x85\x01` \x87\x01a1\xB2V[\x91\x90\x91\x01`@\x01\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15aA\xA6W_\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x81\x81\x03\x81\x81\x11\x15a\"\x97Wa\"\x97a>\xDEV[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15aA\xE9WaA\xE9a>\xDEV[P\x92\x91PPV[_\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03aB WaB a>\xDEV[P_\x03\x90V[\x80\x82\x01\x82\x81\x12_\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15aBEWaBEa>\xDEV[PP\x92\x91PPV[\x81Q_\x90\x82\x90` \x80\x86\x01\x84[\x83\x81\x10\x15aBvW\x81Q\x85R\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01aBZV[P\x92\x96\x95PPPPPPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15aA\xE9WaA\xE9a>\xDEV[_a\xFF\xFF\x80\x83\x16\x81\x81\x03aB\xB3WaB\xB3a>\xDEV[`\x01\x01\x93\x92PPPV\xFETokenPermissions(address token,uint256 amount)OrderInfo(address reactor,address swapper,uint256 nonce,uint256 deadline,address additionalValidationContract,bytes additionalValidationData)\xA2dipfsX\"\x12 v\xEBd\xBF$\x1A=&>\xC5\xA7-\xE2\x969\xED\xAD\xAF\xD9\xDC4{\x19\xB4\x92[\xF5\xD9s\xD5b\xEFdsolcC\0\x08\x18\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610096575f3560e01c80632d771389116100665780636999b3771161004c5780636999b3771461016a5780638da5cb5b14610196578063f2fde38b146101c1575f80fd5b80632d771389146101385780633f62192e14610157575f80fd5b80630d335884146100a15780630d7a16c3146100b657806312261ee7146100c957806313fb72c714610125575f80fd5b3661009d57005b5f80fd5b6100b46100af366004612f8f565b6101e0565b005b6100b46100c4366004613034565b610351565b3480156100d4575f80fd5b506100fc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b4610133366004613073565b6104af565b348015610143575f80fd5b506100b461015236600461310b565b610665565b6100b4610165366004613126565b610770565b348015610175575f80fd5b506001546100fc9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101a1575f80fd5b505f546100fc9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101cc575f80fd5b506100b46101db36600461310b565b610872565b6101e86109d9565b6040805160018082528183019092525f91816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816101fe5790505090506102a584610a4a565b815f815181106102b7576102b7613185565b60200260200101819052506102cb81610bf5565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061030b90849087908790600401613380565b5f604051808303815f87803b158015610322575f80fd5b505af1158015610334573d5f803e3d5ffd5b5050505061034181610c44565b5061034c6001600255565b505050565b6103596109d9565b805f8167ffffffffffffffff81111561037457610374613158565b60405190808252806020026020018201604052801561042e57816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816103925790505b5090505f5b8281101561048c5761046785858381811061045057610450613185565b90506020028101906104629190613443565b610a4a565b82828151811061047957610479613185565b6020908102919091010152600101610433565b5061049681610bf5565b61049f81610c44565b50506104ab6001600255565b5050565b6104b76109d9565b825f8167ffffffffffffffff8111156104d2576104d2613158565b60405190808252806020026020018201604052801561058c57816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816104f05790505b5090505f5b828110156105d3576105ae87878381811061045057610450613185565b8282815181106105c0576105c0613185565b6020908102919091010152600101610591565b506105dd81610bf5565b6040517f585da628000000000000000000000000000000000000000000000000000000008152339063585da6289061061d90849088908890600401613380565b5f604051808303815f87803b158015610634575f80fd5b505af1158015610646573d5f803e3d5ffd5b5050505061065381610c44565b505061065f6001600255565b50505050565b5f5473ffffffffffffffffffffffffffffffffffffffff1633146106ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527fb904ae9529e373e48bc82df4326cceaf1b4c472babf37f5b7dec46fecc6b53e0910160405180910390a15050565b6107786109d9565b6040805160018082528183019092525f91816020015b60408051610160810182525f60a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528085019190915293830181905280830152608082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161078e57905050905061083582610a4a565b815f8151811061084757610847613185565b602002602001018190525061085b81610bf5565b61086481610c44565b5061086f6001600255565b50565b5f5473ffffffffffffffffffffffffffffffffffffffff1633146108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016106e1565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b5f606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d0919061347f565b905090565b4390565b6002805403610a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106e1565b60028055565b60408051610160810182525f60a0820181815260c0830182905260e083018290526101008301829052610120830182905260606101408401819052908352835180820185528281526020808201849052818601849052840152928201839052828201929092526080810182905290610ac28380613496565b810190610acf9190613a42565b90505f610adb82610d8f565b9050610ae78183611073565b610af0826110cf565b610af98261122f565b5f610b267f000000000000000000000000000000000000000000000000000000000000000063ffffffff16565b90506040518060a00160405280845f01518152602001610b5c8560a001515f01518487606001516113349092919063ffffffff16565b815260a0850151516080860151602090920191610b7991856113f9565b8152602001868060200190610b8e9190613496565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250505090825250602090810184905260a0850151908101518151604090920151929650610bed92879290856114de565b505050919050565b80515f5b8181101561034c575f838281518110610c1457610c14613185565b60200260200101519050610c27816114f2565b610c3181336119cf565b610c3b8133611acc565b50600101610bf9565b80515f5b81811015610d7e575f838281518110610c6357610c63613185565b602002602001015190505f81604001515190505f5b81811015610ce0575f83604001518281518110610c9757610c97613185565b60200260200101519050610cd781604001518260200151835f015173ffffffffffffffffffffffffffffffffffffffff16611ec69092919063ffffffff16565b50600101610c78565b50815f01516020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16868581518110610d2857610d28613185565b6020026020010151608001517f78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66855f015160400151604051610d6c91815260200190565b60405180910390a45050600101610c48565b5047156104ab576104ab3347611f0d565b6040517f563344757463684f72646572280000000000000000000000000000000000000060208201527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8201527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8201527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8201527f56334475746368496e7075742062617365496e7075742c00000000000000000060658201527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c8201525f90609801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208301527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348301527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b83015290606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d8083529091906142ec6020830139604051602001610f7190613b51565b604051602081830303815290604052604051602001610f8f90613c62565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610fce9594939291602001613d99565b60405160208183030381529060405280519060200120610ff0835f0151611fa3565b83602001518460400151611007866060015161203c565b611014876080015161218b565b60408051602081019790975286019490945273ffffffffffffffffffffffffffffffffffffffff9092166060850152608084015260a083015260c082015260e0015b604051602081830303815290604052805190602001209050919050565b8051606001514211156110b2576040517fb08ce5b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516104ab906110c58385612229565b8360c0015161229d565b60a0810151606001511561113b578060600151602001518160a00151606001511115611127576040517fac9143e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a081015160609081015190820151602001525b8060800151518160a00151608001515114611182576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6080810151515f5b8181101561034c575f836080015182815181106111a9576111a9613185565b602002602001015190505f8460a001516080015183815181106111ce576111ce613185565b60200260200101519050805f1461122557816020015181101561121d576040517fa305df8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602082018190525b505060010161118a565b5f6112478260400151486123c090919063ffffffff16565b90508160600151608001515f1461129f575f61126b836060015160800151836123f9565b9050611294815f856060015160600151866060015160200151612431909392919063ffffffff16565b606084015160200152505b6080820151515f5b8181101561065f575f846080015182815181106112c6576112c6613185565b602002602001015190508060a001515f1461132b575f6112ea8260a00151866123f9565b60808301516020840151919250611324919083907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612450565b6020830152505b506001016112a7565b61136b60405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81525090565b5f6040518060e0016040528086604001518152602001866020015181526020018581526020018481526020015f8152602001866060015181526020016124e081525090505f6113b982612568565b6040805160608082018352895173ffffffffffffffffffffffffffffffffffffffff16825260208201939093529790910151908701525093949350505050565b82516060908067ffffffffffffffff81111561141757611417613158565b60405190808252806020026020018201604052801561147f57816020015b604080516060810182525f80825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114355790505b5091505f5b818110156114d5576114b08682815181106114a1576114a1613185565b6020026020010151868661266d565b8382815181106114c2576114c2613185565b6020908102919091010152600101611484565b50509392505050565b6114eb8585858585612752565b5050505050565b60015473ffffffffffffffffffffffffffffffffffffffff166115125750565b6001546040517f8aa6cf030000000000000000000000000000000000000000000000000000000081525f9173ffffffffffffffffffffffffffffffffffffffff1690638aa6cf0390611568908590600401613e03565b5f60405180830381865afa158015611582573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115c79190810190613e15565b6040830151518151919250905f6115de8284613f0b565b67ffffffffffffffff8111156115f6576115f6613158565b60405190808252806020026020018201604052801561165e57816020015b604080516060810182525f80825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116145790505b5090505f5b838110156116ae578560400151818151811061168157611681613185565b602002602001015182828151811061169b5761169b613185565b6020908102919091010152600101611663565b505f805f5b848110156119be575f8782815181106116ce576116ce613185565b602002602001015190505f5b82811015611789578881815181106116f4576116f4613185565b60200260200101515f015173ffffffffffffffffffffffffffffffffffffffff16825f015173ffffffffffffffffffffffffffffffffffffffff16036117815781516040517ffff0830300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106e1565b6001016116da565b505f805b88811015611846575f8b6040015182815181106117ac576117ac613185565b60200260200101519050835f015173ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff160361183d578515611827576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516118369084613f0b565b9250600196505b5060010161178d565b50815160208b01515173ffffffffffffffffffffffffffffffffffffffff9182169116036118bf5784156118a6576040517fedc7e2e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808b015101516118b89082613f0b565b9050600193505b805f036119135781516040517feddf07f500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016106e1565b6119218160056127106127f2565b82602001511115611994578151602083015160408085015190517f82e7565600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260248101929092529190911660448201526064016106e1565b8186848a01815181106119a9576119a9613185565b602090810291909101015250506001016116b3565b505050604090940193909352505050565b81515173ffffffffffffffffffffffffffffffffffffffff163014611a20576040517f4ddf4a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516080015173ffffffffffffffffffffffffffffffffffffffff16156104ab578151608001516040517f6e84ba2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690636e84ba2b90611a9c9084908690600401613f1e565b5f6040518083038186803b158015611ab2575f80fd5b505afa158015611ac4573d5f803e3d5ffd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663137c29fe611b8b846040805160a0810182525f606082018181526080830182905282526020820181905291810191909152506040805160a081018252602080840180515173ffffffffffffffffffffffffffffffffffffffff1660608085019182529151850151608085015283528451840151918301919091529251909201519082015290565b6040805180820182525f808252602091820152815180830190925273ffffffffffffffffffffffffffffffffffffffff861682528087015181015190820152855f0151602001518660800151604051602001611c56907f4e6f6e6c696e656172447574636844656361792800000000000000000000000081527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060148201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000602b82015260440190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815260c08301909152608d8083529091906142ec60208301396040518060600160405280602e81526020016142be602e9139604051602001611cc090613b51565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f563344757463684f72646572280000000000000000000000000000000000000060208401527f4f72646572496e666f20696e666f2c0000000000000000000000000000000000602d8401527f6164647265737320636f7369676e65722c000000000000000000000000000000603c8401527f75696e74323536207374617274696e67426173654665652c0000000000000000604d8401527f56334475746368496e7075742062617365496e7075742c00000000000000000060658401527f563344757463684f75747075745b5d20626173654f7574707574732900000000607c840152815160788185030181526098840190925291611df09060b801613c62565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052611e30969594939291602001613f4c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260608a01517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b168352611e9d9695949392600401613ffe565b5f604051808303815f87803b158015611eb4575f80fd5b505af1158015611ac4573d5f803e3d5ffd5b73ffffffffffffffffffffffffffffffffffffffff8316611eeb5761034c8282611f0d565b61034c73ffffffffffffffffffffffffffffffffffffffff841633848461282c565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114611f63576040519150601f19603f3d011682016040523d82523d5f602084013e611f68565b606091505b505090508061034c576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6040518060c00160405280608d81526020016142ec608d913980516020918201208351848301516040808701516060880151608089015160a08a0151805190890120935161105698939492939192910196875273ffffffffffffffffffffffffffffffffffffffff958616602088015293851660408701526060860192909252608085015290911660a083015260c082015260e00190565b5f60405160200161204c90613b51565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b840152815160448185030181526064840190925261210c929091906084016140b8565b60405160208183030381529060405280519060200120825f015183602001516121388560400151612913565b60608087015160808089015160408051602081019990995273ffffffffffffffffffffffffffffffffffffffff909716968801969096529186019390935284015260a083015260c082015260e001611056565b5f80825160200267ffffffffffffffff8111156121aa576121aa613158565b6040519080825280601f01601f1916602001820160405280156121d4576020820181803683370190505b5083519091505f5b81811015612219575f6122078683815181106121fa576121fa613185565b6020026020010151612a0f565b602083810286010152506001016121dc565b5050805160209091012092915050565b5f81468460a0015160405160200161224191906140e6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261227e939291602001614169565b6040516020818303038152906040528051906020012090505b92915050565b5f80828060200190518101906122b39190614195565b915091505f836040815181106122cb576122cb613185565b01602090810151604080515f80825293810180835289905260f89290921c9082018190526060820186905260808201859052925060019060a0016020604051602081039080840390855afa158015612325573d5f803e3d5ffd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16141580612380575073ffffffffffffffffffffffffffffffffffffffff8116155b156123b7576040517fd7815be100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b5f818310156123ec576123db6123d684846141b7565b612b71565b6123e5905f6141ca565b9050612297565b6123e56123d683856141b7565b5f808212612410576123e58383633b9aca006127f2565b61242861241c836141f0565b8490633b9aca00612c26565b6123e5906141f0565b5f6124478561244086846141ca565b8585612450565b95945050505050565b5f808412156124b1575f612463856141f0565b905085612490827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6141b7565b101561249f57829150506124d8565b6124a98187613f0b565b9150506124cd565b838510156124c05750816124d8565b6124ca84866141b7565b90505b612447818484612c68565b949350505050565b5f8484106124ef575080612447565b5f6124fa87866141b7565b90505f61250788886141b7565b90505f85851215612538576125288383612521888a6141ca565b91906127f2565b612531906141f0565b9050612551565b61254e838361254789896141ca565b9190612c26565b90505b61255b8187614226565b9998505050505050505050565b5f6010825f0151602001515111156125ac576040517f0e99676600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816060015182604001511015806125c7575081516020015151155b156125e657608082015160a08301516020840151612297929091612c68565b5f612606836040015184606001516125fe91906141b7565b61ffff612c78565b90505f805f80612619875f015186612c8f565b93509350935093505f6126438561ffff168561ffff168861ffff1686868d60c0015163ffffffff16565b608089015160a08a015160208b015192935061266192918491612450565b98975050505050505050565b604080516060810182525f80825260208201819052918101919091525f6040518060e001604052808660400151815260200186602001518152602001858152602001848152602001866080015181526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001612e4881525090505f6126f782612568565b90506040518060600160405280875f015173ffffffffffffffffffffffffffffffffffffffff168152602001828152602001876060015173ffffffffffffffffffffffffffffffffffffffff16815250925050509392505050565b61275d848483612e98565b6114eb5781612798576040517fb9ec1e9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408501515f5b81518110156123b7575f8282815181106127bb576127bb613185565b602002602001015190506127e4856127106127d69190613f0b565b602083015190612710612c26565b60209091015260010161279f565b5f827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0484118302158202612825575f80fd5b5091020490565b5f6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260205f6064835f8a5af13d15601f3d1160015f5114161716915050806114eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016106e1565b6040517f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208201527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348201527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8201525f9060640160405160208183030381529060405280519060200120825f015183602001516040516020016129bc919061424d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301949094528101919091526060810191909152608001611056565b5f604051602001612a1f90613c62565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282527f4e6f6e6c696e656172447574636844656361792800000000000000000000000060208401527f75696e743235362072656c6174697665426c6f636b732c00000000000000000060348401527f696e743235365b5d2072656c6174697665416d6f756e74732900000000000000604b8401528151604481850301815260648401909252612adf929091906084016140b8565b60405160208183030381529060405280519060200120825f01518360200151612b0b8560400151612913565b60608087015160808089015160a0808b015160408051602081019b909b5273ffffffffffffffffffffffffffffffffffffffff998a16908b01529489019690965290870193909352939093169184019190915260c083015260e082015261010001611056565b5f7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016106e1565b5090565b5f827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0484118302158202612c59575f80fd5b50910281810615159190040190565b5f6124d8612c768585612ee3565b835b5f818310612c865781612c88565b825b9392505050565b5f805f805f612c9e875f015190565b905061ffff8616612caf825f612ef1565b61ffff1610612cf0575f612cc38282612ef1565b5f89602001515f81518110612cda57612cda613185565b6020026020010151945094509450945050612e3f565b5f6001886020015151612d039190614282565b905060015b8161ffff168161ffff1611612dd3578761ffff16612d338261ffff1685612ef190919063ffffffff16565b61ffff1610612dc157612d55612d4a600183614282565b849061ffff16612ef1565b612d638461ffff8416612ef1565b60208b0151612d73600185614282565b61ffff1681518110612d8757612d87613185565b60200260200101518b602001518461ffff1681518110612da957612da9613185565b60200260200101519650965096509650505050612e3f565b80612dcb8161429d565b915050612d08565b50612de28261ffff8316612ef1565b612df08361ffff8416612ef1565b89602001518361ffff1681518110612e0a57612e0a613185565b60200260200101518a602001518461ffff1681518110612e2c57612e2c613185565b6020026020010151955095509550955050505b92959194509250565b5f848410612e57575080612447565b5f612e6287866141b7565b90505f612e6f88886141b7565b90505f85851215612e89576125288383612547888a6141ca565b61254e838361252189896141ca565b5f73ffffffffffffffffffffffffffffffffffffffff84161580612ebb57508282115b806124d8575073ffffffffffffffffffffffffffffffffffffffff8416331490509392505050565b5f818311612c865781612c88565b5f60108210612f2c576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506010021c90565b5f60408284031215612f44575f80fd5b50919050565b5f8083601f840112612f5a575f80fd5b50813567ffffffffffffffff811115612f71575f80fd5b602083019150836020828501011115612f88575f80fd5b9250929050565b5f805f60408486031215612fa1575f80fd5b833567ffffffffffffffff80821115612fb8575f80fd5b612fc487838801612f34565b94506020860135915080821115612fd9575f80fd5b50612fe686828701612f4a565b9497909650939450505050565b5f8083601f840112613003575f80fd5b50813567ffffffffffffffff81111561301a575f80fd5b6020830191508360208260051b8501011115612f88575f80fd5b5f8060208385031215613045575f80fd5b823567ffffffffffffffff81111561305b575f80fd5b61306785828601612ff3565b90969095509350505050565b5f805f8060408587031215613086575f80fd5b843567ffffffffffffffff8082111561309d575f80fd5b6130a988838901612ff3565b909650945060208701359150808211156130c1575f80fd5b506130ce87828801612f4a565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461086f575f80fd5b8035613106816130da565b919050565b5f6020828403121561311b575f80fd5b8135612c88816130da565b5f60208284031215613136575f80fd5b813567ffffffffffffffff81111561314c575f80fd5b6124d884828501612f34565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5b838110156131cc5781810151838201526020016131b4565b50505f910152565b5f81518084526131eb8160208601602086016131b2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b5f815180845260208085019450602084015f5b8381101561327b578151805173ffffffffffffffffffffffffffffffffffffffff908116895284820151858a0152604091820151169088015260609096019590820190600101613230565b509495945050505050565b5f815160e0845273ffffffffffffffffffffffffffffffffffffffff8082511660e08601528060208301511661010086015260408201516101208601526060820151610140860152806080830151166101608601525060a0810151905060c06101808501526132f96101a08501826131d4565b905060208301516133376020860182805173ffffffffffffffffffffffffffffffffffffffff16825260208082015190830152604090810151910152565b506040830151848203608086015261334f828261321d565b915050606083015184820360a086015261336982826131d4565b915050608083015160c08501528091505092915050565b5f604082016040835280865180835260608501915060608160051b860101925060208089015f5b838110156133f3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526133e1868351613286565b955093820193908201906001016133a7565b5050858403818701528684528688828601375f848801820152601f9096017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092019094019695505050505050565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613475575f80fd5b9190910192915050565b5f6020828403121561348f575f80fd5b5051919050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126134c9575f80fd5b83018035915067ffffffffffffffff8211156134e3575f80fd5b602001915036819003821315612f88575f80fd5b60405160c0810167ffffffffffffffff8111828210171561351a5761351a613158565b60405290565b6040805190810167ffffffffffffffff8111828210171561351a5761351a613158565b60405160a0810167ffffffffffffffff8111828210171561351a5761351a613158565b60405160e0810167ffffffffffffffff8111828210171561351a5761351a613158565b6040516060810167ffffffffffffffff8111828210171561351a5761351a613158565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135f3576135f3613158565b604052919050565b5f82601f83011261360a575f80fd5b813567ffffffffffffffff81111561362457613624613158565b61365560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016135ac565b818152846020838601011115613669575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60c08284031215613695575f80fd5b61369d6134f7565b905081356136aa816130da565b815260208201356136ba816130da565b80602083015250604082013560408201526060820135606082015260808201356136e3816130da565b608082015260a082013567ffffffffffffffff811115613701575f80fd5b61370d848285016135fb565b60a08301525092915050565b5f67ffffffffffffffff82111561373257613732613158565b5060051b60200190565b5f6040828403121561374c575f80fd5b613754613520565b90508135815260208083013567ffffffffffffffff811115613774575f80fd5b8301601f81018513613784575f80fd5b803561379761379282613719565b6135ac565b81815260059190911b820183019083810190878311156137b5575f80fd5b928401925b828410156137d3578335825292840192908401906137ba565b8085870152505050505092915050565b5f60a082840312156137f3575f80fd5b6137fb613543565b90508135613808816130da565b815260208281013590820152604082013567ffffffffffffffff81111561382d575f80fd5b6138398482850161373c565b604083015250606082013560608201526080820135608082015292915050565b5f82601f830112613868575f80fd5b8135602061387861379283613719565b82815260059290921b84018101918181019086841115613896575f80fd5b8286015b8481101561396d57803567ffffffffffffffff808211156138b9575f80fd5b818901915060c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156138f0575f80fd5b6138f86134f7565b87840135613905816130da565b81526040848101358983015260608086013585811115613923575f80fd5b6139318f8c838a010161373c565b838501525060809450848601359150613949826130da565b82015260a0848101359382019390935292013590820152835291830191830161389a565b509695505050505050565b5f60a08284031215613988575f80fd5b613990613543565b9050813581526020808301356139a5816130da565b8082840152506040830135604083015260608301356060830152608083013567ffffffffffffffff8111156139d8575f80fd5b8301601f810185136139e8575f80fd5b80356139f661379282613719565b81815260059190911b82018301908381019087831115613a14575f80fd5b928401925b82841015613a3257833582529284019290840190613a19565b6080860152509295945050505050565b5f60208284031215613a52575f80fd5b813567ffffffffffffffff80821115613a69575f80fd5b9083019060e08286031215613a7c575f80fd5b613a84613566565b823582811115613a92575f80fd5b613a9e87828601613685565b825250613aad602084016130fb565b602082015260408301356040820152606083013582811115613acd575f80fd5b613ad9878286016137e3565b606083015250608083013582811115613af0575f80fd5b613afc87828601613859565b60808301525060a083013582811115613b13575f80fd5b613b1f87828601613978565b60a08301525060c083013582811115613b36575f80fd5b613b42878286016135fb565b60c08301525095945050505050565b7f56334475746368496e707574280000000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600d8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601b8201527f4e6f6e6c696e656172447574636844656361792063757276652c000000000000602f8201527f75696e74323536206d6178416d6f756e742c000000000000000000000000000060498201527f75696e743235362061646a7573746d656e745065724777656942617365466565605b8201527f2900000000000000000000000000000000000000000000000000000000000000607b8201525f607c8201612297565b7f563344757463684f75747075742800000000000000000000000000000000000081527f6164647265737320746f6b656e2c000000000000000000000000000000000000600e8201527f75696e74323536207374617274416d6f756e742c000000000000000000000000601c8201527f4e6f6e6c696e656172447574636844656361792063757276652c00000000000060308201527f6164647265737320726563697069656e742c0000000000000000000000000000604a8201527f75696e74323536206d696e416d6f756e742c0000000000000000000000000000605c8201527f75696e743235362061646a7573746d656e745065724777656942617365466565606e8201527f2900000000000000000000000000000000000000000000000000000000000000608e8201525f608f8201612297565b5f8651613daa818460208b016131b2565b865190830190613dbe818360208b016131b2565b8651910190613dd1818360208a016131b2565b8551910190613de48183602089016131b2565b8451910190613df78183602088016131b2565b01979650505050505050565b602081525f612c886020830184613286565b5f6020808385031215613e26575f80fd5b825167ffffffffffffffff811115613e3c575f80fd5b8301601f81018513613e4c575f80fd5b8051613e5a61379282613719565b81815260609182028301840191848201919088841115613e78575f80fd5b938501935b83851015613ed25780858a031215613e93575f80fd5b613e9b613589565b8551613ea6816130da565b81528587015187820152604080870151613ebf816130da565b9082015283529384019391850191613e7d565b50979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561229757612297613ede565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201525f6124d86040830184613286565b7f563344757463684f72646572207769746e65737329000000000000000000000081525f601588516020613f8582848701838e016131b2565b895191850191613f9a81858501848e016131b2565b8951920191613fae81858501848d016131b2565b8851920191613fc281858501848c016131b2565b8751920191613fd681858501848b016131b2565b8651920191613fea81858501848a016131b2565b919091019091019998505050505050505050565b5f61014061402d838a51805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b602089015160408401526040890151606084015261406e6080840189805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff871660c08401528560e0840152806101008401526140a3818401866131d4565b905082810361012084015261255b81856131d4565b5f83516140c98184602088016131b2565b8351908301906140dd8183602088016131b2565b01949350505050565b5f602080835260c0830184518285015273ffffffffffffffffffffffffffffffffffffffff828601511660408501526040850151606085015260608501516080850152608085015160a08086015281815180845260e08701915084830193505f92505b8083101561396d5783518252928401926001929092019190840190614149565b8381528260208201525f82516141868160408501602087016131b2565b91909101604001949350505050565b5f80604083850312156141a6575f80fd5b505080516020909101519092909150565b8181038181111561229757612297613ede565b8181035f8312801583831316838312821617156141e9576141e9613ede565b5092915050565b5f7f8000000000000000000000000000000000000000000000000000000000000000820361422057614220613ede565b505f0390565b8082018281125f83128015821682158216171561424557614245613ede565b505092915050565b81515f9082906020808601845b838110156142765781518552938201939082019060010161425a565b50929695505050505050565b61ffff8281168282160390808211156141e9576141e9613ede565b5f61ffff8083168181036142b3576142b3613ede565b600101939250505056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74294f72646572496e666f28616464726573732072656163746f722c6164647265737320737761707065722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c61646472657373206164646974696f6e616c56616c69646174696f6e436f6e74726163742c6279746573206164646974696f6e616c56616c69646174696f6e4461746129a264697066735822122076eb64bf241a3d263ec5a72de29639edadafd9dc347b19b4925bf5d973d562ef64736f6c63430008180033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\x96W_5`\xE0\x1C\x80c-w\x13\x89\x11a\0fW\x80ci\x99\xB3w\x11a\0LW\x80ci\x99\xB3w\x14a\x01jW\x80c\x8D\xA5\xCB[\x14a\x01\x96W\x80c\xF2\xFD\xE3\x8B\x14a\x01\xC1W_\x80\xFD[\x80c-w\x13\x89\x14a\x018W\x80c?b\x19.\x14a\x01WW_\x80\xFD[\x80c\r3X\x84\x14a\0\xA1W\x80c\rz\x16\xC3\x14a\0\xB6W\x80c\x12&\x1E\xE7\x14a\0\xC9W\x80c\x13\xFBr\xC7\x14a\x01%W_\x80\xFD[6a\0\x9DW\0[_\x80\xFD[a\0\xB4a\0\xAF6`\x04a/\x8FV[a\x01\xE0V[\0[a\0\xB4a\0\xC46`\x04a04V[a\x03QV[4\x80\x15a\0\xD4W_\x80\xFD[Pa\0\xFC\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0\xB4a\x0136`\x04a0sV[a\x04\xAFV[4\x80\x15a\x01CW_\x80\xFD[Pa\0\xB4a\x01R6`\x04a1\x0BV[a\x06eV[a\0\xB4a\x01e6`\x04a1&V[a\x07pV[4\x80\x15a\x01uW_\x80\xFD[P`\x01Ta\0\xFC\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xA1W_\x80\xFD[P_Ta\0\xFC\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[4\x80\x15a\x01\xCCW_\x80\xFD[Pa\0\xB4a\x01\xDB6`\x04a1\x0BV[a\x08rV[a\x01\xE8a\t\xD9V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R_\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x01\xFEW\x90PP\x90Pa\x02\xA5\x84a\nJV[\x81_\x81Q\x81\x10a\x02\xB7Wa\x02\xB7a1\x85V[` \x02` \x01\x01\x81\x90RPa\x02\xCB\x81a\x0B\xF5V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x03\x0B\x90\x84\x90\x87\x90\x87\x90`\x04\x01a3\x80V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\"W_\x80\xFD[PZ\xF1\x15\x80\x15a\x034W=_\x80>=_\xFD[PPPPa\x03A\x81a\x0CDV[Pa\x03L`\x01`\x02UV[PPPV[a\x03Ya\t\xD9V[\x80_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03tWa\x03ta1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04.W\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x03\x92W\x90P[P\x90P_[\x82\x81\x10\x15a\x04\x8CWa\x04g\x85\x85\x83\x81\x81\x10a\x04PWa\x04Pa1\x85V[\x90P` \x02\x81\x01\x90a\x04b\x91\x90a4CV[a\nJV[\x82\x82\x81Q\x81\x10a\x04yWa\x04ya1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x043V[Pa\x04\x96\x81a\x0B\xF5V[a\x04\x9F\x81a\x0CDV[PPa\x04\xAB`\x01`\x02UV[PPV[a\x04\xB7a\t\xD9V[\x82_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xD2Wa\x04\xD2a1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x05\x8CW\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x04\xF0W\x90P[P\x90P_[\x82\x81\x10\x15a\x05\xD3Wa\x05\xAE\x87\x87\x83\x81\x81\x10a\x04PWa\x04Pa1\x85V[\x82\x82\x81Q\x81\x10a\x05\xC0Wa\x05\xC0a1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x05\x91V[Pa\x05\xDD\x81a\x0B\xF5V[`@Q\x7FX]\xA6(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3\x90cX]\xA6(\x90a\x06\x1D\x90\x84\x90\x88\x90\x88\x90`\x04\x01a3\x80V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x064W_\x80\xFD[PZ\xF1\x15\x80\x15a\x06FW=_\x80>=_\xFD[PPPPa\x06S\x81a\x0CDV[PPa\x06_`\x01`\x02UV[PPPPV[_Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x06\xEAW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`\x01\x80Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x16\x81\x17\x90\x93U`@\x80Q\x91\x90\x92\x16\x80\x82R` \x82\x01\x93\x90\x93R\x7F\xB9\x04\xAE\x95)\xE3s\xE4\x8B\xC8-\xF42l\xCE\xAF\x1BLG+\xAB\xF3\x7F[}\xECF\xFE\xCCkS\xE0\x91\x01`@Q\x80\x91\x03\x90\xA1PPV[a\x07xa\t\xD9V[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R_\x91\x81` \x01[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x80\x85\x01\x91\x90\x91R\x93\x83\x01\x81\x90R\x80\x83\x01R`\x80\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x07\x8EW\x90PP\x90Pa\x085\x82a\nJV[\x81_\x81Q\x81\x10a\x08GWa\x08Ga1\x85V[` \x02` \x01\x01\x81\x90RPa\x08[\x81a\x0B\xF5V[a\x08d\x81a\x0CDV[Pa\x08o`\x01`\x02UV[PV[_Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163\x14a\x08\xF2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FUNAUTHORIZED\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06\xE1V[_\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x90\x81\x17\x82U`@Q\x90\x913\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PV[_`ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA3\xB1\xB3\x1D`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xACW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD0\x91\x90a4\x7FV[\x90P\x90V[C\x90V[`\x02\x80T\x03a\nDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FReentrancyGuard: reentrant call\0`D\x82\x01R`d\x01a\x06\xE1V[`\x02\x80UV[`@\x80Qa\x01`\x81\x01\x82R_`\xA0\x82\x01\x81\x81R`\xC0\x83\x01\x82\x90R`\xE0\x83\x01\x82\x90Ra\x01\0\x83\x01\x82\x90Ra\x01 \x83\x01\x82\x90R``a\x01@\x84\x01\x81\x90R\x90\x83R\x83Q\x80\x82\x01\x85R\x82\x81R` \x80\x82\x01\x84\x90R\x81\x86\x01\x84\x90R\x84\x01R\x92\x82\x01\x83\x90R\x82\x82\x01\x92\x90\x92R`\x80\x81\x01\x82\x90R\x90a\n\xC2\x83\x80a4\x96V[\x81\x01\x90a\n\xCF\x91\x90a:BV[\x90P_a\n\xDB\x82a\r\x8FV[\x90Pa\n\xE7\x81\x83a\x10sV[a\n\xF0\x82a\x10\xCFV[a\n\xF9\x82a\x12/V[_a\x0B&\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0c\xFF\xFF\xFF\xFF\x16V[\x90P`@Q\x80`\xA0\x01`@R\x80\x84_\x01Q\x81R` \x01a\x0B\\\x85`\xA0\x01Q_\x01Q\x84\x87``\x01Qa\x134\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x81R`\xA0\x85\x01QQ`\x80\x86\x01Q` \x90\x92\x01\x91a\x0By\x91\x85a\x13\xF9V[\x81R` \x01\x86\x80` \x01\x90a\x0B\x8E\x91\x90a4\x96V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPPP\x90\x82RP` \x90\x81\x01\x84\x90R`\xA0\x85\x01Q\x90\x81\x01Q\x81Q`@\x90\x92\x01Q\x92\x96Pa\x0B\xED\x92\x87\x92\x90\x85a\x14\xDEV[PPP\x91\x90PV[\x80Q_[\x81\x81\x10\x15a\x03LW_\x83\x82\x81Q\x81\x10a\x0C\x14Wa\x0C\x14a1\x85V[` \x02` \x01\x01Q\x90Pa\x0C'\x81a\x14\xF2V[a\x0C1\x813a\x19\xCFV[a\x0C;\x813a\x1A\xCCV[P`\x01\x01a\x0B\xF9V[\x80Q_[\x81\x81\x10\x15a\r~W_\x83\x82\x81Q\x81\x10a\x0CcWa\x0Cca1\x85V[` \x02` \x01\x01Q\x90P_\x81`@\x01QQ\x90P_[\x81\x81\x10\x15a\x0C\xE0W_\x83`@\x01Q\x82\x81Q\x81\x10a\x0C\x97Wa\x0C\x97a1\x85V[` \x02` \x01\x01Q\x90Pa\x0C\xD7\x81`@\x01Q\x82` \x01Q\x83_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1E\xC6\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[P`\x01\x01a\x0CxV[P\x81_\x01Q` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x85\x81Q\x81\x10a\r(Wa\r(a1\x85V[` \x02` \x01\x01Q`\x80\x01Q\x7Fx\xAD~\xC0\xE9\xF8\x9Et\x01*\xFAXs\x8Bkf\x1C\x02L\xB0\xFD\x18^\xE2\xF6\x16\xC0\xA2\x89$\xBDf\x85_\x01Q`@\x01Q`@Qa\rl\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4PP`\x01\x01a\x0CHV[PG\x15a\x04\xABWa\x04\xAB3Ga\x1F\rV[`@Q\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x82\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x82\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x82\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x82\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x82\x01R_\x90`\x98\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x83\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x83\x01R\x90`d\x01`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aB\xEC` \x83\x019`@Q` \x01a\x0Fq\x90a;QV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q` \x01a\x0F\x8F\x90a<bV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x0F\xCE\x95\x94\x93\x92\x91` \x01a=\x99V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\x0F\xF0\x83_\x01Qa\x1F\xA3V[\x83` \x01Q\x84`@\x01Qa\x10\x07\x86``\x01Qa <V[a\x10\x14\x87`\x80\x01Qa!\x8BV[`@\x80Q` \x81\x01\x97\x90\x97R\x86\x01\x94\x90\x94Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16``\x85\x01R`\x80\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x80Q``\x01QB\x11\x15a\x10\xB2W`@Q\x7F\xB0\x8C\xE5\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x04\xAB\x90a\x10\xC5\x83\x85a\")V[\x83`\xC0\x01Qa\"\x9DV[`\xA0\x81\x01Q``\x01Q\x15a\x11;W\x80``\x01Q` \x01Q\x81`\xA0\x01Q``\x01Q\x11\x15a\x11'W`@Q\x7F\xAC\x91C\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\xA0\x81\x01Q``\x90\x81\x01Q\x90\x82\x01Q` \x01R[\x80`\x80\x01QQ\x81`\xA0\x01Q`\x80\x01QQ\x14a\x11\x82W`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x80\x81\x01QQ_[\x81\x81\x10\x15a\x03LW_\x83`\x80\x01Q\x82\x81Q\x81\x10a\x11\xA9Wa\x11\xA9a1\x85V[` \x02` \x01\x01Q\x90P_\x84`\xA0\x01Q`\x80\x01Q\x83\x81Q\x81\x10a\x11\xCEWa\x11\xCEa1\x85V[` \x02` \x01\x01Q\x90P\x80_\x14a\x12%W\x81` \x01Q\x81\x10\x15a\x12\x1DW`@Q\x7F\xA3\x05\xDF\x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x82\x01\x81\x90R[PP`\x01\x01a\x11\x8AV[_a\x12G\x82`@\x01QHa#\xC0\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x81``\x01Q`\x80\x01Q_\x14a\x12\x9FW_a\x12k\x83``\x01Q`\x80\x01Q\x83a#\xF9V[\x90Pa\x12\x94\x81_\x85``\x01Q``\x01Q\x86``\x01Q` \x01Qa$1\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[``\x84\x01Q` \x01RP[`\x80\x82\x01QQ_[\x81\x81\x10\x15a\x06_W_\x84`\x80\x01Q\x82\x81Q\x81\x10a\x12\xC6Wa\x12\xC6a1\x85V[` \x02` \x01\x01Q\x90P\x80`\xA0\x01Q_\x14a\x13+W_a\x12\xEA\x82`\xA0\x01Q\x86a#\xF9V[`\x80\x83\x01Q` \x84\x01Q\x91\x92Pa\x13$\x91\x90\x83\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa$PV[` \x83\x01RP[P`\x01\x01a\x12\xA7V[a\x13k`@Q\x80``\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81RP\x90V[_`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01_\x81R` \x01\x86``\x01Q\x81R` \x01a$\xE0\x81RP\x90P_a\x13\xB9\x82a%hV[`@\x80Q``\x80\x82\x01\x83R\x89Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x82\x01\x93\x90\x93R\x97\x90\x91\x01Q\x90\x87\x01RP\x93\x94\x93PPPPV[\x82Q``\x90\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x17Wa\x14\x17a1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x14\x7FW\x81` \x01[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x145W\x90P[P\x91P_[\x81\x81\x10\x15a\x14\xD5Wa\x14\xB0\x86\x82\x81Q\x81\x10a\x14\xA1Wa\x14\xA1a1\x85V[` \x02` \x01\x01Q\x86\x86a&mV[\x83\x82\x81Q\x81\x10a\x14\xC2Wa\x14\xC2a1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x14\x84V[PP\x93\x92PPPV[a\x14\xEB\x85\x85\x85\x85\x85a'RV[PPPPPV[`\x01Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x15\x12WPV[`\x01T`@Q\x7F\x8A\xA6\xCF\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90c\x8A\xA6\xCF\x03\x90a\x15h\x90\x85\x90`\x04\x01a>\x03V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x15\x82W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x82\x01`@Ra\x15\xC7\x91\x90\x81\x01\x90a>\x15V[`@\x83\x01QQ\x81Q\x91\x92P\x90_a\x15\xDE\x82\x84a?\x0BV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x15\xF6Wa\x15\xF6a1XV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x16^W\x81` \x01[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01R\x82R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x01\x91\x01\x81a\x16\x14W\x90P[P\x90P_[\x83\x81\x10\x15a\x16\xAEW\x85`@\x01Q\x81\x81Q\x81\x10a\x16\x81Wa\x16\x81a1\x85V[` \x02` \x01\x01Q\x82\x82\x81Q\x81\x10a\x16\x9BWa\x16\x9Ba1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x16cV[P_\x80_[\x84\x81\x10\x15a\x19\xBEW_\x87\x82\x81Q\x81\x10a\x16\xCEWa\x16\xCEa1\x85V[` \x02` \x01\x01Q\x90P_[\x82\x81\x10\x15a\x17\x89W\x88\x81\x81Q\x81\x10a\x16\xF4Wa\x16\xF4a1\x85V[` \x02` \x01\x01Q_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x17\x81W\x81Q`@Q\x7F\xFF\xF0\x83\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x06\xE1V[`\x01\x01a\x16\xDAV[P_\x80[\x88\x81\x10\x15a\x18FW_\x8B`@\x01Q\x82\x81Q\x81\x10a\x17\xACWa\x17\xACa1\x85V[` \x02` \x01\x01Q\x90P\x83_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18=W\x85\x15a\x18'W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x81\x01Qa\x186\x90\x84a?\x0BV[\x92P`\x01\x96P[P`\x01\x01a\x17\x8DV[P\x81Q` \x8B\x01QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16\x03a\x18\xBFW\x84\x15a\x18\xA6W`@Q\x7F\xED\xC7\xE2\xE4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[` \x80\x8B\x01Q\x01Qa\x18\xB8\x90\x82a?\x0BV[\x90P`\x01\x93P[\x80_\x03a\x19\x13W\x81Q`@Q\x7F\xED\xDF\x07\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01a\x06\xE1V[a\x19!\x81`\x05a'\x10a'\xF2V[\x82` \x01Q\x11\x15a\x19\x94W\x81Q` \x83\x01Q`@\x80\x85\x01Q\x90Q\x7F\x82\xE7VV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16`\x04\x82\x01R`$\x81\x01\x92\x90\x92R\x91\x90\x91\x16`D\x82\x01R`d\x01a\x06\xE1V[\x81\x86\x84\x8A\x01\x81Q\x81\x10a\x19\xA9Wa\x19\xA9a1\x85V[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x16\xB3V[PPP`@\x90\x94\x01\x93\x90\x93RPPPV[\x81QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160\x14a\x1A W`@Q\x7FM\xDFJd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81Q`\x80\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x04\xABW\x81Q`\x80\x01Q`@Q\x7Fn\x84\xBA+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x90cn\x84\xBA+\x90a\x1A\x9C\x90\x84\x90\x86\x90`\x04\x01a?\x1EV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1A\xB2W_\x80\xFD[PZ\xFA\x15\x80\x15a\x1A\xC4W=_\x80>=_\xFD[PPPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x13|)\xFEa\x1B\x8B\x84`@\x80Q`\xA0\x81\x01\x82R_``\x82\x01\x81\x81R`\x80\x83\x01\x82\x90R\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91RP`@\x80Q`\xA0\x81\x01\x82R` \x80\x84\x01\x80QQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16``\x80\x85\x01\x91\x82R\x91Q\x85\x01Q`\x80\x85\x01R\x83R\x84Q\x84\x01Q\x91\x83\x01\x91\x90\x91R\x92Q\x90\x92\x01Q\x90\x82\x01R\x90V[`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01R\x81Q\x80\x83\x01\x90\x92Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x82R\x80\x87\x01Q\x81\x01Q\x90\x82\x01R\x85_\x01Q` \x01Q\x86`\x80\x01Q`@Q` \x01a\x1CV\x90\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`\x14\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`+\x82\x01R`D\x01\x90V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R`\xC0\x83\x01\x90\x91R`\x8D\x80\x83R\x90\x91\x90aB\xEC` \x83\x019`@Q\x80``\x01`@R\x80`.\x81R` \x01aB\xBE`.\x919`@Q` \x01a\x1C\xC0\x90a;QV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FV3DutchOrder(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7FOrderInfo info,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`-\x84\x01R\x7Faddress cosigner,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`<\x84\x01R\x7Fuint256 startingBaseFee,\0\0\0\0\0\0\0\0`M\x84\x01R\x7FV3DutchInput baseInput,\0\0\0\0\0\0\0\0\0`e\x84\x01R\x7FV3DutchOutput[] baseOutputs)\0\0\0\0`|\x84\x01R\x81Q`x\x81\x85\x03\x01\x81R`\x98\x84\x01\x90\x92R\x91a\x1D\xF0\x90`\xB8\x01a<bV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x1E0\x96\x95\x94\x93\x92\x91` \x01a?LV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90R``\x8A\x01Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x89\x90\x1B\x16\x83Ra\x1E\x9D\x96\x95\x94\x93\x92`\x04\x01a?\xFEV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x1E\xB4W_\x80\xFD[PZ\xF1\x15\x80\x15a\x1A\xC4W=_\x80>=_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16a\x1E\xEBWa\x03L\x82\x82a\x1F\rV[a\x03Ls\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x84\x84a(,V[_\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x1FcW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x1FhV[``\x91P[PP\x90P\x80a\x03LW`@Q\x7F\xF4\xB3\xB1\xBC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_`@Q\x80`\xC0\x01`@R\x80`\x8D\x81R` \x01aB\xEC`\x8D\x919\x80Q` \x91\x82\x01 \x83Q\x84\x83\x01Q`@\x80\x87\x01Q``\x88\x01Q`\x80\x89\x01Q`\xA0\x8A\x01Q\x80Q\x90\x89\x01 \x93Qa\x10V\x98\x93\x94\x92\x93\x91\x92\x91\x01\x96\x87Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x95\x86\x16` \x88\x01R\x93\x85\x16`@\x87\x01R``\x86\x01\x92\x90\x92R`\x80\x85\x01R\x90\x91\x16`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01\x90V[_`@Q` \x01a L\x90a;QV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra!\x0C\x92\x90\x91\x90`\x84\x01a@\xB8V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82_\x01Q\x83` \x01Qa!8\x85`@\x01Qa)\x13V[``\x80\x87\x01Q`\x80\x80\x89\x01Q`@\x80Q` \x81\x01\x99\x90\x99Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x97\x16\x96\x88\x01\x96\x90\x96R\x91\x86\x01\x93\x90\x93R\x84\x01R`\xA0\x83\x01R`\xC0\x82\x01R`\xE0\x01a\x10VV[_\x80\x82Q` \x02g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!\xAAWa!\xAAa1XV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a!\xD4W` \x82\x01\x81\x806\x837\x01\x90P[P\x83Q\x90\x91P_[\x81\x81\x10\x15a\"\x19W_a\"\x07\x86\x83\x81Q\x81\x10a!\xFAWa!\xFAa1\x85V[` \x02` \x01\x01Qa*\x0FV[` \x83\x81\x02\x86\x01\x01RP`\x01\x01a!\xDCV[PP\x80Q` \x90\x91\x01 \x92\x91PPV[_\x81F\x84`\xA0\x01Q`@Q` \x01a\"A\x91\x90a@\xE6V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x90\x82\x90Ra\"~\x93\x92\x91` \x01aAiV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P[\x92\x91PPV[_\x80\x82\x80` \x01\x90Q\x81\x01\x90a\"\xB3\x91\x90aA\x95V[\x91P\x91P_\x83`@\x81Q\x81\x10a\"\xCBWa\"\xCBa1\x85V[\x01` \x90\x81\x01Q`@\x80Q_\x80\x82R\x93\x81\x01\x80\x83R\x89\x90R`\xF8\x92\x90\x92\x1C\x90\x82\x01\x81\x90R``\x82\x01\x86\x90R`\x80\x82\x01\x85\x90R\x92P`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a#%W=_\x80>=_\xFD[PPP` `@Q\x03Q\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x80a#\x80WPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15[\x15a#\xB7W`@Q\x7F\xD7\x81[\xE1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPV[_\x81\x83\x10\x15a#\xECWa#\xDBa#\xD6\x84\x84aA\xB7V[a+qV[a#\xE5\x90_aA\xCAV[\x90Pa\"\x97V[a#\xE5a#\xD6\x83\x85aA\xB7V[_\x80\x82\x12a$\x10Wa#\xE5\x83\x83c;\x9A\xCA\0a'\xF2V[a$(a$\x1C\x83aA\xF0V[\x84\x90c;\x9A\xCA\0a,&V[a#\xE5\x90aA\xF0V[_a$G\x85a$@\x86\x84aA\xCAV[\x85\x85a$PV[\x95\x94PPPPPV[_\x80\x84\x12\x15a$\xB1W_a$c\x85aA\xF0V[\x90P\x85a$\x90\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaA\xB7V[\x10\x15a$\x9FW\x82\x91PPa$\xD8V[a$\xA9\x81\x87a?\x0BV[\x91PPa$\xCDV[\x83\x85\x10\x15a$\xC0WP\x81a$\xD8V[a$\xCA\x84\x86aA\xB7V[\x90P[a$G\x81\x84\x84a,hV[\x94\x93PPPPV[_\x84\x84\x10a$\xEFWP\x80a$GV[_a$\xFA\x87\x86aA\xB7V[\x90P_a%\x07\x88\x88aA\xB7V[\x90P_\x85\x85\x12\x15a%8Wa%(\x83\x83a%!\x88\x8AaA\xCAV[\x91\x90a'\xF2V[a%1\x90aA\xF0V[\x90Pa%QV[a%N\x83\x83a%G\x89\x89aA\xCAV[\x91\x90a,&V[\x90P[a%[\x81\x87aB&V[\x99\x98PPPPPPPPPV[_`\x10\x82_\x01Q` \x01QQ\x11\x15a%\xACW`@Q\x7F\x0E\x99gf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81``\x01Q\x82`@\x01Q\x10\x15\x80a%\xC7WP\x81Q` \x01QQ\x15[\x15a%\xE6W`\x80\x82\x01Q`\xA0\x83\x01Q` \x84\x01Qa\"\x97\x92\x90\x91a,hV[_a&\x06\x83`@\x01Q\x84``\x01Qa%\xFE\x91\x90aA\xB7V[a\xFF\xFFa,xV[\x90P_\x80_\x80a&\x19\x87_\x01Q\x86a,\x8FV[\x93P\x93P\x93P\x93P_a&C\x85a\xFF\xFF\x16\x85a\xFF\xFF\x16\x88a\xFF\xFF\x16\x86\x86\x8D`\xC0\x01Qc\xFF\xFF\xFF\xFF\x16V[`\x80\x89\x01Q`\xA0\x8A\x01Q` \x8B\x01Q\x92\x93Pa&a\x92\x91\x84\x91a$PV[\x98\x97PPPPPPPPV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R_`@Q\x80`\xE0\x01`@R\x80\x86`@\x01Q\x81R` \x01\x86` \x01Q\x81R` \x01\x85\x81R` \x01\x84\x81R` \x01\x86`\x80\x01Q\x81R` \x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81R` \x01a.H\x81RP\x90P_a&\xF7\x82a%hV[\x90P`@Q\x80``\x01`@R\x80\x87_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x82\x81R` \x01\x87``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x92PPP\x93\x92PPPV[a']\x84\x84\x83a.\x98V[a\x14\xEBW\x81a'\x98W`@Q\x7F\xB9\xEC\x1E\x96\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x85\x01Q_[\x81Q\x81\x10\x15a#\xB7W_\x82\x82\x81Q\x81\x10a'\xBBWa'\xBBa1\x85V[` \x02` \x01\x01Q\x90Pa'\xE4\x85a'\x10a'\xD6\x91\x90a?\x0BV[` \x83\x01Q\x90a'\x10a,&V[` \x90\x91\x01R`\x01\x01a'\x9FV[_\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a(%W_\x80\xFD[P\x91\x02\x04\x90V[_`@Q\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16`\x04\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16`$\x82\x01R\x82`D\x82\x01R` _`d\x83_\x8AZ\xF1=\x15`\x1F=\x11`\x01_Q\x14\x16\x17\x16\x91PP\x80a\x14\xEBW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FTRANSFER_FROM_FAILED\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06\xE1V[`@Q\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x82\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x82\x01R_\x90`d\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82_\x01Q\x83` \x01Q`@Q` \x01a)\xBC\x91\x90aBMV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x90\x83\x01\x94\x90\x94R\x81\x01\x91\x90\x91R``\x81\x01\x91\x90\x91R`\x80\x01a\x10VV[_`@Q` \x01a*\x1F\x90a<bV[`@\x80Q\x80\x83\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x01\x81R\x82\x82R\x7FNonlinearDutchDecay(\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x7Fuint256 relativeBlocks,\0\0\0\0\0\0\0\0\0`4\x84\x01R\x7Fint256[] relativeAmounts)\0\0\0\0\0\0\0`K\x84\x01R\x81Q`D\x81\x85\x03\x01\x81R`d\x84\x01\x90\x92Ra*\xDF\x92\x90\x91\x90`\x84\x01a@\xB8V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x82_\x01Q\x83` \x01Qa+\x0B\x85`@\x01Qa)\x13V[``\x80\x87\x01Q`\x80\x80\x89\x01Q`\xA0\x80\x8B\x01Q`@\x80Q` \x81\x01\x9B\x90\x9BRs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x99\x8A\x16\x90\x8B\x01R\x94\x89\x01\x96\x90\x96R\x90\x87\x01\x93\x90\x93R\x93\x90\x93\x16\x91\x84\x01\x91\x90\x91R`\xC0\x83\x01R`\xE0\x82\x01Ra\x01\0\x01a\x10VV[_\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a,\"W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FSafeCast: value doesn't fit in a`D\x82\x01R\x7Fn int256\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06\xE1V[P\x90V[_\x82\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04\x84\x11\x83\x02\x15\x82\x02a,YW_\x80\xFD[P\x91\x02\x81\x81\x06\x15\x15\x91\x90\x04\x01\x90V[_a$\xD8a,v\x85\x85a.\xE3V[\x83[_\x81\x83\x10a,\x86W\x81a,\x88V[\x82[\x93\x92PPPV[_\x80_\x80_a,\x9E\x87_\x01Q\x90V[\x90Pa\xFF\xFF\x86\x16a,\xAF\x82_a.\xF1V[a\xFF\xFF\x16\x10a,\xF0W_a,\xC3\x82\x82a.\xF1V[_\x89` \x01Q_\x81Q\x81\x10a,\xDAWa,\xDAa1\x85V[` \x02` \x01\x01Q\x94P\x94P\x94P\x94PPa.?V[_`\x01\x88` \x01QQa-\x03\x91\x90aB\x82V[\x90P`\x01[\x81a\xFF\xFF\x16\x81a\xFF\xFF\x16\x11a-\xD3W\x87a\xFF\xFF\x16a-3\x82a\xFF\xFF\x16\x85a.\xF1\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\xFF\xFF\x16\x10a-\xC1Wa-Ua-J`\x01\x83aB\x82V[\x84\x90a\xFF\xFF\x16a.\xF1V[a-c\x84a\xFF\xFF\x84\x16a.\xF1V[` \x8B\x01Qa-s`\x01\x85aB\x82V[a\xFF\xFF\x16\x81Q\x81\x10a-\x87Wa-\x87a1\x85V[` \x02` \x01\x01Q\x8B` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a-\xA9Wa-\xA9a1\x85V[` \x02` \x01\x01Q\x96P\x96P\x96P\x96PPPPa.?V[\x80a-\xCB\x81aB\x9DV[\x91PPa-\x08V[Pa-\xE2\x82a\xFF\xFF\x83\x16a.\xF1V[a-\xF0\x83a\xFF\xFF\x84\x16a.\xF1V[\x89` \x01Q\x83a\xFF\xFF\x16\x81Q\x81\x10a.\nWa.\na1\x85V[` \x02` \x01\x01Q\x8A` \x01Q\x84a\xFF\xFF\x16\x81Q\x81\x10a.,Wa.,a1\x85V[` \x02` \x01\x01Q\x95P\x95P\x95P\x95PPP[\x92\x95\x91\x94P\x92PV[_\x84\x84\x10a.WWP\x80a$GV[_a.b\x87\x86aA\xB7V[\x90P_a.o\x88\x88aA\xB7V[\x90P_\x85\x85\x12\x15a.\x89Wa%(\x83\x83a%G\x88\x8AaA\xCAV[a%N\x83\x83a%!\x89\x89aA\xCAV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x15\x80a.\xBBWP\x82\x82\x11[\x80a$\xD8WPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x163\x14\x90P\x93\x92PPPV[_\x81\x83\x11a,\x86W\x81a,\x88V[_`\x10\x82\x10a/,W`@Q\x7FN#\xD05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P`\x10\x02\x1C\x90V[_`@\x82\x84\x03\x12\x15a/DW_\x80\xFD[P\x91\x90PV[_\x80\x83`\x1F\x84\x01\x12a/ZW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a/qW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a/\x88W_\x80\xFD[\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15a/\xA1W_\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a/\xB8W_\x80\xFD[a/\xC4\x87\x83\x88\x01a/4V[\x94P` \x86\x015\x91P\x80\x82\x11\x15a/\xD9W_\x80\xFD[Pa/\xE6\x86\x82\x87\x01a/JV[\x94\x97\x90\x96P\x93\x94PPPPV[_\x80\x83`\x1F\x84\x01\x12a0\x03W_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0\x1AW_\x80\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a/\x88W_\x80\xFD[_\x80` \x83\x85\x03\x12\x15a0EW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a0[W_\x80\xFD[a0g\x85\x82\x86\x01a/\xF3V[\x90\x96\x90\x95P\x93PPPPV[_\x80_\x80`@\x85\x87\x03\x12\x15a0\x86W_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a0\x9DW_\x80\xFD[a0\xA9\x88\x83\x89\x01a/\xF3V[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a0\xC1W_\x80\xFD[Pa0\xCE\x87\x82\x88\x01a/JV[\x95\x98\x94\x97P\x95PPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08oW_\x80\xFD[\x805a1\x06\x81a0\xDAV[\x91\x90PV[_` \x82\x84\x03\x12\x15a1\x1BW_\x80\xFD[\x815a,\x88\x81a0\xDAV[_` \x82\x84\x03\x12\x15a16W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a1LW_\x80\xFD[a$\xD8\x84\x82\x85\x01a/4V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_[\x83\x81\x10\x15a1\xCCW\x81\x81\x01Q\x83\x82\x01R` \x01a1\xB4V[PP_\x91\x01RV[_\x81Q\x80\x84Ra1\xEB\x81` \x86\x01` \x86\x01a1\xB2V[`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x92\x90\x92\x01` \x01\x92\x91PPV[_\x81Q\x80\x84R` \x80\x85\x01\x94P` \x84\x01_[\x83\x81\x10\x15a2{W\x81Q\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x89R\x84\x82\x01Q\x85\x8A\x01R`@\x91\x82\x01Q\x16\x90\x88\x01R``\x90\x96\x01\x95\x90\x82\x01\x90`\x01\x01a20V[P\x94\x95\x94PPPPPV[_\x81Q`\xE0\x84Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16`\xE0\x86\x01R\x80` \x83\x01Q\x16a\x01\0\x86\x01R`@\x82\x01Qa\x01 \x86\x01R``\x82\x01Qa\x01@\x86\x01R\x80`\x80\x83\x01Q\x16a\x01`\x86\x01RP`\xA0\x81\x01Q\x90P`\xC0a\x01\x80\x85\x01Ra2\xF9a\x01\xA0\x85\x01\x82a1\xD4V[\x90P` \x83\x01Qa37` \x86\x01\x82\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x80\x82\x01Q\x90\x83\x01R`@\x90\x81\x01Q\x91\x01RV[P`@\x83\x01Q\x84\x82\x03`\x80\x86\x01Ra3O\x82\x82a2\x1DV[\x91PP``\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra3i\x82\x82a1\xD4V[\x91PP`\x80\x83\x01Q`\xC0\x85\x01R\x80\x91PP\x92\x91PPV[_`@\x82\x01`@\x83R\x80\x86Q\x80\x83R``\x85\x01\x91P``\x81`\x05\x1B\x86\x01\x01\x92P` \x80\x89\x01_[\x83\x81\x10\x15a3\xF3W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x88\x87\x03\x01\x85Ra3\xE1\x86\x83Qa2\x86V[\x95P\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01a3\xA7V[PP\x85\x84\x03\x81\x87\x01R\x86\x84R\x86\x88\x82\x86\x017_\x84\x88\x01\x82\x01R`\x1F\x90\x96\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x90\x92\x01\x90\x94\x01\x96\x95PPPPPPV[_\x825\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC1\x836\x03\x01\x81\x12a4uW_\x80\xFD[\x91\x90\x91\x01\x92\x91PPV[_` \x82\x84\x03\x12\x15a4\x8FW_\x80\xFD[PQ\x91\x90PV[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12a4\xC9W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a4\xE3W_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a/\x88W_\x80\xFD[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@R\x90V[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q`\xA0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q`\xE0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\x1AWa5\x1Aa1XV[`@Q`\x1F\x82\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a5\xF3Wa5\xF3a1XV[`@R\x91\x90PV[_\x82`\x1F\x83\x01\x12a6\nW_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a6$Wa6$a1XV[a6U` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x84\x01\x16\x01a5\xACV[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a6iW_\x80\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[_`\xC0\x82\x84\x03\x12\x15a6\x95W_\x80\xFD[a6\x9Da4\xF7V[\x90P\x815a6\xAA\x81a0\xDAV[\x81R` \x82\x015a6\xBA\x81a0\xDAV[\x80` \x83\x01RP`@\x82\x015`@\x82\x01R``\x82\x015``\x82\x01R`\x80\x82\x015a6\xE3\x81a0\xDAV[`\x80\x82\x01R`\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7\x01W_\x80\xFD[a7\r\x84\x82\x85\x01a5\xFBV[`\xA0\x83\x01RP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a72Wa72a1XV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a7LW_\x80\xFD[a7Ta5 V[\x90P\x815\x81R` \x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a7tW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a7\x84W_\x80\xFD[\x805a7\x97a7\x92\x82a7\x19V[a5\xACV[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a7\xB5W_\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a7\xD3W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a7\xBAV[\x80\x85\x87\x01RPPPPP\x92\x91PPV[_`\xA0\x82\x84\x03\x12\x15a7\xF3W_\x80\xFD[a7\xFBa5CV[\x90P\x815a8\x08\x81a0\xDAV[\x81R` \x82\x81\x015\x90\x82\x01R`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8-W_\x80\xFD[a89\x84\x82\x85\x01a7<V[`@\x83\x01RP``\x82\x015``\x82\x01R`\x80\x82\x015`\x80\x82\x01R\x92\x91PPV[_\x82`\x1F\x83\x01\x12a8hW_\x80\xFD[\x815` a8xa7\x92\x83a7\x19V[\x82\x81R`\x05\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x86\x84\x11\x15a8\x96W_\x80\xFD[\x82\x86\x01[\x84\x81\x10\x15a9mW\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a8\xB9W_\x80\xFD[\x81\x89\x01\x91P`\xC0\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x84\x8D\x03\x01\x12\x15a8\xF0W_\x80\xFD[a8\xF8a4\xF7V[\x87\x84\x015a9\x05\x81a0\xDAV[\x81R`@\x84\x81\x015\x89\x83\x01R``\x80\x86\x015\x85\x81\x11\x15a9#W_\x80\xFD[a91\x8F\x8C\x83\x8A\x01\x01a7<V[\x83\x85\x01RP`\x80\x94P\x84\x86\x015\x91Pa9I\x82a0\xDAV[\x82\x01R`\xA0\x84\x81\x015\x93\x82\x01\x93\x90\x93R\x92\x015\x90\x82\x01R\x83R\x91\x83\x01\x91\x83\x01a8\x9AV[P\x96\x95PPPPPPV[_`\xA0\x82\x84\x03\x12\x15a9\x88W_\x80\xFD[a9\x90a5CV[\x90P\x815\x81R` \x80\x83\x015a9\xA5\x81a0\xDAV[\x80\x82\x84\x01RP`@\x83\x015`@\x83\x01R``\x83\x015``\x83\x01R`\x80\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9\xD8W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a9\xE8W_\x80\xFD[\x805a9\xF6a7\x92\x82a7\x19V[\x81\x81R`\x05\x91\x90\x91\x1B\x82\x01\x83\x01\x90\x83\x81\x01\x90\x87\x83\x11\x15a:\x14W_\x80\xFD[\x92\x84\x01\x92[\x82\x84\x10\x15a:2W\x835\x82R\x92\x84\x01\x92\x90\x84\x01\x90a:\x19V[`\x80\x86\x01RP\x92\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a:RW_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a:iW_\x80\xFD[\x90\x83\x01\x90`\xE0\x82\x86\x03\x12\x15a:|W_\x80\xFD[a:\x84a5fV[\x825\x82\x81\x11\x15a:\x92W_\x80\xFD[a:\x9E\x87\x82\x86\x01a6\x85V[\x82RPa:\xAD` \x84\x01a0\xFBV[` \x82\x01R`@\x83\x015`@\x82\x01R``\x83\x015\x82\x81\x11\x15a:\xCDW_\x80\xFD[a:\xD9\x87\x82\x86\x01a7\xE3V[``\x83\x01RP`\x80\x83\x015\x82\x81\x11\x15a:\xF0W_\x80\xFD[a:\xFC\x87\x82\x86\x01a8YV[`\x80\x83\x01RP`\xA0\x83\x015\x82\x81\x11\x15a;\x13W_\x80\xFD[a;\x1F\x87\x82\x86\x01a9xV[`\xA0\x83\x01RP`\xC0\x83\x015\x82\x81\x11\x15a;6W_\x80\xFD[a;B\x87\x82\x86\x01a5\xFBV[`\xC0\x83\x01RP\x95\x94PPPPPV[\x7FV3DutchInput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\r\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1B\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`/\x82\x01R\x7Fuint256 maxAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`I\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`[\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`{\x82\x01R_`|\x82\x01a\"\x97V[\x7FV3DutchOutput(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x7Faddress token,\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0E\x82\x01R\x7Fuint256 startAmount,\0\0\0\0\0\0\0\0\0\0\0\0`\x1C\x82\x01R\x7FNonlinearDutchDecay curve,\0\0\0\0\0\0`0\x82\x01R\x7Faddress recipient,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`J\x82\x01R\x7Fuint256 minAmount,\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\\\x82\x01R\x7Fuint256 adjustmentPerGweiBaseFee`n\x82\x01R\x7F)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x8E\x82\x01R_`\x8F\x82\x01a\"\x97V[_\x86Qa=\xAA\x81\x84` \x8B\x01a1\xB2V[\x86Q\x90\x83\x01\x90a=\xBE\x81\x83` \x8B\x01a1\xB2V[\x86Q\x91\x01\x90a=\xD1\x81\x83` \x8A\x01a1\xB2V[\x85Q\x91\x01\x90a=\xE4\x81\x83` \x89\x01a1\xB2V[\x84Q\x91\x01\x90a=\xF7\x81\x83` \x88\x01a1\xB2V[\x01\x97\x96PPPPPPPV[` \x81R_a,\x88` \x83\x01\x84a2\x86V[_` \x80\x83\x85\x03\x12\x15a>&W_\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a><W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a>LW_\x80\xFD[\x80Qa>Za7\x92\x82a7\x19V[\x81\x81R``\x91\x82\x02\x83\x01\x84\x01\x91\x84\x82\x01\x91\x90\x88\x84\x11\x15a>xW_\x80\xFD[\x93\x85\x01\x93[\x83\x85\x10\x15a>\xD2W\x80\x85\x8A\x03\x12\x15a>\x93W_\x80\xFD[a>\x9Ba5\x89V[\x85Qa>\xA6\x81a0\xDAV[\x81R\x85\x87\x01Q\x87\x82\x01R`@\x80\x87\x01Qa>\xBF\x81a0\xDAV[\x90\x82\x01R\x83R\x93\x84\x01\x93\x91\x85\x01\x91a>}V[P\x97\x96PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\"\x97Wa\"\x97a>\xDEV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x81R`@` \x82\x01R_a$\xD8`@\x83\x01\x84a2\x86V[\x7FV3DutchOrder witness)\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x15\x88Q` a?\x85\x82\x84\x87\x01\x83\x8E\x01a1\xB2V[\x89Q\x91\x85\x01\x91a?\x9A\x81\x85\x85\x01\x84\x8E\x01a1\xB2V[\x89Q\x92\x01\x91a?\xAE\x81\x85\x85\x01\x84\x8D\x01a1\xB2V[\x88Q\x92\x01\x91a?\xC2\x81\x85\x85\x01\x84\x8C\x01a1\xB2V[\x87Q\x92\x01\x91a?\xD6\x81\x85\x85\x01\x84\x8B\x01a1\xB2V[\x86Q\x92\x01\x91a?\xEA\x81\x85\x85\x01\x84\x8A\x01a1\xB2V[\x91\x90\x91\x01\x90\x91\x01\x99\x98PPPPPPPPPV[_a\x01@a@-\x83\x8AQ\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[` \x89\x01Q`@\x84\x01R`@\x89\x01Q``\x84\x01Ra@n`\x80\x84\x01\x89\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82R` \x90\x81\x01Q\x91\x01RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`\xC0\x84\x01R\x85`\xE0\x84\x01R\x80a\x01\0\x84\x01Ra@\xA3\x81\x84\x01\x86a1\xD4V[\x90P\x82\x81\x03a\x01 \x84\x01Ra%[\x81\x85a1\xD4V[_\x83Qa@\xC9\x81\x84` \x88\x01a1\xB2V[\x83Q\x90\x83\x01\x90a@\xDD\x81\x83` \x88\x01a1\xB2V[\x01\x94\x93PPPPV[_` \x80\x83R`\xC0\x83\x01\x84Q\x82\x85\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x86\x01Q\x16`@\x85\x01R`@\x85\x01Q``\x85\x01R``\x85\x01Q`\x80\x85\x01R`\x80\x85\x01Q`\xA0\x80\x86\x01R\x81\x81Q\x80\x84R`\xE0\x87\x01\x91P\x84\x83\x01\x93P_\x92P[\x80\x83\x10\x15a9mW\x83Q\x82R\x92\x84\x01\x92`\x01\x92\x90\x92\x01\x91\x90\x84\x01\x90aAIV[\x83\x81R\x82` \x82\x01R_\x82QaA\x86\x81`@\x85\x01` \x87\x01a1\xB2V[\x91\x90\x91\x01`@\x01\x94\x93PPPPV[_\x80`@\x83\x85\x03\x12\x15aA\xA6W_\x80\xFD[PP\x80Q` \x90\x91\x01Q\x90\x92\x90\x91PV[\x81\x81\x03\x81\x81\x11\x15a\"\x97Wa\"\x97a>\xDEV[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15aA\xE9WaA\xE9a>\xDEV[P\x92\x91PPV[_\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x03aB WaB a>\xDEV[P_\x03\x90V[\x80\x82\x01\x82\x81\x12_\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15aBEWaBEa>\xDEV[PP\x92\x91PPV[\x81Q_\x90\x82\x90` \x80\x86\x01\x84[\x83\x81\x10\x15aBvW\x81Q\x85R\x93\x82\x01\x93\x90\x82\x01\x90`\x01\x01aBZV[P\x92\x96\x95PPPPPPV[a\xFF\xFF\x82\x81\x16\x82\x82\x16\x03\x90\x80\x82\x11\x15aA\xE9WaA\xE9a>\xDEV[_a\xFF\xFF\x80\x83\x16\x81\x81\x03aB\xB3WaB\xB3a>\xDEV[`\x01\x01\x93\x92PPPV\xFETokenPermissions(address token,uint256 amount)OrderInfo(address reactor,address swapper,uint256 nonce,uint256 deadline,address additionalValidationContract,bytes additionalValidationData)\xA2dipfsX\"\x12 v\xEBd\xBF$\x1A=&>\xC5\xA7-\xE2\x969\xED\xAD\xAF\xD9\xDC4{\x19\xB4\x92[\xF5\xD9s\xD5b\xEFdsolcC\0\x08\x18\x003",
    );
    /**```solidity
struct SignedOrder { bytes order; bytes sig; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SignedOrder {
        #[allow(missing_docs)]
        pub order: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub sig: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SignedOrder> for UnderlyingRustTuple<'_> {
            fn from(value: SignedOrder) -> Self {
                (value.order, value.sig)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SignedOrder {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    order: tuple.0,
                    sig: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for SignedOrder {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for SignedOrder {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.order,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.sig,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for SignedOrder {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for SignedOrder {
            const NAME: &'static str = "SignedOrder";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "SignedOrder(bytes order,bytes sig)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.order,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.sig,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for SignedOrder {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.order,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sig,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.order,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sig,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `DeadlineReached()` and selector `0xb08ce5b3`.
```solidity
error DeadlineReached();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DeadlineReached {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DeadlineReached> for UnderlyingRustTuple<'_> {
            fn from(value: DeadlineReached) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DeadlineReached {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DeadlineReached {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DeadlineReached()";
            const SELECTOR: [u8; 4] = [176u8, 140u8, 229u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `DuplicateFeeOutput(address)` and selector `0xfff08303`.
```solidity
error DuplicateFeeOutput(address duplicateToken);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DuplicateFeeOutput {
        #[allow(missing_docs)]
        pub duplicateToken: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DuplicateFeeOutput> for UnderlyingRustTuple<'_> {
            fn from(value: DuplicateFeeOutput) -> Self {
                (value.duplicateToken,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DuplicateFeeOutput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { duplicateToken: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for DuplicateFeeOutput {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DuplicateFeeOutput(address)";
            const SELECTOR: [u8; 4] = [255u8, 240u8, 131u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.duplicateToken,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `FeeTooLarge(address,uint256,address)` and selector `0x82e75656`.
```solidity
error FeeTooLarge(address token, uint256 amount, address recipient);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FeeTooLarge {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FeeTooLarge> for UnderlyingRustTuple<'_> {
            fn from(value: FeeTooLarge) -> Self {
                (value.token, value.amount, value.recipient)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FeeTooLarge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    token: tuple.0,
                    amount: tuple.1,
                    recipient: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FeeTooLarge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FeeTooLarge(address,uint256,address)";
            const SELECTOR: [u8; 4] = [130u8, 231u8, 86u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `IndexOutOfBounds()` and selector `0x4e23d035`.
```solidity
error IndexOutOfBounds();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IndexOutOfBounds {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<IndexOutOfBounds> for UnderlyingRustTuple<'_> {
            fn from(value: IndexOutOfBounds) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for IndexOutOfBounds {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for IndexOutOfBounds {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IndexOutOfBounds()";
            const SELECTOR: [u8; 4] = [78u8, 35u8, 208u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InputAndOutputFees()` and selector `0xedc7e2e4`.
```solidity
error InputAndOutputFees();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InputAndOutputFees {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InputAndOutputFees> for UnderlyingRustTuple<'_> {
            fn from(value: InputAndOutputFees) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InputAndOutputFees {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InputAndOutputFees {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InputAndOutputFees()";
            const SELECTOR: [u8; 4] = [237u8, 199u8, 226u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCosignature()` and selector `0xd7815be1`.
```solidity
error InvalidCosignature();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidCosignature {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCosignature> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCosignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCosignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCosignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCosignature()";
            const SELECTOR: [u8; 4] = [215u8, 129u8, 91u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCosignerInput()` and selector `0xac9143e7`.
```solidity
error InvalidCosignerInput();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidCosignerInput {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCosignerInput> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCosignerInput) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCosignerInput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCosignerInput {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCosignerInput()";
            const SELECTOR: [u8; 4] = [172u8, 145u8, 67u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidCosignerOutput()` and selector `0xa305df82`.
```solidity
error InvalidCosignerOutput();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidCosignerOutput {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCosignerOutput> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCosignerOutput) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCosignerOutput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCosignerOutput {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCosignerOutput()";
            const SELECTOR: [u8; 4] = [163u8, 5u8, 223u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidDecayCurve()` and selector `0x0e996766`.
```solidity
error InvalidDecayCurve();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidDecayCurve {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidDecayCurve> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidDecayCurve) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidDecayCurve {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidDecayCurve {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidDecayCurve()";
            const SELECTOR: [u8; 4] = [14u8, 153u8, 103u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidFeeToken(address)` and selector `0xeddf07f5`.
```solidity
error InvalidFeeToken(address feeToken);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidFeeToken {
        #[allow(missing_docs)]
        pub feeToken: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidFeeToken> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidFeeToken) -> Self {
                (value.feeToken,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidFeeToken {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { feeToken: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidFeeToken {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidFeeToken(address)";
            const SELECTOR: [u8; 4] = [237u8, 223u8, 7u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.feeToken,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidReactor()` and selector `0x4ddf4a64`.
```solidity
error InvalidReactor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidReactor {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidReactor> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidReactor) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidReactor {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidReactor {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidReactor()";
            const SELECTOR: [u8; 4] = [77u8, 223u8, 74u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NativeTransferFailed()` and selector `0xf4b3b1bc`.
```solidity
error NativeTransferFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NativeTransferFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NativeTransferFailed> for UnderlyingRustTuple<'_> {
            fn from(value: NativeTransferFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NativeTransferFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NativeTransferFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NativeTransferFailed()";
            const SELECTOR: [u8; 4] = [244u8, 179u8, 177u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NoExclusiveOverride()` and selector `0xb9ec1e96`.
```solidity
error NoExclusiveOverride();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoExclusiveOverride {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoExclusiveOverride> for UnderlyingRustTuple<'_> {
            fn from(value: NoExclusiveOverride) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NoExclusiveOverride {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoExclusiveOverride {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoExclusiveOverride()";
            const SELECTOR: [u8; 4] = [185u8, 236u8, 30u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `Fill(bytes32,address,address,uint256)` and selector `0x78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd66`.
```solidity
event Fill(bytes32 indexed orderHash, address indexed filler, address indexed swapper, uint256 nonce);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Fill {
        #[allow(missing_docs)]
        pub orderHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub filler: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub swapper: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Fill {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Fill(bytes32,address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8,
                173u8,
                126u8,
                192u8,
                233u8,
                248u8,
                158u8,
                116u8,
                1u8,
                42u8,
                250u8,
                88u8,
                115u8,
                139u8,
                107u8,
                102u8,
                28u8,
                2u8,
                76u8,
                176u8,
                253u8,
                24u8,
                94u8,
                226u8,
                246u8,
                22u8,
                192u8,
                162u8,
                137u8,
                36u8,
                189u8,
                102u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    orderHash: topics.1,
                    filler: topics.2,
                    swapper: topics.3,
                    nonce: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.orderHash.clone(),
                    self.filler.clone(),
                    self.swapper.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.orderHash);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.filler,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.swapper,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Fill {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Fill> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Fill) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed user, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    user: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone(), self.newOwner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ProtocolFeeControllerSet(address,address)` and selector `0xb904ae9529e373e48bc82df4326cceaf1b4c472babf37f5b7dec46fecc6b53e0`.
```solidity
event ProtocolFeeControllerSet(address oldFeeController, address newFeeController);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProtocolFeeControllerSet {
        #[allow(missing_docs)]
        pub oldFeeController: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newFeeController: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProtocolFeeControllerSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ProtocolFeeControllerSet(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8,
                4u8,
                174u8,
                149u8,
                41u8,
                227u8,
                115u8,
                228u8,
                139u8,
                200u8,
                45u8,
                244u8,
                50u8,
                108u8,
                206u8,
                175u8,
                27u8,
                76u8,
                71u8,
                43u8,
                171u8,
                243u8,
                127u8,
                91u8,
                125u8,
                236u8,
                70u8,
                254u8,
                204u8,
                107u8,
                83u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldFeeController: data.0,
                    newFeeController: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.oldFeeController,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newFeeController,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProtocolFeeControllerSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProtocolFeeControllerSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ProtocolFeeControllerSet,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _permit2, address _protocolFeeOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _permit2: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _protocolFeeOwner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._permit2, value._protocolFeeOwner)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _permit2: tuple.0,
                        _protocolFeeOwner: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permit2,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._protocolFeeOwner,
                    ),
                )
            }
        }
    };
    /**Function with signature `execute((bytes,bytes))` and selector `0x3f62192e`.
```solidity
function execute(SignedOrder memory order) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCall {
        #[allow(missing_docs)]
        pub order: <SignedOrder as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`execute((bytes,bytes))`](executeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (SignedOrder,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SignedOrder as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCall) -> Self {
                    (value.order,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { order: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCall {
            type Parameters<'a> = (SignedOrder,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "execute((bytes,bytes))";
            const SELECTOR: [u8; 4] = [63u8, 98u8, 25u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<SignedOrder as alloy_sol_types::SolType>::tokenize(&self.order),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBatch((bytes,bytes)[])` and selector `0x0d7a16c3`.
```solidity
function executeBatch(SignedOrder[] memory orders) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBatchCall {
        #[allow(missing_docs)]
        pub orders: alloy::sol_types::private::Vec<
            <SignedOrder as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`executeBatch((bytes,bytes)[])`](executeBatchCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBatchReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<SignedOrder>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <SignedOrder as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchCall) -> Self {
                    (value.orders,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBatchCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { orders: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBatchReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBatchCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Array<SignedOrder>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBatchReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBatch((bytes,bytes)[])";
            const SELECTOR: [u8; 4] = [13u8, 122u8, 22u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        SignedOrder,
                    > as alloy_sol_types::SolType>::tokenize(&self.orders),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBatchWithCallback((bytes,bytes)[],bytes)` and selector `0x13fb72c7`.
```solidity
function executeBatchWithCallback(SignedOrder[] memory orders, bytes memory callbackData) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBatchWithCallbackCall {
        #[allow(missing_docs)]
        pub orders: alloy::sol_types::private::Vec<
            <SignedOrder as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub callbackData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeBatchWithCallback((bytes,bytes)[],bytes)`](executeBatchWithCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBatchWithCallbackReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<SignedOrder>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <SignedOrder as alloy::sol_types::SolType>::RustType,
                >,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchWithCallbackCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchWithCallbackCall) -> Self {
                    (value.orders, value.callbackData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeBatchWithCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        orders: tuple.0,
                        callbackData: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBatchWithCallbackReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeBatchWithCallbackReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeBatchWithCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBatchWithCallbackCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<SignedOrder>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBatchWithCallbackReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBatchWithCallback((bytes,bytes)[],bytes)";
            const SELECTOR: [u8; 4] = [19u8, 251u8, 114u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        SignedOrder,
                    > as alloy_sol_types::SolType>::tokenize(&self.orders),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callbackData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeWithCallback((bytes,bytes),bytes)` and selector `0x0d335884`.
```solidity
function executeWithCallback(SignedOrder memory order, bytes memory callbackData) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeWithCallbackCall {
        #[allow(missing_docs)]
        pub order: <SignedOrder as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub callbackData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeWithCallback((bytes,bytes),bytes)`](executeWithCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeWithCallbackReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                SignedOrder,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <SignedOrder as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeWithCallbackCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeWithCallbackCall) -> Self {
                    (value.order, value.callbackData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeWithCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        order: tuple.0,
                        callbackData: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeWithCallbackReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeWithCallbackReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeWithCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeWithCallbackCall {
            type Parameters<'a> = (SignedOrder, alloy::sol_types::sol_data::Bytes);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeWithCallbackReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeWithCallback((bytes,bytes),bytes)";
            const SELECTOR: [u8; 4] = [13u8, 51u8, 88u8, 132u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <SignedOrder as alloy_sol_types::SolType>::tokenize(&self.order),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.callbackData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `feeController()` and selector `0x6999b377`.
```solidity
function feeController() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeControllerCall {}
    ///Container type for the return parameters of the [`feeController()`](feeControllerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeControllerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeControllerCall> for UnderlyingRustTuple<'_> {
                fn from(value: feeControllerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeControllerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeControllerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: feeControllerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeControllerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeControllerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeControllerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "feeController()";
            const SELECTOR: [u8; 4] = [105u8, 153u8, 179u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permit2()` and selector `0x12261ee7`.
```solidity
function permit2() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permit2Call {}
    ///Container type for the return parameters of the [`permit2()`](permit2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permit2Return {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permit2Call> for UnderlyingRustTuple<'_> {
                fn from(value: permit2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permit2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permit2Return> for UnderlyingRustTuple<'_> {
                fn from(value: permit2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permit2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permit2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permit2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit2()";
            const SELECTOR: [u8; 4] = [18u8, 38u8, 30u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setProtocolFeeController(address)` and selector `0x2d771389`.
```solidity
function setProtocolFeeController(address _newFeeController) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setProtocolFeeControllerCall {
        #[allow(missing_docs)]
        pub _newFeeController: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setProtocolFeeController(address)`](setProtocolFeeControllerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setProtocolFeeControllerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeControllerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeControllerCall) -> Self {
                    (value._newFeeController,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setProtocolFeeControllerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newFeeController: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setProtocolFeeControllerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setProtocolFeeControllerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setProtocolFeeControllerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setProtocolFeeControllerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setProtocolFeeControllerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setProtocolFeeController(address)";
            const SELECTOR: [u8; 4] = [45u8, 119u8, 19u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newFeeController,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`V3DutchOrderReactor`](self) function calls.
    pub enum V3DutchOrderReactorCalls {
        #[allow(missing_docs)]
        execute(executeCall),
        #[allow(missing_docs)]
        executeBatch(executeBatchCall),
        #[allow(missing_docs)]
        executeBatchWithCallback(executeBatchWithCallbackCall),
        #[allow(missing_docs)]
        executeWithCallback(executeWithCallbackCall),
        #[allow(missing_docs)]
        feeController(feeControllerCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permit2(permit2Call),
        #[allow(missing_docs)]
        setProtocolFeeController(setProtocolFeeControllerCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl V3DutchOrderReactorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 51u8, 88u8, 132u8],
            [13u8, 122u8, 22u8, 195u8],
            [18u8, 38u8, 30u8, 231u8],
            [19u8, 251u8, 114u8, 199u8],
            [45u8, 119u8, 19u8, 137u8],
            [63u8, 98u8, 25u8, 46u8],
            [105u8, 153u8, 179u8, 119u8],
            [141u8, 165u8, 203u8, 91u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for V3DutchOrderReactorCalls {
        const NAME: &'static str = "V3DutchOrderReactorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::execute(_) => <executeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::executeBatch(_) => {
                    <executeBatchCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeBatchWithCallback(_) => {
                    <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeWithCallback(_) => {
                    <executeWithCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::feeController(_) => {
                    <feeControllerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permit2(_) => <permit2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::setProtocolFeeController(_) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls>] = &[
                {
                    fn executeWithCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeWithCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::executeWithCallback)
                    }
                    executeWithCallback
                },
                {
                    fn executeBatch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeBatchCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::executeBatch)
                    }
                    executeBatch
                },
                {
                    fn permit2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <permit2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::permit2)
                    }
                    permit2
                },
                {
                    fn executeBatchWithCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::executeBatchWithCallback)
                    }
                    executeBatchWithCallback
                },
                {
                    fn setProtocolFeeController(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::setProtocolFeeController)
                    }
                    setProtocolFeeController
                },
                {
                    fn execute(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <executeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::execute)
                    }
                    execute
                },
                {
                    fn feeController(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <feeControllerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::feeController)
                    }
                    feeController
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeBatch(inner) => {
                    <executeBatchCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeBatchWithCallback(inner) => {
                    <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeWithCallback(inner) => {
                    <executeWithCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::feeController(inner) => {
                    <feeControllerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permit2(inner) => {
                    <permit2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setProtocolFeeController(inner) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::executeBatch(inner) => {
                    <executeBatchCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeBatchWithCallback(inner) => {
                    <executeBatchWithCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeWithCallback(inner) => {
                    <executeWithCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::feeController(inner) => {
                    <feeControllerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permit2(inner) => {
                    <permit2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setProtocolFeeController(inner) => {
                    <setProtocolFeeControllerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`V3DutchOrderReactor`](self) custom errors.
    pub enum V3DutchOrderReactorErrors {
        #[allow(missing_docs)]
        DeadlineReached(DeadlineReached),
        #[allow(missing_docs)]
        DuplicateFeeOutput(DuplicateFeeOutput),
        #[allow(missing_docs)]
        FeeTooLarge(FeeTooLarge),
        #[allow(missing_docs)]
        IndexOutOfBounds(IndexOutOfBounds),
        #[allow(missing_docs)]
        InputAndOutputFees(InputAndOutputFees),
        #[allow(missing_docs)]
        InvalidCosignature(InvalidCosignature),
        #[allow(missing_docs)]
        InvalidCosignerInput(InvalidCosignerInput),
        #[allow(missing_docs)]
        InvalidCosignerOutput(InvalidCosignerOutput),
        #[allow(missing_docs)]
        InvalidDecayCurve(InvalidDecayCurve),
        #[allow(missing_docs)]
        InvalidFeeToken(InvalidFeeToken),
        #[allow(missing_docs)]
        InvalidReactor(InvalidReactor),
        #[allow(missing_docs)]
        NativeTransferFailed(NativeTransferFailed),
        #[allow(missing_docs)]
        NoExclusiveOverride(NoExclusiveOverride),
    }
    #[automatically_derived]
    impl V3DutchOrderReactorErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [14u8, 153u8, 103u8, 102u8],
            [77u8, 223u8, 74u8, 100u8],
            [78u8, 35u8, 208u8, 53u8],
            [130u8, 231u8, 86u8, 86u8],
            [163u8, 5u8, 223u8, 130u8],
            [172u8, 145u8, 67u8, 231u8],
            [176u8, 140u8, 229u8, 179u8],
            [185u8, 236u8, 30u8, 150u8],
            [215u8, 129u8, 91u8, 225u8],
            [237u8, 199u8, 226u8, 228u8],
            [237u8, 223u8, 7u8, 245u8],
            [244u8, 179u8, 177u8, 188u8],
            [255u8, 240u8, 131u8, 3u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for V3DutchOrderReactorErrors {
        const NAME: &'static str = "V3DutchOrderReactorErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DeadlineReached(_) => {
                    <DeadlineReached as alloy_sol_types::SolError>::SELECTOR
                }
                Self::DuplicateFeeOutput(_) => {
                    <DuplicateFeeOutput as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FeeTooLarge(_) => {
                    <FeeTooLarge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::IndexOutOfBounds(_) => {
                    <IndexOutOfBounds as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InputAndOutputFees(_) => {
                    <InputAndOutputFees as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCosignature(_) => {
                    <InvalidCosignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCosignerInput(_) => {
                    <InvalidCosignerInput as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidCosignerOutput(_) => {
                    <InvalidCosignerOutput as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidDecayCurve(_) => {
                    <InvalidDecayCurve as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidFeeToken(_) => {
                    <InvalidFeeToken as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidReactor(_) => {
                    <InvalidReactor as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NativeTransferFailed(_) => {
                    <NativeTransferFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoExclusiveOverride(_) => {
                    <NoExclusiveOverride as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors>] = &[
                {
                    fn InvalidDecayCurve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidDecayCurve as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidDecayCurve)
                    }
                    InvalidDecayCurve
                },
                {
                    fn InvalidReactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidReactor as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidReactor)
                    }
                    InvalidReactor
                },
                {
                    fn IndexOutOfBounds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <IndexOutOfBounds as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::IndexOutOfBounds)
                    }
                    IndexOutOfBounds
                },
                {
                    fn FeeTooLarge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <FeeTooLarge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::FeeTooLarge)
                    }
                    FeeTooLarge
                },
                {
                    fn InvalidCosignerOutput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidCosignerOutput as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidCosignerOutput)
                    }
                    InvalidCosignerOutput
                },
                {
                    fn InvalidCosignerInput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidCosignerInput as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidCosignerInput)
                    }
                    InvalidCosignerInput
                },
                {
                    fn DeadlineReached(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <DeadlineReached as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::DeadlineReached)
                    }
                    DeadlineReached
                },
                {
                    fn NoExclusiveOverride(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <NoExclusiveOverride as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::NoExclusiveOverride)
                    }
                    NoExclusiveOverride
                },
                {
                    fn InvalidCosignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidCosignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidCosignature)
                    }
                    InvalidCosignature
                },
                {
                    fn InputAndOutputFees(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InputAndOutputFees as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InputAndOutputFees)
                    }
                    InputAndOutputFees
                },
                {
                    fn InvalidFeeToken(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <InvalidFeeToken as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::InvalidFeeToken)
                    }
                    InvalidFeeToken
                },
                {
                    fn NativeTransferFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <NativeTransferFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::NativeTransferFailed)
                    }
                    NativeTransferFailed
                },
                {
                    fn DuplicateFeeOutput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<V3DutchOrderReactorErrors> {
                        <DuplicateFeeOutput as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(V3DutchOrderReactorErrors::DuplicateFeeOutput)
                    }
                    DuplicateFeeOutput
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DeadlineReached(inner) => {
                    <DeadlineReached as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DuplicateFeeOutput(inner) => {
                    <DuplicateFeeOutput as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FeeTooLarge(inner) => {
                    <FeeTooLarge as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::IndexOutOfBounds(inner) => {
                    <IndexOutOfBounds as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InputAndOutputFees(inner) => {
                    <InputAndOutputFees as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCosignature(inner) => {
                    <InvalidCosignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCosignerInput(inner) => {
                    <InvalidCosignerInput as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidCosignerOutput(inner) => {
                    <InvalidCosignerOutput as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidDecayCurve(inner) => {
                    <InvalidDecayCurve as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidFeeToken(inner) => {
                    <InvalidFeeToken as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidReactor(inner) => {
                    <InvalidReactor as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NativeTransferFailed(inner) => {
                    <NativeTransferFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoExclusiveOverride(inner) => {
                    <NoExclusiveOverride as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DeadlineReached(inner) => {
                    <DeadlineReached as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DuplicateFeeOutput(inner) => {
                    <DuplicateFeeOutput as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FeeTooLarge(inner) => {
                    <FeeTooLarge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::IndexOutOfBounds(inner) => {
                    <IndexOutOfBounds as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InputAndOutputFees(inner) => {
                    <InputAndOutputFees as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCosignature(inner) => {
                    <InvalidCosignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCosignerInput(inner) => {
                    <InvalidCosignerInput as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidCosignerOutput(inner) => {
                    <InvalidCosignerOutput as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidDecayCurve(inner) => {
                    <InvalidDecayCurve as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidFeeToken(inner) => {
                    <InvalidFeeToken as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidReactor(inner) => {
                    <InvalidReactor as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NativeTransferFailed(inner) => {
                    <NativeTransferFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoExclusiveOverride(inner) => {
                    <NoExclusiveOverride as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`V3DutchOrderReactor`](self) events.
    pub enum V3DutchOrderReactorEvents {
        #[allow(missing_docs)]
        Fill(Fill),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        ProtocolFeeControllerSet(ProtocolFeeControllerSet),
    }
    #[automatically_derived]
    impl V3DutchOrderReactorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                120u8,
                173u8,
                126u8,
                192u8,
                233u8,
                248u8,
                158u8,
                116u8,
                1u8,
                42u8,
                250u8,
                88u8,
                115u8,
                139u8,
                107u8,
                102u8,
                28u8,
                2u8,
                76u8,
                176u8,
                253u8,
                24u8,
                94u8,
                226u8,
                246u8,
                22u8,
                192u8,
                162u8,
                137u8,
                36u8,
                189u8,
                102u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                185u8,
                4u8,
                174u8,
                149u8,
                41u8,
                227u8,
                115u8,
                228u8,
                139u8,
                200u8,
                45u8,
                244u8,
                50u8,
                108u8,
                206u8,
                175u8,
                27u8,
                76u8,
                71u8,
                43u8,
                171u8,
                243u8,
                127u8,
                91u8,
                125u8,
                236u8,
                70u8,
                254u8,
                204u8,
                107u8,
                83u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for V3DutchOrderReactorEvents {
        const NAME: &'static str = "V3DutchOrderReactorEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Fill as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Fill as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Fill)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <ProtocolFeeControllerSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ProtocolFeeControllerSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProtocolFeeControllerSet)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for V3DutchOrderReactorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Fill(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProtocolFeeControllerSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Fill(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProtocolFeeControllerSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`V3DutchOrderReactor`](self) contract instance.

See the [wrapper's documentation](`V3DutchOrderReactorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> V3DutchOrderReactorInstance<T, P, N> {
        V3DutchOrderReactorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _permit2: alloy::sol_types::private::Address,
        _protocolFeeOwner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<V3DutchOrderReactorInstance<T, P, N>>,
    > {
        V3DutchOrderReactorInstance::<
            T,
            P,
            N,
        >::deploy(provider, _permit2, _protocolFeeOwner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _permit2: alloy::sol_types::private::Address,
        _protocolFeeOwner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        V3DutchOrderReactorInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _permit2, _protocolFeeOwner)
    }
    /**A [`V3DutchOrderReactor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`V3DutchOrderReactor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct V3DutchOrderReactorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for V3DutchOrderReactorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("V3DutchOrderReactorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > V3DutchOrderReactorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`V3DutchOrderReactor`](self) contract instance.

See the [wrapper's documentation](`V3DutchOrderReactorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _permit2: alloy::sol_types::private::Address,
            _protocolFeeOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<V3DutchOrderReactorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _permit2,
                _protocolFeeOwner,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _permit2: alloy::sol_types::private::Address,
            _protocolFeeOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _permit2,
                            _protocolFeeOwner,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> V3DutchOrderReactorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> V3DutchOrderReactorInstance<T, P, N> {
            V3DutchOrderReactorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > V3DutchOrderReactorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`execute`] function.
        pub fn execute(
            &self,
            order: <SignedOrder as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeCall, N> {
            self.call_builder(&executeCall { order })
        }
        ///Creates a new call builder for the [`executeBatch`] function.
        pub fn executeBatch(
            &self,
            orders: alloy::sol_types::private::Vec<
                <SignedOrder as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBatchCall, N> {
            self.call_builder(&executeBatchCall { orders })
        }
        ///Creates a new call builder for the [`executeBatchWithCallback`] function.
        pub fn executeBatchWithCallback(
            &self,
            orders: alloy::sol_types::private::Vec<
                <SignedOrder as alloy::sol_types::SolType>::RustType,
            >,
            callbackData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBatchWithCallbackCall, N> {
            self.call_builder(
                &executeBatchWithCallbackCall {
                    orders,
                    callbackData,
                },
            )
        }
        ///Creates a new call builder for the [`executeWithCallback`] function.
        pub fn executeWithCallback(
            &self,
            order: <SignedOrder as alloy::sol_types::SolType>::RustType,
            callbackData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeWithCallbackCall, N> {
            self.call_builder(
                &executeWithCallbackCall {
                    order,
                    callbackData,
                },
            )
        }
        ///Creates a new call builder for the [`feeController`] function.
        pub fn feeController(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, feeControllerCall, N> {
            self.call_builder(&feeControllerCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permit2`] function.
        pub fn permit2(&self) -> alloy_contract::SolCallBuilder<T, &P, permit2Call, N> {
            self.call_builder(&permit2Call {})
        }
        ///Creates a new call builder for the [`setProtocolFeeController`] function.
        pub fn setProtocolFeeController(
            &self,
            _newFeeController: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setProtocolFeeControllerCall, N> {
            self.call_builder(
                &setProtocolFeeControllerCall {
                    _newFeeController,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > V3DutchOrderReactorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Fill`] event.
        pub fn Fill_filter(&self) -> alloy_contract::Event<T, &P, Fill, N> {
            self.event_filter::<Fill>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`ProtocolFeeControllerSet`] event.
        pub fn ProtocolFeeControllerSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProtocolFeeControllerSet, N> {
            self.event_filter::<ProtocolFeeControllerSet>()
        }
    }
}
